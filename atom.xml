<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>BaoWJ&#39;s Blog</title>
  
  
  <link href="https://1.15.86.100/atom.xml" rel="self"/>
  
  <link href="https://1.15.86.100/"/>
  <updated>2022-04-03T14:06:18.771Z</updated>
  <id>https://1.15.86.100/</id>
  
  <author>
    <name>Bao Wenjie</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>关于C++ STL中的upper_bound()</title>
    <link href="https://1.15.86.100/2022/04/03/%E5%85%B3%E4%BA%8EC-STL%E4%B8%AD%E7%9A%84upper-bound/"/>
    <id>https://1.15.86.100/2022/04/03/%E5%85%B3%E4%BA%8EC-STL%E4%B8%AD%E7%9A%84upper-bound/</id>
    <published>2022-04-03T11:29:38.000Z</published>
    <updated>2022-04-03T14:06:18.771Z</updated>
    
    <content type="html"><![CDATA[<h1 id="关于C-STL中的upper-bound"><a href="#关于C-STL中的upper-bound" class="headerlink" title="关于C++ STL中的upper_bound()"></a>关于C++ STL中的upper_bound()</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>总所周知<span class="github-emoji"><span>😄</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f604.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>，C++的<strong>upper_bound()</strong>函数是查找一个<strong>非减序列</strong>中位于<strong>指定元素后</strong>的<strong>第一个元素</strong>的函数。查找网上资料，发现该函数是通过<strong>二分查找</strong>实现的${\mathcal{O}\log{n}}$。但是，<strong>upper_bound()</strong>查找的<strong>元素集合</strong>可以是<strong>链表</strong>（比如，下面代码是可以执行的）：</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;list&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>{</span><br><span class="line">list&lt;<span class="keyword">int</span>&gt; a{ <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span> };</span><br><span class="line">cout &lt;&lt; *<span class="built_in">upper_bound</span>(a.<span class="built_in">begin</span>(), a.<span class="built_in">end</span>(), <span class="number">3</span>);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>那么问题来了，<strong>链表要怎么进行二分查找？</strong>链表中的元素<strong>物理地址</strong>不是连续的，而<strong>二分查找</strong>的关键是利用物理地址连续的特点，用$\mathcal{O}(1)$的时间找到第$(left+right)/2$个元素。</p><p>为此，我查找了<strong>STL</strong>源码。</p><h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><h3 id="基本原理"><a href="#基本原理" class="headerlink" title="基本原理"></a>基本原理</h3><ul><li>对于<strong>存储地址连续</strong>的元素集合：利用$\mathcal{O}(1)$的时间找到第$(left+right)/2$个元素；</li><li>对于<strong>存储地址不连续</strong>的元素集合：从$left$向后<strong>遍历</strong>$(left+right)/2$个元素，找到第$(left+right)/2$个元素；</li></ul><h3 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h3><h4 id="upper-bound"><a href="#upper-bound" class="headerlink" title="upper_bound"></a>upper_bound</h4><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// FUNCTION TEMPLATE upper_bound</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> _<span class="title">FwdIt</span>, <span class="keyword">class</span> _<span class="title">Ty</span>, <span class="keyword">class</span> _<span class="title">Pr</span>&gt;</span></span><br><span class="line"><span class="function">_NODISCARD _CONSTEXPR20 _FwdIt <span class="title">upper_bound</span><span class="params">(_FwdIt _First, _FwdIt _Last, <span class="keyword">const</span> _Ty&amp; _Val, _Pr _Pred)</span> </span>{</span><br><span class="line">    <span class="comment">// find first element that _Val is before</span></span><br><span class="line">    _Adl_verify_range(_First, _Last);</span><br><span class="line">    <span class="keyword">auto</span> _UFirst                = _Get_unwrapped(_First);</span><br><span class="line">    _Iter_diff_t&lt;_FwdIt&gt; _Count = _STD <span class="built_in">distance</span>(_UFirst, _Get_unwrapped(_Last));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (<span class="number">0</span> &lt; _Count) { <span class="comment">// divide and conquer, find half that contains answer</span></span><br><span class="line">        _Iter_diff_t&lt;_FwdIt&gt; _Count2 = _Count / <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">const</span> <span class="keyword">auto</span> _UMid             = _STD <span class="built_in">next</span>(_UFirst, _Count2);</span><br><span class="line">        <span class="keyword">if</span> (_Pred(_Val, *_UMid)) {</span><br><span class="line">            _Count = _Count2;</span><br><span class="line">        } <span class="keyword">else</span> { <span class="comment">// try top half</span></span><br><span class="line">            _UFirst = _Next_iter(_UMid);</span><br><span class="line">            _Count -= _Count2 + <span class="number">1</span>;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    _Seek_wrapped(_First, _UFirst);</span><br><span class="line">    <span class="keyword">return</span> _First;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><ul><li><strong>_First</strong>、<strong>_Last</strong>：首元素和尾元素的<strong>迭代器</strong>；</li><li><strong>_UFirst</strong>、<strong>_UMid</strong>：首元素和<strong>mid</strong>元素的<strong>迭代器指针</strong>；</li><li><strong>_Count</strong>：<strong>_UFirst</strong>和<strong>_UMid</strong>之间距离；</li><li><p><strong>_Count2</strong>：<strong>_Count</strong>距离一半；</p></li><li><p><strong>第5行</strong>：验证<strong>_First</strong>和<strong>_Last</strong>是否构成一个区间（防止死循环）；</p></li><li><p><strong>第7行</strong>：获取<strong>_First</strong>和<strong>_Last</strong>之间的元素个数，<strong>distance</strong>源码见下面；</p></li><li><p><strong>第11行</strong>：获取<strong>mid</strong>元素的指针；</p></li><li><p><strong>第9-18行</strong>：经典的<strong>二分法</strong>逻辑：</p><p>  如果<strong>mid</strong>值【<strong>*_UMid</strong>】和目标值<strong>_Val</strong>，满足条件<strong>_Pred</strong>：</p><ul><li><p>将<strong>_UFirst</strong>和<strong>_UMid</strong>距离缩短到一半，相当于【right = mid】；</p><p>否则：</p></li><li><p><strong>_UFirst</strong>设为<strong>_UFirst</strong>下一个元素，相当于【left = mid + 1】；</p></li><li><strong>_Count</strong>重新赋值，让<strong>_UFirst</strong>+<strong>_Count</strong>的位置不变，相当于【right位置不变】；</li></ul></li></ul><h4 id="distance"><a href="#distance" class="headerlink" title="distance"></a>distance</h4><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> _<span class="title">InIt</span>&gt;</span></span><br><span class="line"><span class="function">_NODISCARD _CONSTEXPR17 _Iter_diff_t&lt;_InIt&gt; <span class="title">distance</span><span class="params">(_InIt _First, _InIt _Last)</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">if</span> <span class="title">constexpr</span> <span class="params">(_Is_random_iter_v&lt;_InIt&gt;)</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> _Last - _First; <span class="comment">// assume the iterator will do debug checking</span></span><br><span class="line">    } <span class="keyword">else</span> {</span><br><span class="line">        _Adl_verify_range(_First, _Last);</span><br><span class="line">        <span class="keyword">auto</span> _UFirst             = _Get_unwrapped(_First);</span><br><span class="line">        <span class="keyword">const</span> <span class="keyword">auto</span> _ULast        = _Get_unwrapped(_Last);</span><br><span class="line">        _Iter_diff_t&lt;_InIt&gt; _Off = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (; _UFirst != _ULast; ++_UFirst) {</span><br><span class="line">            ++_Off;</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> _Off;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>功能：获取<strong>_First</strong>和<strong>_Last</strong>之间元素个数。</p><p><strong>IF</strong>判断<strong>集合中元素地址是否是连续的</strong>：</p><p>如果是的：</p><ul><li>直接返回地址的差值；</li></ul><p>否则：</p><ul><li><strong>遍历</strong>查找元素个数；</li></ul><h4 id="advance"><a href="#advance" class="headerlink" title="advance"></a>advance</h4><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> _<span class="title">InIt</span>, <span class="keyword">class</span> _<span class="title">Diff</span>&gt;</span></span><br><span class="line"><span class="function">_CONSTEXPR17 <span class="keyword">void</span> <span class="title">advance</span><span class="params">(_InIt&amp; _Where, _Diff _Off)</span> </span>{ <span class="comment">// increment iterator by offset</span></span><br><span class="line">    <span class="function"><span class="keyword">if</span> <span class="title">constexpr</span> <span class="params">(_Is_random_iter_v&lt;_InIt&gt;)</span> </span>{</span><br><span class="line">        _Where += _Off;</span><br><span class="line">    } <span class="keyword">else</span> {</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in"><span class="keyword">constexpr</span></span> (is_signed_v&lt;_Diff&gt; &amp;&amp; !_Is_bidi_iter_v&lt;_InIt&gt;) {</span><br><span class="line">            _STL_ASSERT(_Off &gt;= <span class="number">0</span>, <span class="string">"negative advance of non-bidirectional iterator"</span>);</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="keyword">decltype</span>(<span class="keyword">auto</span>) _UWhere      = _Get_unwrapped_n(_STD <span class="built_in">move</span>(_Where), _Off);</span><br><span class="line">        <span class="keyword">constexpr</span> <span class="keyword">bool</span> _Need_rewrap = !is_reference_v&lt;<span class="keyword">decltype</span>(_Get_unwrapped_n(_STD <span class="built_in">move</span>(_Where), _Off))&gt;;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">if</span> <span class="title">constexpr</span> <span class="params">(is_signed_v&lt;_Diff&gt; &amp;&amp; _Is_bidi_iter_v&lt;_InIt&gt;)</span> </span>{</span><br><span class="line">            <span class="keyword">for</span> (; _Off &lt; <span class="number">0</span>; ++_Off) {</span><br><span class="line">                --_UWhere;</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (; <span class="number">0</span> &lt; _Off; --_Off) {</span><br><span class="line">            ++_UWhere;</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">if</span> <span class="title">constexpr</span> <span class="params">(_Need_rewrap)</span> </span>{</span><br><span class="line">            _Seek_wrapped(_Where, _STD <span class="built_in">move</span>(_UWhere));</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>功能：从<strong>_Where</strong>处获取到第<strong>_Off</strong>个元素。</p><p><strong>IF</strong>判断<strong>集合中元素地址是否是连续的</strong>：</p><p>如果是的：</p><ul><li>直接返回<strong>地址加上距离</strong>；</li></ul><p>否则：</p><ul><li><strong>遍历</strong>查找元素个数（根据<strong>_Off</strong>符号，向前或向后遍历）；</li></ul><h2 id="复杂度分析"><a href="#复杂度分析" class="headerlink" title="复杂度分析"></a>复杂度分析</h2><ul><li><p>对于长度为$n$的<strong>地址连续</strong>集合，其时间复杂度为$\mathcal{O}(\log{n})$</p></li><li><p>对于长度为$n$的<strong>地址不连续</strong>集合，其时间复杂度为</p><script type="math/tex; mode=display">\mathcal{O}(n)=\frac{n}{2}+\frac{n}{4}+\frac{n}{8}+ \dots</script></li></ul><h2 id="实验"><a href="#实验" class="headerlink" title="实验"></a>实验</h2><p>以下实验为验证<font color="red">对于长度为$n$的<strong>地址不连续</strong>集合，其时间复杂度为$\mathcal{O}(n)$</font></p><h4 id="实验代码"><a href="#实验代码" class="headerlink" title="实验代码"></a>实验代码</h4><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;list&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>{</span><br><span class="line"><span class="keyword">clock_t</span> start, finish;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">100</span>; i++)</span><br><span class="line">{</span><br><span class="line"><span class="function">list&lt;<span class="keyword">int</span>&gt; <span class="title">a</span><span class="params">(<span class="number">100000</span> * i, <span class="number">0</span>)</span></span>;</span><br><span class="line">start = <span class="built_in">clock</span>();</span><br><span class="line"><span class="built_in">upper_bound</span>(a.<span class="built_in">begin</span>(), a.<span class="built_in">end</span>(), <span class="number">3</span>);</span><br><span class="line">finish = <span class="built_in">clock</span>();</span><br><span class="line">cout &lt;&lt; finish - start &lt;&lt; <span class="string">","</span>;</span><br><span class="line">}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h4 id="实验原始数据"><a href="#实验原始数据" class="headerlink" title="实验原始数据"></a>实验原始数据</h4><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">13,29,39,51,73,71,86,95,112,127,130,143,153,164,179,195,202,211,224,240,247,266,275,282,295,307,320,327,344,358,369,382,389,398,415,429,439,444,465,482,482,496,521,518,534,545,566,571,589,591,603,616,627,640,650,659,674,685,700,720,725,730,745,756,769,775,818,813,830,831,846,861,869,877,886,904,927,927,941,956,966,970,995,1061,1085,1110,1105,1118,1124,1139,1144,1178,1103,1114,1122,1136,1149,1152,1168,1187</span><br></pre></td></tr></tbody></table></figure><h4 id="绘图代码"><a href="#绘图代码" class="headerlink" title="绘图代码"></a>绘图代码</h4><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> matplotlib <span class="keyword">import</span> pyplot</span><br><span class="line"><span class="keyword">import</span> matplotlib</span><br><span class="line">x = [i * <span class="number">100000</span> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">101</span>, <span class="number">1</span>)]</span><br><span class="line">y = [<span class="number">13</span>,<span class="number">29</span>,<span class="number">39</span>,<span class="number">51</span>,<span class="number">73</span>,<span class="number">71</span>,<span class="number">86</span>,<span class="number">95</span>,<span class="number">112</span>,<span class="number">127</span>,<span class="number">130</span>,<span class="number">143</span>,<span class="number">153</span>,<span class="number">164</span>,<span class="number">179</span>,<span class="number">195</span>,<span class="number">202</span>,<span class="number">211</span>,<span class="number">224</span>,<span class="number">240</span>,<span class="number">247</span>,<span class="number">266</span>,<span class="number">275</span>,<span class="number">282</span>,<span class="number">295</span>,<span class="number">307</span>,<span class="number">320</span>,<span class="number">327</span>,<span class="number">344</span>,<span class="number">358</span>,<span class="number">369</span>,<span class="number">382</span>,<span class="number">389</span>,<span class="number">398</span>,<span class="number">415</span>,<span class="number">429</span>,<span class="number">439</span>,<span class="number">444</span>,<span class="number">465</span>,<span class="number">482</span>,<span class="number">482</span>,<span class="number">496</span>,<span class="number">521</span>,<span class="number">518</span>,<span class="number">534</span>,<span class="number">545</span>,<span class="number">566</span>,<span class="number">571</span>,<span class="number">589</span>,<span class="number">591</span>,<span class="number">603</span>,<span class="number">616</span>,<span class="number">627</span>,<span class="number">640</span>,<span class="number">650</span>,<span class="number">659</span>,<span class="number">674</span>,<span class="number">685</span>,<span class="number">700</span>,<span class="number">720</span>,<span class="number">725</span>,<span class="number">730</span>,<span class="number">745</span>,<span class="number">756</span>,<span class="number">769</span>,<span class="number">775</span>,<span class="number">818</span>,<span class="number">813</span>,<span class="number">830</span>,<span class="number">831</span>,<span class="number">846</span>,<span class="number">861</span>,<span class="number">869</span>,<span class="number">877</span>,<span class="number">886</span>,<span class="number">904</span>,<span class="number">927</span>,<span class="number">927</span>,<span class="number">941</span>,<span class="number">956</span>,<span class="number">966</span>,<span class="number">970</span>,<span class="number">995</span>,<span class="number">1061</span>,<span class="number">1085</span>,<span class="number">1110</span>,<span class="number">1105</span>,<span class="number">1118</span>,<span class="number">1124</span>,<span class="number">1139</span>,<span class="number">1144</span>,<span class="number">1178</span>,<span class="number">1103</span>,<span class="number">1114</span>,<span class="number">1122</span>,<span class="number">1136</span>,<span class="number">1149</span>,<span class="number">1152</span>,<span class="number">1168</span>,<span class="number">1187</span>]</span><br><span class="line"></span><br><span class="line">matplotlib.rcParams[<span class="string">'font.family'</span>]=<span class="string">'STSong'</span></span><br><span class="line">matplotlib.rcParams[<span class="string">'font.size'</span>]=<span class="number">20</span></span><br><span class="line">pyplot.title(<span class="string">"list链表长度与upper_bound消耗时间图"</span>)</span><br><span class="line">pyplot.grid()</span><br><span class="line">pyplot.ylabel(<span class="string">"消耗时间/单位(1)"</span>)</span><br><span class="line">pyplot.xlabel(<span class="string">"链表长度/单位(1)"</span>)</span><br><span class="line">pyplot.scatter(x, y)</span><br><span class="line">pyplot.plot(x, y)</span><br><span class="line">pyplot.show()</span><br></pre></td></tr></tbody></table></figure><h4 id="可视化结果"><a href="#可视化结果" class="headerlink" title="可视化结果"></a>可视化结果</h4><p><img src="/2022/04/03/%E5%85%B3%E4%BA%8EC-STL%E4%B8%AD%E7%9A%84upper-bound/Figure_1.png" alt=""></p><p>发现时间复杂度确为$\mathcal{O}(n)$</p>]]></content>
    
    
    <summary type="html">C++ STL库中的upper_bound()函数源码解析。</summary>
    
    
    
    <category term="C++" scheme="https://1.15.86.100/categories/C/"/>
    
    
    <category term="C++" scheme="https://1.15.86.100/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>docker-command</title>
    <link href="https://1.15.86.100/2022/03/20/docker-command/"/>
    <id>https://1.15.86.100/2022/03/20/docker-command/</id>
    <published>2022-03-20T02:30:25.000Z</published>
    <updated>2022-03-22T12:16:21.589Z</updated>
    
    <content type="html"><![CDATA[<h1 id="常用docker命令"><a href="#常用docker命令" class="headerlink" title="常用docker命令"></a>常用docker命令</h1><ul><li><p><code>docker inspect &lt;friendly-name|container-id&gt;</code></p><p>  查看容器详细信息；</p></li><li><p><code>docker logs &lt;friendly-name|container-id&gt;</code>：</p><p>  查看容器日志；</p></li><li><p><code>docker ps</code></p><p>  查看所有运行的容器；</p></li><li><p><code>docker port &lt;container-name&gt; &lt;container-port&gt;</code></p><p>  查看容器端口映射到的主机端口；</p></li><li><p><code>docker run -it &lt;container-name&gt; bash</code></p><p>  在前台运行镜像；</p></li></ul><h2 id="容器管理"><a href="#容器管理" class="headerlink" title="容器管理"></a>容器管理</h2><ul><li><p><code>docker run -d --name &lt;container-name&gt; -v &lt;host-dir&gt;:&lt;container-dir&gt; -p &lt;host-port&gt;:&lt;container-port&gt;  &lt;image&gt;</code></p><p>  创建容器并在后台运行；</p></li><li><p><code>docker run -d --name &lt;container-name&gt; --restart=on-failure:&lt;restart-times&gt;</code></p><p>  运行容器并设置<strong>重启次数</strong>；</p></li><li><p><code>docker run -d --name &lt;container-name&gt; --restart=always &lt;image-name&gt;</code></p><p>  运行容器并设置<strong>失败后一直重启</strong>；</p></li><li><p><code>docker run -l &lt;key&gt;=&lt;value&gt; -d &lt;name&gt;</code></p><p>  运行容器并设置<strong>一个标签</strong>；</p></li><li><p><code>docker run --label-file=&lt;file-name&gt; -d &lt;name&gt;</code></p><p>  运行容器并通过文件<strong>设置多个标签</strong>【每个标签占一行】；</p></li><li><p><code>docker ps --filter "label=&lt;key&gt;=&lt;value&gt;"</code></p><p>  根据<strong>标签</strong>查看容器；</p></li></ul><h2 id="镜像管理"><a href="#镜像管理" class="headerlink" title="镜像管理"></a>镜像管理</h2><ul><li><p><code>docker build -t &lt;build-directory&gt; .</code></p><p>  从<strong>Dockerfile</strong>构建镜像；</p></li><li><p><code>docker images --filter "label=&lt;key&gt;=&lt;value&gt;"</code></p><p>  根据<strong>标签</strong>查找镜像；</p></li></ul><h2 id="Dockerfile"><a href="#Dockerfile" class="headerlink" title="Dockerfile"></a>Dockerfile</h2><h3 id="Dockerfile模板"><a href="#Dockerfile模板" class="headerlink" title="Dockerfile模板"></a>Dockerfile模板</h3><h3 id="Dockerfile命令"><a href="#Dockerfile命令" class="headerlink" title="Dockerfile命令"></a>Dockerfile命令</h3><ul><li><p><code>FROM &lt;image&gt;:&lt;tag&gt;</code>：指定基础镜像：</p>  <figure class="highlight dockerfile"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> node:<span class="number">10</span>-alpine</span><br></pre></td></tr></tbody></table></figure></li><li><p><code>RUN &lt;command&gt;</code>：执行<strong>command</strong>：</p>  <figure class="highlight dockerfile"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">RUN</span><span class="bash"> mkdir -p /src/app</span></span><br></pre></td></tr></tbody></table></figure></li><li><p><code>LABEL &lt;key&gt;:&lt;value&gt;</code>：设置标签，在该语句之后的容器都会带上该标签：</p>  <figure class="highlight dockerfile"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">LABEL</span><span class="bash"> vendor=Katacoda</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">LABEL</span><span class="bash"> vendor=Katacoda \ </span></span><br><span class="line">com.katacoda.version=<span class="number">0.0</span>.<span class="number">5</span> \ </span><br><span class="line">com.katacoda.build-date=<span class="number">2016</span>-<span class="number">07</span>-<span class="number">01</span>T10:<span class="number">47</span>:<span class="number">29</span>Z \ </span><br><span class="line">com.katacoda.course=Docker</span><br></pre></td></tr></tbody></table></figure></li><li><p><code>WORKDIR &lt;directory&gt;</code>：设置工作目录：</p>  <figure class="highlight dockerfile"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">WORKDIR</span><span class="bash"> /src/app</span></span><br></pre></td></tr></tbody></table></figure></li><li><p><code>COPY &lt;host-src&gt; &lt;image-dest&gt;</code>：从主机拷贝文件到镜像：</p>  <figure class="highlight dockerfile"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">COPY</span><span class="bash"> package.json /src/app/package.json</span></span><br></pre></td></tr></tbody></table></figure></li></ul><h2 id="网络管理"><a href="#网络管理" class="headerlink" title="网络管理"></a>网络管理</h2><ul><li><p><code>docker network create  &lt;net-name&gt;</code></p><p>  创建网络；</p></li><li><p><code>docker run -d --name=&lt;container-name&gt; --net=&lt;net-name&gt; &lt;image-name&gt;</code></p><p>  创建容器时指定网络；</p></li><li><p><code>docker network connect &lt;net-name&gt; &lt;container-name&gt;</code></p><p>  连接容器到网络；</p></li><li><p><code>docker network connect --alias &lt;alias-name&gt; &lt;net-name&gt; &lt;container-name&gt;</code></p><p>  连接容器到网络，并设置该容器在该网络中的别名【可以用别名访问】；</p></li><li><p><code>docker network ls</code></p><p>  查看所有网络；</p></li><li><p><code>docker network inspect &lt;net-name&gt;</code></p><p>  查看某个网络的情况【包括连接的容器】；</p><p>  <img src="/2022/03/20/docker-command/docker-command\1.png" alt=""></p></li><li><p><code>docker network disconnect &lt;net-name&gt; &lt;container-name&gt;</code></p><p>  断开容器和网络的连接；</p></li></ul><h2 id="存储管理"><a href="#存储管理" class="headerlink" title="存储管理"></a>存储管理</h2><ul><li><p><code>docker run  -v &lt;host-dir&gt;:&lt;container-dir&gt;  --name=&lt;container-name&gt; -d &lt;image-name&gt;</code></p><p>  挂载本地目录到容器；</p></li></ul><h2 id="日志管理"><a href="#日志管理" class="headerlink" title="日志管理"></a>日志管理</h2><ul><li><p><code>docker logs &lt;container-name&gt;</code></p><p>  查看容器日志；</p></li><li><p><code>docker run -d --name &lt;container-name&gt; --log-driver=none &lt;image-name&gt;</code></p><p>  运行容器且不记录日志；</p></li></ul>]]></content>
    
    
    <summary type="html">常用docker命令。</summary>
    
    
    
    <category term="docker" scheme="https://1.15.86.100/categories/docker/"/>
    
    
    <category term="docker" scheme="https://1.15.86.100/tags/docker/"/>
    
    <category term="command" scheme="https://1.15.86.100/tags/command/"/>
    
  </entry>
  
  <entry>
    <title>Kubernetes-command</title>
    <link href="https://1.15.86.100/2022/02/28/Kubernetes-command/"/>
    <id>https://1.15.86.100/2022/02/28/Kubernetes-command/</id>
    <published>2022-02-28T01:17:15.000Z</published>
    <updated>2022-02-28T07:30:32.910Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Kubernetes-command"><a href="#Kubernetes-command" class="headerlink" title="Kubernetes-command"></a>Kubernetes-command</h1><h2 id="安装-搭建"><a href="#安装-搭建" class="headerlink" title="安装-搭建"></a>安装-搭建</h2><h3 id="节点加入集群"><a href="#节点加入集群" class="headerlink" title="节点加入集群"></a>节点加入集群</h3><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubeadm join 192.168.40.8:6443 --token [token]  --discovery-token-ca-cert-hash sha256:[hash]</span><br></pre></td></tr></tbody></table></figure><h2 id="查看"><a href="#查看" class="headerlink" title="查看"></a>查看</h2><ul><li><p>查看节点：</p>  <figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl get nodes</span><br></pre></td></tr></tbody></table></figure></li><li><p>查看pod</p>  <figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl get pods</span><br></pre></td></tr></tbody></table></figure></li><li><p>查看service</p>  <figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl get service/svc</span><br></pre></td></tr></tbody></table></figure></li><li><p>查看deployment</p>  <figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl get deployment</span><br></pre></td></tr></tbody></table></figure></li><li><p>查看一次性任务：</p>  <figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl get jobs</span><br></pre></td></tr></tbody></table></figure></li><li><p>查看定时任务：</p>  <figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl get cronjobs</span><br></pre></td></tr></tbody></table></figure></li></ul><ul><li><p>查看详细信息</p>  <figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl describe [node/pod/deployment] [name]</span><br></pre></td></tr></tbody></table></figure></li></ul><h2 id="应用部署"><a href="#应用部署" class="headerlink" title="应用部署"></a>应用部署</h2><h3 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h3><ul><li><p>通过<code>YAML</code>文件：</p>  <figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl apply -f [file.yaml]</span><br></pre></td></tr></tbody></table></figure></li><li><p>开放对外端口：</p>  <figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl expose deployment [name] --port=80 --type=NodePort --target-port=80 --name=[svc-name]</span><br></pre></td></tr></tbody></table></figure></li></ul><h3 id="更新"><a href="#更新" class="headerlink" title="更新"></a>更新</h3><ul><li><p>版本更新：</p>  <figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl set image deployment web nginx=nginx:1.15</span><br></pre></td></tr></tbody></table></figure></li></ul><h3 id="回滚"><a href="#回滚" class="headerlink" title="回滚"></a>回滚</h3><ul><li><p>查看历史版本：</p>  <figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl rollout history deployment [name]</span><br></pre></td></tr></tbody></table></figure></li><li><p>回到上一个版本：</p>  <figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl rollout undo deployment [name]</span><br></pre></td></tr></tbody></table></figure></li><li><p>回滚到指定版本：</p>  <figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl rollout undo deployment [name] --to-version=[old-version]</span><br></pre></td></tr></tbody></table></figure></li></ul><ul><li><p>查看回滚/更新状态：</p>  <figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl rollout status deployment [name]</span><br></pre></td></tr></tbody></table></figure></li></ul><h2 id="管理"><a href="#管理" class="headerlink" title="管理"></a>管理</h2><h3 id="污点"><a href="#污点" class="headerlink" title="污点"></a>污点</h3><ul><li><p>查看节点已设置的污点：</p>  <figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl describe node [node-name] | grep Taints</span><br></pre></td></tr></tbody></table></figure></li><li><p>设置节点的污点：</p>  <figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl taint node [node-name] [key]=[value]:[NoSchedule/PreferNoSchedule/NoExecute]</span><br></pre></td></tr></tbody></table></figure></li><li><p><strong>删除</strong>节点的污点：</p>  <figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl taint node [node-name] [key]=[value]:[NoSchedule/PreferNoSchedule/NoExecute]-</span><br></pre></td></tr></tbody></table></figure></li></ul><h3 id="弹性伸缩"><a href="#弹性伸缩" class="headerlink" title="弹性伸缩"></a>弹性伸缩</h3><ul><li><p>创建副本：</p>  <figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl scale deployment [name] --replicas=[num]</span><br></pre></td></tr></tbody></table></figure></li></ul>]]></content>
    
    
    <summary type="html">kuberbetes常用命令。</summary>
    
    
    
    <category term="kubernetes" scheme="https://1.15.86.100/categories/kubernetes/"/>
    
    
    <category term="kubernetes" scheme="https://1.15.86.100/tags/kubernetes/"/>
    
  </entry>
  
  <entry>
    <title>代理模式</title>
    <link href="https://1.15.86.100/2022/01/12/%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F/"/>
    <id>https://1.15.86.100/2022/01/12/%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F/</id>
    <published>2022-01-12T03:58:10.000Z</published>
    <updated>2022-01-12T04:25:06.236Z</updated>
    
    <content type="html"><![CDATA[<h1 id="代理模式"><a href="#代理模式" class="headerlink" title="代理模式"></a>代理模式</h1><p>代理对象在客户端和目标对象之间起到中介作用，代理模式属于结构性设计模式。使用代理模式主要有两个目的：</p><ul><li>保护目标对象【防止用户调用目标对象其他方法】；</li><li>增强目标对象【在代理对象调用方法中增加代码逻辑】；</li></ul><h2 id="静态代理"><a href="#静态代理" class="headerlink" title="静态代理"></a>静态代理</h2><p><strong>出租房子</strong>接口：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Rent</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">rent</span><span class="params">()</span></span>;</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p><strong>房东</strong>要出租房子：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Host</span> <span class="keyword">implements</span> <span class="title">Rent</span></span>{</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">rent</span><span class="params">()</span> </span>{</span><br><span class="line">        System.out.println(<span class="string">"出租房屋"</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><strong>代理对象</strong>代理<strong>Rent</strong>接口：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Proxy</span> <span class="keyword">implements</span> <span class="title">Rent</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Rent rent;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Proxy</span><span class="params">()</span> </span>{</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Proxy</span><span class="params">(Rent rent)</span> </span>{</span><br><span class="line">        <span class="keyword">this</span>.rent = rent;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">rent</span><span class="params">()</span> </span>{</span><br><span class="line">        rent.rent();</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><strong>客户</strong>租房子：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        Proxy proxy = <span class="keyword">new</span> Proxy(<span class="keyword">new</span> Host());</span><br><span class="line">        proxy.rent();</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="动态代理"><a href="#动态代理" class="headerlink" title="动态代理"></a>动态代理</h2><p>代理类：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProxyInvocationHandler</span> <span class="keyword">implements</span> <span class="title">InvocationHandler</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Rent rent;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setRent</span><span class="params">(Rent rent)</span> </span>{</span><br><span class="line">        <span class="keyword">this</span>.rent = rent;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取代理类</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">getProxy</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> Proxy.newProxyInstance(<span class="keyword">this</span>.getClass().getClassLoader(), rent.getClass().getInterfaces(), <span class="keyword">this</span>);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable </span>{</span><br><span class="line">        <span class="keyword">return</span> method.invoke(rent, args);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>客户租房子：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        Host host = <span class="keyword">new</span> Host();</span><br><span class="line"></span><br><span class="line">        ProxyInvocationHandler proxyInvocationHandler = <span class="keyword">new</span> ProxyInvocationHandler();</span><br><span class="line">        proxyInvocationHandler.setRent(host);</span><br><span class="line">        Rent proxy = (Rent) proxyInvocationHandler.getProxy();</span><br><span class="line">        proxy.rent();</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>]]></content>
    
    
    <summary type="html">静态代理、动态代理</summary>
    
    
    
    <category term="设计模式" scheme="https://1.15.86.100/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
  </entry>
  
  <entry>
    <title>Redis</title>
    <link href="https://1.15.86.100/2021/12/26/Redis/"/>
    <id>https://1.15.86.100/2021/12/26/Redis/</id>
    <published>2021-12-26T02:24:56.000Z</published>
    <updated>2021-12-29T02:41:23.878Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Redis"><a href="#Redis" class="headerlink" title="Redis"></a>Redis</h1><h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2><h3 id="登录"><a href="#登录" class="headerlink" title="登录"></a>登录</h3><ul><li><p><strong>启动服务</strong>：<code>redis-server /usr/local/bin/redis-config/redis.conf</code>；</p></li><li><p><strong>登录</strong>：<code>redis-cli -p 6379</code>；</p></li></ul><h3 id="操作"><a href="#操作" class="headerlink" title="操作"></a>操作</h3><ul><li><strong>测试联通</strong>：<code>ping</code>；</li><li><strong>清空数据库</strong>：<code>FLUSHALL</code>；</li><li><strong>查看所有key值</strong>：<code>keys *</code>；</li><li><strong>设置键值</strong>：<code>SET name baowj</code>；</li><li><strong>判断是否存在某个key</strong>：<code>EXISTS name</code>；</li><li><strong>设置键值的过期时间</strong>：<code>expire name 10</code>；</li><li><strong>查看键值的剩余时间</strong>：<code>ttl name</code>；</li><li><strong>查看数据类型</strong>：<code>type name</code>；</li><li></li></ul><h2 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h2><h4 id="Redis-单线程"><a href="#Redis-单线程" class="headerlink" title="Redis-单线程"></a>Redis-单线程</h4><p>Redis是基于<strong>内存操作</strong>，<strong>CPU</strong>不是Redis<strong>性能瓶颈</strong>，Redis的瓶颈是根据机器的<strong>内存</strong>和<strong>网络带宽</strong>，所以使用<strong>单线程</strong>。</p><h3 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h3><p>Redis<strong>单条</strong>命令式保证<strong>原子性</strong>的，但是<strong>事务不保证</strong>原子性。</p><h4 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h4><ul><li><strong><code>multi</code></strong>：开启事务；</li><li><strong><code>......</code></strong>：命令入队；</li><li><strong><code>exec</code></strong>：执行事务；</li><li><strong><code>discard</code></strong>：放弃事务；</li></ul><p><img src="/2021/12/26/Redis/image-20211228110713456.png" alt="image-20211228110713456"></p><h3 id="悲观锁"><a href="#悲观锁" class="headerlink" title="悲观锁"></a>悲观锁</h3><p>很悲观，认为什么时候都会出问题，无论做什么都会加锁。</p><h3 id="乐观锁"><a href="#乐观锁" class="headerlink" title="乐观锁"></a>乐观锁</h3><p>很乐观，认为什么时候都不会出问题，所以不会上锁；更新数据的时候去判断一下，在此期间是否有人修改过这个数据。</p><ul><li><p><strong><code>watch</code></strong>：加锁：</p>  <figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">watch money</span><br></pre></td></tr></tbody></table></figure></li><li><p><strong><code>unwatch</code></strong>：取消锁：</p>  <figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">unwatch</span><br></pre></td></tr></tbody></table></figure></li></ul><h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><h3 id="String"><a href="#String" class="headerlink" title="String"></a>String</h3><h3 id="List"><a href="#List" class="headerlink" title="List"></a>List</h3><ul><li><p><strong><code>LPUSH</code></strong>：从左边插入值到<strong>List</strong>：</p>  <figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lpush list 8</span><br></pre></td></tr></tbody></table></figure></li><li><p><strong><code>RPUSH</code></strong>：从右边插入值到<strong>List</strong>：</p>  <figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rpush list 8</span><br></pre></td></tr></tbody></table></figure></li><li><p><strong><code>LRANGE</code></strong>：获取<strong>List</strong>中的值：</p>  <figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lrange list 0 -1</span><br></pre></td></tr></tbody></table></figure></li><li><p><strong><code>LPOP</code></strong>：移除左边第一个元素；</p></li><li><p><strong><code>RPOP</code></strong>：移除右边第一个元素；</p></li><li><p><strong><code>Lindex</code></strong>：通过下标获取值：</p>  <figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Lindex list 0</span><br></pre></td></tr></tbody></table></figure></li><li><p><strong><code>Llen</code></strong>：获取列表长度：</p>  <figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Llen list</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure></li><li><p><strong><code>Lset</code></strong>：设置列表中指定下标的值：</p>  <figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lset list 0 value</span><br></pre></td></tr></tbody></table></figure></li><li><p><strong><code>Linsert</code></strong>：向列表中插入元素：</p>  <figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">linsert list after value new</span><br></pre></td></tr></tbody></table></figure></li></ul><h3 id="Set"><a href="#Set" class="headerlink" title="Set"></a>Set</h3><ul><li><p><strong><code>Sadd</code></strong>：添加元素：</p>  <figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sadd myset <span class="string">"hello"</span></span><br></pre></td></tr></tbody></table></figure></li><li><p><strong><code>Smembers</code></strong>：查看所有元素：</p>  <figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">smembers myset</span><br></pre></td></tr></tbody></table></figure></li><li><p><strong><code>Sismember</code></strong>：判断元素是否在<strong>Set</strong>中：</p>  <figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sismember myset hello</span><br></pre></td></tr></tbody></table></figure></li><li><p><strong><code>Srem</code></strong>：删除元素：</p>  <figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">srem myset hello</span><br></pre></td></tr></tbody></table></figure></li><li><p><strong><code>Srandmember</code></strong>：随机获取元素：</p>  <figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">srandmember myset</span><br></pre></td></tr></tbody></table></figure></li><li><p><strong><code>Sdiff</code></strong>：差集：</p>  <figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sdiff myset set1</span><br></pre></td></tr></tbody></table></figure></li><li><p><strong><code>sinter</code></strong>：交集：</p>  <figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Sinter myset set1</span><br></pre></td></tr></tbody></table></figure></li><li><p><strong><code>Sunion</code></strong>：并集：</p>  <figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sunion myset set1</span><br></pre></td></tr></tbody></table></figure></li></ul><h3 id="Hash"><a href="#Hash" class="headerlink" title="Hash"></a>Hash</h3><ul><li><p><strong><code>Hset</code></strong>：添加元素：</p>  <figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hset myhash key1 baowj</span><br></pre></td></tr></tbody></table></figure></li><li><p><strong><code>Hget</code></strong>：获取元素：</p>  <figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hget myhash key1</span><br></pre></td></tr></tbody></table></figure></li><li><p><strong><code>Hmset</code></strong>：设置多个元素：</p>  <figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hmset myhash key1 value1 key2 value2</span><br></pre></td></tr></tbody></table></figure></li><li><p><strong><code>Hmget</code></strong>：获取多个元素：</p>  <figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hmget myhash key1 key2</span><br></pre></td></tr></tbody></table></figure></li><li><p><strong><code>Hgetall</code></strong>：获取所有元素：</p>  <figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Hgetall myhasj</span><br></pre></td></tr></tbody></table></figure></li></ul><h3 id="Geospatial"><a href="#Geospatial" class="headerlink" title="Geospatial"></a>Geospatial</h3><ul><li><p><strong><code>geoadd</code></strong>：添加：</p>  <figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">geoadd china:city 114.34 30.50 wuhan</span><br></pre></td></tr></tbody></table></figure></li><li><p><strong><code>geopos</code></strong>：获取指定地区的经纬度：</p>  <figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">geopos china:city wuhan</span><br></pre></td></tr></tbody></table></figure></li><li><p><strong><code>geodist</code></strong>：获取两个位置之间距离：</p>  <figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">geodist china:city beijin wuhan</span><br></pre></td></tr></tbody></table></figure></li><li><p><strong><code>georadius</code></strong>：查找指定位置指定半径内的城市：</p>  <figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">georadius china:city 110 30 1000 km</span><br></pre></td></tr></tbody></table></figure></li><li><p><strong><code>georadiusbymember</code></strong>：查找指定城市指定半径内的城市：</p>  <figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">georadiusbymember china:city wuhan 1000 km</span><br></pre></td></tr></tbody></table></figure></li><li><p><strong><code>geohash</code></strong>：获取指定位置的hash：</p>  <figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">geohash china:city wuhan</span><br></pre></td></tr></tbody></table></figure></li></ul><h3 id="Hyperloglog"><a href="#Hyperloglog" class="headerlink" title="Hyperloglog"></a>Hyperloglog</h3><ul><li><p><strong><code>PFadd</code></strong>：添加元素：</p>  <figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pfadd mykey a b c c c b a a d f e f</span><br></pre></td></tr></tbody></table></figure></li><li><p><strong><code>PFcount</code></strong>：统计次数：</p>  <figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pfcount mykey</span><br></pre></td></tr></tbody></table></figure></li><li><p><strong><code>PFmerge</code></strong>：合并：</p>  <figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pfmerge mykey mkey1 mykey</span><br></pre></td></tr></tbody></table></figure></li></ul><h3 id="Bitmaps"><a href="#Bitmaps" class="headerlink" title="Bitmaps"></a>Bitmaps</h3><ul><li><p><strong><code>setbit</code></strong>：设置位值：</p>  <figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">setbit sign 0 1</span><br></pre></td></tr></tbody></table></figure></li><li><p><strong><code>getbit</code></strong>：查看位值：</p>  <figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">getbit sign 0</span><br></pre></td></tr></tbody></table></figure></li><li><p><strong><code>bitcount</code></strong>：统计：</p>  <figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bitcount sign</span><br></pre></td></tr></tbody></table></figure></li></ul><h2 id="Jedis"><a href="#Jedis" class="headerlink" title="Jedis"></a>Jedis</h2><p><strong>Redis</strong>官方推荐的<strong>java</strong>连接开发工具。</p><h3 id="使用步骤"><a href="#使用步骤" class="headerlink" title="使用步骤"></a>使用步骤</h3><h4 id="1-导入依赖"><a href="#1-导入依赖" class="headerlink" title="1.导入依赖"></a>1.导入依赖</h4><p><code>pom.xml</code></p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>redis.clients<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jedis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h4 id="2-编码"><a href="#2-编码" class="headerlink" title="2.编码"></a>2.编码</h4><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">    Jedis jedis = <span class="keyword">new</span> Jedis(<span class="string">"127.0.0.1"</span>, <span class="number">6379</span>);</span><br><span class="line">    System.out.println(jedis.ping());</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="事务-1"><a href="#事务-1" class="headerlink" title="事务"></a>事务</h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">    Jedis jedis = <span class="keyword">new</span> Jedis(<span class="string">"127.0.0.1"</span>, <span class="number">6379</span>);</span><br><span class="line"></span><br><span class="line">    JSONObject jsonObject = <span class="keyword">new</span> JSONObject();</span><br><span class="line">    jsonObject.put(<span class="string">"hello"</span>, <span class="string">"world"</span>);</span><br><span class="line">    jsonObject.put(<span class="string">"name"</span>, <span class="string">"baowj"</span>);</span><br><span class="line">    <span class="comment">// 开启事务</span></span><br><span class="line">    Transaction multi = jedis.multi();</span><br><span class="line">    String result = jsonObject.toString();</span><br><span class="line">    <span class="keyword">try</span> {</span><br><span class="line">        multi.set(<span class="string">"user1"</span>, result);</span><br><span class="line">        multi.set(<span class="string">"user2"</span>, result);</span><br><span class="line">        <span class="comment">// 执行事务</span></span><br><span class="line">        multi.exec();</span><br><span class="line">    } <span class="keyword">catch</span> (Exception e) {</span><br><span class="line">        <span class="comment">// 放弃事务</span></span><br><span class="line">        multi.discard();</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    } <span class="keyword">finally</span> {</span><br><span class="line">        jedis.close();</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>]]></content>
    
    
    <summary type="html">Redis使用</summary>
    
    
    
    <category term="Redis" scheme="https://1.15.86.100/categories/Redis/"/>
    
    
    <category term="Redis" scheme="https://1.15.86.100/tags/Redis/"/>
    
  </entry>
  
  <entry>
    <title>VMware-NAT网络模式下,设置静态IP后无法连接Internet的问题</title>
    <link href="https://1.15.86.100/2021/12/11/VMware-NAT%E7%BD%91%E7%BB%9C%E6%A8%A1%E5%BC%8F%E4%B8%8B-%E8%AE%BE%E7%BD%AE%E9%9D%99%E6%80%81IP%E5%90%8E%E6%97%A0%E6%B3%95%E8%BF%9E%E6%8E%A5Internet%E7%9A%84%E9%97%AE%E9%A2%98/"/>
    <id>https://1.15.86.100/2021/12/11/VMware-NAT%E7%BD%91%E7%BB%9C%E6%A8%A1%E5%BC%8F%E4%B8%8B-%E8%AE%BE%E7%BD%AE%E9%9D%99%E6%80%81IP%E5%90%8E%E6%97%A0%E6%B3%95%E8%BF%9E%E6%8E%A5Internet%E7%9A%84%E9%97%AE%E9%A2%98/</id>
    <published>2021-12-11T09:09:49.000Z</published>
    <updated>2021-12-11T10:41:14.689Z</updated>
    
    <content type="html"><![CDATA[<h1 id="VMware-NAT网络模式下-设置静态IP后无法连接Internet的问题"><a href="#VMware-NAT网络模式下-设置静态IP后无法连接Internet的问题" class="headerlink" title="VMware-NAT网络模式下,设置静态IP后无法连接Internet的问题"></a>VMware-NAT网络模式下,设置静态IP后无法连接Internet的问题</h1><h4 id="1-设置VMware手动DNS"><a href="#1-设置VMware手动DNS" class="headerlink" title="1.设置VMware手动DNS"></a>1.设置VMware手动DNS</h4><p><code>编辑</code>→<code>虚拟网络编辑器</code>→<code>NAT设置</code>→<code>DNS设置</code></p><p><img src="/2021/12/11/VMware-NAT%E7%BD%91%E7%BB%9C%E6%A8%A1%E5%BC%8F%E4%B8%8B-%E8%AE%BE%E7%BD%AE%E9%9D%99%E6%80%81IP%E5%90%8E%E6%97%A0%E6%B3%95%E8%BF%9E%E6%8E%A5Internet%E7%9A%84%E9%97%AE%E9%A2%98/image-20211211183200309.png" alt="image-20211211183200309" style="zoom: 80%;"></p><h4 id="2-设置Centos的静态IP和DNS"><a href="#2-设置Centos的静态IP和DNS" class="headerlink" title="2.设置Centos的静态IP和DNS"></a>2.设置Centos的静态IP和DNS</h4><p>编辑<code>/etc/sysconfig/network-scripts/ifcfg-ens33</code>文件：</p><p>设置<strong>静态IP</strong>：</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">BOOTPROTO=static</span><br><span class="line">IPADDR=192.168.230.129 # 和NAT子网匹配</span><br></pre></td></tr></tbody></table></figure><p>设置<strong>DNS</strong>：</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">DNS1=8.8.8.8</span><br><span class="line">DNS2=114.114.114.114</span><br></pre></td></tr></tbody></table></figure><h4 id="3-设置网关"><a href="#3-设置网关" class="headerlink" title="3.设置网关"></a>3.设置网关</h4><p>编辑<code>/etc/sysconfig/network</code>文件：</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GATEWAY=192.168.230.2 # 和NAT网关对应</span><br></pre></td></tr></tbody></table></figure><h4 id="4-重启"><a href="#4-重启" class="headerlink" title="4.重启"></a>4.重启</h4><p><img src="/2021/12/11/VMware-NAT%E7%BD%91%E7%BB%9C%E6%A8%A1%E5%BC%8F%E4%B8%8B-%E8%AE%BE%E7%BD%AE%E9%9D%99%E6%80%81IP%E5%90%8E%E6%97%A0%E6%B3%95%E8%BF%9E%E6%8E%A5Internet%E7%9A%84%E9%97%AE%E9%A2%98/image-20211211184055245.png" alt="image-20211211184055245"></p>]]></content>
    
    
    <summary type="html">解决VMware-NAT网络模式下,设置静态IP后无法连接Internet的问题</summary>
    
    
    
    <category term="Centos" scheme="https://1.15.86.100/categories/Centos/"/>
    
    
  </entry>
  
  <entry>
    <title>IntelliJ-Lombok插件</title>
    <link href="https://1.15.86.100/2021/12/09/IntelliJ-Lombok%E6%8F%92%E4%BB%B6/"/>
    <id>https://1.15.86.100/2021/12/09/IntelliJ-Lombok%E6%8F%92%E4%BB%B6/</id>
    <published>2021-12-09T04:10:31.000Z</published>
    <updated>2021-12-11T10:43:35.724Z</updated>
    
    <content type="html"><![CDATA[<h1 id="IntelliJ-Lombok插件"><a href="#IntelliJ-Lombok插件" class="headerlink" title="IntelliJ-Lombok插件"></a>IntelliJ-Lombok插件</h1><h3 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h3><p>利用<strong>注解</strong>自动生成<strong>getter</strong>和<strong>setter</strong>等方法。</p><h2 id="使用步骤"><a href="#使用步骤" class="headerlink" title="使用步骤"></a>使用步骤</h2><h4 id="1-加载插件"><a href="#1-加载插件" class="headerlink" title="1.加载插件"></a>1.加载插件</h4><p><img src="/2021/12/09/IntelliJ-Lombok%E6%8F%92%E4%BB%B6/image-20211209121300202.png" alt="image-20211209121300202" style="zoom:67%;"></p><h4 id="2-在项目导入依赖"><a href="#2-在项目导入依赖" class="headerlink" title="2.在项目导入依赖"></a>2.在项目导入依赖</h4><p><a href="https://mvnrepository.com/artifact/org.projectlombok/lombok">maven仓库依赖连接</a></p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.projectlombok/lombok --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.18.10<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h4 id="3-使用注解"><a href="#3-使用注解" class="headerlink" title="3.使用注解"></a>3.使用注解</h4><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@ToString</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>{</span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String email;</span><br><span class="line">    <span class="keyword">private</span>  Integer age;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>]]></content>
    
    
    <summary type="html">IntelliJ-Lombok插件使用。</summary>
    
    
    
    <category term="IntelliJ" scheme="https://1.15.86.100/categories/IntelliJ/"/>
    
    
  </entry>
  
  <entry>
    <title>Java-JDBC</title>
    <link href="https://1.15.86.100/2021/12/04/Java-JDBC/"/>
    <id>https://1.15.86.100/2021/12/04/Java-JDBC/</id>
    <published>2021-12-04T03:20:00.000Z</published>
    <updated>2021-12-05T03:27:16.368Z</updated>
    
    <content type="html"><![CDATA[<h1 id="JDBC"><a href="#JDBC" class="headerlink" title="JDBC"></a>JDBC</h1><h2 id="使用步骤"><a href="#使用步骤" class="headerlink" title="使用步骤"></a>使用步骤</h2><h3 id="基本流程"><a href="#基本流程" class="headerlink" title="基本流程"></a>基本流程</h3><h4 id="1-maven依赖"><a href="#1-maven依赖" class="headerlink" title="1.maven依赖"></a>1.maven依赖</h4><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.9<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h4 id="2-加载驱动"><a href="#2-加载驱动" class="headerlink" title="2.加载驱动"></a>2.加载驱动</h4><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Class.forName(<span class="string">"com.mysql.cj.jdbc.Driver"</span>);</span><br></pre></td></tr></tbody></table></figure><h4 id="3-用户信息"><a href="#3-用户信息" class="headerlink" title="3.用户信息"></a>3.用户信息</h4><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">String url = <span class="string">"jdbc:mysql://localhost:3306/"</span>;</span><br><span class="line">String database = <span class="string">"mydata"</span>;</span><br><span class="line">url = url + database + <span class="string">"?useUnicode=true&amp;characterEncoding=utf8&amp;useSSL=true&amp;serverTimezone=UTC"</span>;</span><br><span class="line">String username = <span class="string">"root"</span>;</span><br><span class="line">String password = <span class="string">"xxxxxx"</span>;</span><br></pre></td></tr></tbody></table></figure><h4 id="4-获取数据库驱动对象"><a href="#4-获取数据库驱动对象" class="headerlink" title="4.获取数据库驱动对象"></a>4.获取数据库驱动对象</h4><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Connection connection = DriverManager.getConnection(url, username, password);</span><br></pre></td></tr></tbody></table></figure><h4 id="5-获取statement"><a href="#5-获取statement" class="headerlink" title="5.获取statement"></a>5.获取statement</h4><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Statement statement = connection.createStatement();</span><br></pre></td></tr></tbody></table></figure><h4 id="6-执行SQL，获取结果"><a href="#6-执行SQL，获取结果" class="headerlink" title="6.执行SQL，获取结果"></a>6.执行SQL，获取结果</h4><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">String sql = <span class="string">"select name, region from country where code='ABW'"</span>;</span><br><span class="line"></span><br><span class="line">ResultSet resultSet = statement.executeQuery(sql);</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (resultSet.next()) {</span><br><span class="line">    System.out.println(<span class="string">"name="</span> + resultSet.getObject(<span class="string">"name"</span>));</span><br><span class="line">    System.out.println(<span class="string">"region="</span> + resultSet.getObject(<span class="string">"region"</span>));</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h4 id="7-关闭资源"><a href="#7-关闭资源" class="headerlink" title="7.关闭资源"></a>7.关闭资源</h4><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">resultSet.close();</span><br><span class="line">statement.close();</span><br><span class="line">connection.close();</span><br></pre></td></tr></tbody></table></figure><h3 id="事务处理"><a href="#事务处理" class="headerlink" title="事务处理"></a>事务处理</h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> {</span><br><span class="line">    conn.setAutoCommit(<span class="keyword">false</span>); <span class="comment">// 开启事务</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 具体操作</span></span><br><span class="line"></span><br><span class="line">    conn.commit(); <span class="comment">// 提交事务</span></span><br><span class="line">} <span class="keyword">catch</span> (Exception e) {</span><br><span class="line">    conn.rollback(); <span class="comment">//回滚</span></span><br><span class="line">} <span class="keyword">finally</span> {</span><br><span class="line"><span class="comment">// 释放资源</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="Connection"><a href="#Connection" class="headerlink" title="Connection"></a>Connection</h2><p>可以完成<strong>数据库</strong>相关的操作。</p><ul><li><strong>setAutoCommit()</strong>：<strong>false</strong>开启事务；</li><li><strong>commit()</strong>：提交事务；</li><li><strong>rollback()</strong>：回滚；</li></ul><h2 id="Statement"><a href="#Statement" class="headerlink" title="Statement"></a>Statement</h2><p>执行<strong>SQL</strong>命令，不安全不能防止<strong>SQL注入</strong>。</p><ul><li><strong>executeQuery(String sql)</strong>：执行查询；</li><li><strong>executeUpdate(String sql)</strong>：更新、插入、删除；</li><li><strong>execute(String sql)</strong>：执行任何<strong>SQL</strong>；</li></ul><h2 id="PreparedStatement"><a href="#PreparedStatement" class="headerlink" title="PreparedStatement"></a>PreparedStatement</h2><p>执行<strong>SQL</strong>命令，效率高，可以防止<strong>SQL注入</strong>。</p><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><h4 id="1-SQL语句使用问号占位符"><a href="#1-SQL语句使用问号占位符" class="headerlink" title="1.SQL语句使用问号占位符"></a>1.SQL语句使用问号占位符</h4><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">String sql = <span class="string">"select name, region from country where code=?"</span>;</span><br></pre></td></tr></tbody></table></figure><h4 id="2-调用Connection的prepareStatement方法预编译SQL"><a href="#2-调用Connection的prepareStatement方法预编译SQL" class="headerlink" title="2.调用Connection的prepareStatement方法预编译SQL"></a>2.调用Connection的prepareStatement方法预编译SQL</h4><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">PreparedStatement ppstat = conn.prepareStatement(sql);</span><br></pre></td></tr></tbody></table></figure><h4 id="3-给参数赋值"><a href="#3-给参数赋值" class="headerlink" title="3.给参数赋值"></a>3.给参数赋值</h4><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ppstat.setString(<span class="number">1</span>, <span class="string">"ABW"</span>);</span><br></pre></td></tr></tbody></table></figure><h4 id="4-执行"><a href="#4-执行" class="headerlink" title="4.执行"></a>4.执行</h4><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ResultSet resultSet = ppstat.executeQuery();</span><br></pre></td></tr></tbody></table></figure><h2 id="ResultSet"><a href="#ResultSet" class="headerlink" title="ResultSet"></a>ResultSet</h2><p>返回的<strong>结果集</strong>。</p><ul><li><strong>beforeFirst()</strong>：移动到最前面；</li><li><strong>afterLast()</strong>：移动到最后面；</li><li><strong>next()</strong>：移动到下一个；</li><li><strong>getObject()</strong>：获取元素（不知道类型）；</li><li><strong>absolute(int row)</strong>：移动到指定行；</li></ul><h2 id="数据库连接池"><a href="#数据库连接池" class="headerlink" title="数据库连接池"></a>数据库连接池</h2><h4 id="常用数据库连接池"><a href="#常用数据库连接池" class="headerlink" title="常用数据库连接池"></a>常用数据库连接池</h4><ul><li><strong>DBCP</strong>；</li><li><strong>C3P0</strong>；</li><li><strong>Druid</strong>；</li></ul>]]></content>
    
    
    <summary type="html">Java的JDBC使用。</summary>
    
    
    
    <category term="Java" scheme="https://1.15.86.100/categories/Java/"/>
    
    
    <category term="JDBC" scheme="https://1.15.86.100/tags/JDBC/"/>
    
  </entry>
  
  <entry>
    <title>Java-Stream API</title>
    <link href="https://1.15.86.100/2021/12/01/Java-Stream-API/"/>
    <id>https://1.15.86.100/2021/12/01/Java-Stream-API/</id>
    <published>2021-12-01T08:48:49.000Z</published>
    <updated>2021-12-02T11:19:58.752Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Stream-API"><a href="#Stream-API" class="headerlink" title="Stream API"></a>Stream API</h1><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p><strong>Stream</strong>是面向计算的，在<strong><code>java.util.stream</code></strong>包中；</p><ul><li><strong>Stream</strong>自己不会存储元素；</li><li><strong>Stream</strong>操作是<strong>延迟</strong>执行的，这意味着他们会等到需要结果的时候才执行；</li><li><strong>Stream</strong>不会改变源对象，他们会返回一个持有结果的新<strong>Stream</strong>；</li></ul><h3 id="Stream的实例化"><a href="#Stream的实例化" class="headerlink" title="Stream的实例化"></a>Stream的实例化</h3><h4 id="通过集合"><a href="#通过集合" class="headerlink" title="通过集合"></a>通过集合</h4><p><strong><code>Collection</code></strong>的<strong><code>stream()</code></strong>方法。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">List&lt;Integer&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">Stream&lt;Integer&gt; stream = list.stream();</span><br></pre></td></tr></tbody></table></figure><h4 id="通过数组"><a href="#通过数组" class="headerlink" title="通过数组"></a>通过数组</h4><p>调用<strong><code>Arrays</code></strong>类的<strong><code>stream()</code></strong>方法。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span>[] arr = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">10</span>];</span><br><span class="line">IntStream stream = Arrays.stream(arr);</span><br></pre></td></tr></tbody></table></figure><h4 id="通过Stream"><a href="#通过Stream" class="headerlink" title="通过Stream"></a>通过Stream</h4><p>调用<strong><code>Stream</code></strong>的<strong><code>of()</code></strong>方法。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Stream&lt;? extends Serializable&gt; cuffed = Stream.of(<span class="number">1</span>, <span class="number">2.0</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="string">"hahaha"</span>);</span><br></pre></td></tr></tbody></table></figure><h4 id="创建无限流"><a href="#创建无限流" class="headerlink" title="创建无限流"></a>创建无限流</h4><p><strong><code>Stream</code></strong>的<strong><code>iterate()</code></strong>和<strong><code>generate</code></strong>等函数。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Stream.iterate(<span class="number">0</span>,(t) -&gt; t + <span class="number">2</span>).limit(<span class="number">10</span>).forEach(System.out::println);</span><br><span class="line">Stream.generate(Math::random).limit(<span class="number">10</span>).forEach(System.out::println);</span><br></pre></td></tr></tbody></table></figure><h2 id="中间操作常用方法"><a href="#中间操作常用方法" class="headerlink" title="中间操作常用方法"></a>中间操作常用方法</h2><h3 id="筛选与切片"><a href="#筛选与切片" class="headerlink" title="筛选与切片"></a>筛选与切片</h3><ul><li><strong>filter(Predicate&lt;? super T&gt; predicate)</strong>：从流中<strong>删除</strong>某些<strong>predicate</strong>返回为<strong>false</strong>的元素；</li><li><strong>limit(long maxSize)</strong>：限制元素个数；</li><li><strong>skip(long n)</strong>：跳过<strong>前n</strong>个元素；</li><li><strong>distinct()</strong>：利用<strong><code>hashCode()</code></strong>和<strong><code>equals()</code></strong>进行去重；</li></ul><h3 id="映射"><a href="#映射" class="headerlink" title="映射"></a>映射</h3><ul><li><strong>map(Function&lt;? super T,? extends R&gt; mapper)</strong>：替换元素；</li><li><strong>flatMap(Function&lt;? super T,? extends Stream&lt;? extends R&gt;&gt; mapper)</strong>：把流中的每个值换成另一个流；</li></ul><h3 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h3><ul><li><strong>sorted(Comparator&lt;? super T&gt; comparator)</strong>：排序；</li></ul><h3 id="匹配与查找"><a href="#匹配与查找" class="headerlink" title="匹配与查找"></a>匹配与查找</h3><ul><li><strong>allMatch(Predicate&lt;? super T&gt; predicate)</strong>：全部匹配；</li><li><strong>anyMatch(Predicate&lt;? super T&gt; predicate)</strong>：匹配至少一个；</li><li><strong>noneMatch(Predicate&lt;? super T&gt; predicate)</strong>：全部不匹配；</li></ul><h3 id="统计"><a href="#统计" class="headerlink" title="统计"></a>统计</h3><ul><li><strong>count()</strong>：总数；</li><li><strong>max(Comparator&lt;? super T&gt; comparator)</strong>：最大值；</li><li><strong>min(Comparator&lt;? super T&gt; comparator)</strong>：最小值；</li></ul><h3 id="归约"><a href="#归约" class="headerlink" title="归约"></a>归约</h3><ul><li><strong>reduce(BinaryOperator<t> accumulator)</t></strong>：将流中元素结合起来；</li></ul>]]></content>
    
    
    <summary type="html">Java的Stream API</summary>
    
    
    
    <category term="Java" scheme="https://1.15.86.100/categories/Java/"/>
    
    
    <category term="Stream" scheme="https://1.15.86.100/tags/Stream/"/>
    
  </entry>
  
  <entry>
    <title>Java-反射</title>
    <link href="https://1.15.86.100/2021/11/30/Java-%E5%8F%8D%E5%B0%84/"/>
    <id>https://1.15.86.100/2021/11/30/Java-%E5%8F%8D%E5%B0%84/</id>
    <published>2021-11-30T11:35:28.000Z</published>
    <updated>2021-12-03T08:27:52.907Z</updated>
    
    <content type="html"><![CDATA[<h1 id="反射"><a href="#反射" class="headerlink" title="反射"></a>反射</h1><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p><strong>反射（Reflection）</strong>是被视为<strong>动态语言</strong>的关键，反射机制允许程序在执行期借助于<strong>Reflection API</strong>取得任何类的内部信息，并能直接操作任意对象的内部属性及方法。</p><h2 id="Class"><a href="#Class" class="headerlink" title="Class"></a>Class</h2><p><strong><code>Java.lang.Class</code></strong></p><h3 id="获取Class实例"><a href="#获取Class实例" class="headerlink" title="获取Class实例"></a>获取Class实例</h3><ul><li><p>通过<strong>类属性</strong>：</p>  <figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Class clazz = Person.class;</span><br></pre></td></tr></tbody></table></figure></li><li><p>通过<strong>对象</strong>的<strong><code>getClass()</code></strong>方法：</p>  <figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Person person = <span class="keyword">new</span> Person();</span><br><span class="line">Class clazz = person.getClass();</span><br></pre></td></tr></tbody></table></figure></li><li><p>通过<strong><code>Class.forName()</code></strong>方法：</p>  <figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Class clazz = Class.forName(<span class="string">"com.baowj.reflection.Person"</span>);</span><br></pre></td></tr></tbody></table></figure></li></ul><h3 id="常用方法"><a href="#常用方法" class="headerlink" title="常用方法"></a>常用方法</h3><h4 id="获取属性"><a href="#获取属性" class="headerlink" title="获取属性"></a>获取属性</h4><ul><li><strong>getFields()</strong>：获取当前<strong>运行时类</strong>及其<strong>父类</strong>所有<strong>public</strong>的属性；</li><li><strong>getDeclaredFields()</strong>：获取当前<strong>运行时类</strong>中（不包括<strong>父类</strong>）声明的所有属性；</li></ul><h4 id="获取方法"><a href="#获取方法" class="headerlink" title="获取方法"></a>获取方法</h4><ul><li><strong>getMethods()</strong>：获取当前<strong>运行时类</strong>及其<strong>父类</strong>所有<strong>public</strong>的方法；</li><li><strong>getDeclaredMethods()</strong>：获取当前<strong>运行时类</strong>中（不包括<strong>父类</strong>）声明的所有方法；</li></ul><h4 id="获取构造方法"><a href="#获取构造方法" class="headerlink" title="获取构造方法"></a>获取构造方法</h4><ul><li><strong>getConstructors()</strong>：获取当前<strong>运行时类</strong>及其<strong>父类</strong>所有<strong>public</strong>的构造方法；</li><li><strong>getDeclaredConstructors()</strong>；</li></ul><h4 id="获取父类"><a href="#获取父类" class="headerlink" title="获取父类"></a>获取父类</h4><ul><li><strong>getSuperclass()</strong>：获取<strong>运行时类</strong>的父类；</li><li><strong>getGenericSuperclass()</strong>：获取<strong>运行时类</strong>的带泛型的父类；</li></ul><h4 id="获取类的注解"><a href="#获取类的注解" class="headerlink" title="获取类的注解"></a>获取类的注解</h4><ul><li><strong>getAnnotations()</strong>；</li><li><strong>getDeclaredAnnotations()</strong>；</li></ul><h4 id="newInstance"><a href="#newInstance" class="headerlink" title="newInstance"></a>newInstance</h4><h5 id="声明"><a href="#声明" class="headerlink" title="声明"></a>声明</h5><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> T <span class="title">newInstance</span><span class="params">()</span></span></span><br><span class="line"><span class="function">              <span class="keyword">throws</span> InstantiationException,</span></span><br><span class="line"><span class="function">                     IllegalAccessException</span></span><br></pre></td></tr></tbody></table></figure><h5 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h5><p>调用<strong>运行时类</strong>的<strong>空参构造器</strong>创建对象。</p><h5 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h5><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Class clazz = Person.class;</span><br><span class="line">Object o = clazz.newInstance();</span><br></pre></td></tr></tbody></table></figure><h2 id="Java内存"><a href="#Java内存" class="headerlink" title="Java内存"></a>Java内存</h2><h3 id="堆"><a href="#堆" class="headerlink" title="堆"></a>堆</h3><ul><li>存放创建的<strong>对象</strong>和<strong>数组</strong>；</li><li>可以被<strong>所有的线程共享</strong>，不会存放别的对象引用；</li></ul><h3 id="栈"><a href="#栈" class="headerlink" title="栈"></a>栈</h3><ul><li>存放<strong>基本变量类型</strong>（会包含这个基本类型的具体数值）；</li><li>引用<strong>对象的引用</strong>（会存放这个引用在堆里面的具体地址）；</li></ul><h3 id="方法区"><a href="#方法区" class="headerlink" title="方法区"></a>方法区</h3><ul><li>可以被所有的线程共享；</li><li>包含了所有的<strong>class</strong>和<strong>static</strong>变量；</li><li>代码数据；</li></ul><h2 id="ClassLoader"><a href="#ClassLoader" class="headerlink" title="ClassLoader"></a>ClassLoader</h2><h3 id="类加载过程"><a href="#类加载过程" class="headerlink" title="类加载过程"></a>类加载过程</h3><h4 id="1-类的加载【Load】"><a href="#1-类的加载【Load】" class="headerlink" title="1.类的加载【Load】"></a>1.类的加载【Load】</h4><p>将类的<strong><code>.class</code></strong>文件读入<strong>内存</strong>，将这些静态数据转换成<strong>方法区的运行时数据结构</strong>，并为之创建<strong><code>java.lang.Class</code></strong>对象；</p><h4 id="2-类的链接【Link】"><a href="#2-类的链接【Link】" class="headerlink" title="2.类的链接【Link】"></a>2.类的链接【Link】</h4><p>将类的<strong>二进制数据</strong>合并到<strong>JRE</strong>中；</p><ul><li><strong>验证</strong>：确保加载的类信息符合<strong>JVM</strong>规范，没有安全方面的问题；</li><li><strong>准备</strong>：正式为<strong>类变量（static）</strong>分配内存并设置类变量默认初始值的阶段，这些内存都将在方法区中进行分配；</li><li><strong>解析</strong>：虚拟机常量池内的<strong>符号引用（常量名）</strong>替换为<strong>直接引用（地址）</strong>的过程；</li></ul><h4 id="3-类的初始化【Initialize】"><a href="#3-类的初始化【Initialize】" class="headerlink" title="3.类的初始化【Initialize】"></a>3.类的初始化【Initialize】</h4><p><strong>JVM</strong>对类进行初始化；</p><ul><li>当初始化一个类的时候，如果发现其父类还没有进行初始化，则需要先触发其父类的初始化；</li></ul><h3 id="类的引用"><a href="#类的引用" class="headerlink" title="类的引用"></a>类的引用</h3><h4 id="类的主动引用【一定会发生类的初始化】"><a href="#类的主动引用【一定会发生类的初始化】" class="headerlink" title="类的主动引用【一定会发生类的初始化】"></a>类的主动引用【一定会发生类的初始化】</h4><ul><li>当虚拟机启动，初始化<strong>Main</strong>方法所在的类；</li><li>通过<strong>new</strong>创建一个类的对象；</li><li>调用类的<strong>静态</strong>成员（除了最终常量）和静态方法；</li><li>使用<strong>java.lang.Reflect</strong>包的方法对类进行<strong>反射</strong>调用；</li><li>当初始化一个类，如果其<strong>父类</strong>没有被初始化，则先会初始化它的父类；</li></ul><h4 id="类的被动引用【不会发生类的初始化】"><a href="#类的被动引用【不会发生类的初始化】" class="headerlink" title="类的被动引用【不会发生类的初始化】"></a>类的被动引用【不会发生类的初始化】</h4><ul><li>当访问一个<strong>静态域</strong>时，只有<strong>真正声明这个域的类</strong>才会被初始化（如：当通过子类调用父类的静态变量，不会导致子类初始化）；</li><li>通过数组定义类引用，不会触发此类的初始化；</li><li>引用常量不会触发此类的初始化（常量在链接阶段就在<strong>常量池</strong>中了）；</li></ul><h3 id="类加载器"><a href="#类加载器" class="headerlink" title="类加载器"></a>类加载器</h3><p>Java的<strong>类加载器</strong>，将<strong><code>class</code></strong>文件内容加载到内存中，并将这些<strong>静态数据</strong>转换成<strong>方法区的运行时数据结构</strong>，然后在堆中生成一个代表这个类的<strong><code>java.lang.Class</code></strong>对象，作为方法区中类的访问入口。</p><p><img src="/2021/11/30/Java-%E5%8F%8D%E5%B0%84/blog\blog\data\source\_posts\Java-反射\webp.png" alt="img"></p><ul><li><strong>Bootstrap ClassLoader（启动类加载器）</strong>：用<strong>C++</strong>编写的，是<strong>JVM</strong>自带的类加载器，负责<strong>Java平台核心库</strong>，用来装载<strong>System.getProperty(“sun.boot.class.path”)</strong>所指定的<strong>jar核心类库</strong>，该加载器无法直接获取；</li><li><strong>Extension ClassLoader（扩展类加载器）</strong>：负责<strong>System.getProperty(“java.ext.dirs”)</strong>目录下的<strong>jar包</strong>，或<strong>java -Djava.ext.dirs</strong>指定目录下的<strong>jar</strong>包装入工作库；</li><li><strong>App ClassLoader（自定义加载器）</strong>：它会加载<strong>Classpath</strong>环境变量里定义的路径中的<strong>jar</strong>包和目录。我们自己编写的代码以及使用的<strong>第三方jar包</strong>通常都是由它来加载的。加载<strong>System.getProperty(“java.class.path”)</strong>所指定的<strong>路径或jar包</strong>；</li></ul><h2 id="Method"><a href="#Method" class="headerlink" title="Method"></a>Method</h2><p><strong><code>java.lang.reflect.Field</code></strong></p><h3 id="常用方法-1"><a href="#常用方法-1" class="headerlink" title="常用方法"></a>常用方法</h3><ul><li><strong>invoke()</strong>：调用类的方法；</li><li><strong>setAccessible()</strong>：设置方法可见性；</li><li><strong>getGenericParameterTypes()</strong>：获取方法<strong>泛型</strong>信息；</li></ul><h2 id="Field"><a href="#Field" class="headerlink" title="Field"></a>Field</h2><p><strong><code>java.lang.reflect.Field</code></strong></p><h3 id="常用方法-2"><a href="#常用方法-2" class="headerlink" title="常用方法"></a>常用方法</h3><ul><li><strong>set()</strong>：设置变量值；</li><li><strong>get()</strong>：获取变量值；</li></ul>]]></content>
    
    
    <summary type="html">Java的反射机制。</summary>
    
    
    
    <category term="Java" scheme="https://1.15.86.100/categories/Java/"/>
    
    
    <category term="反射" scheme="https://1.15.86.100/tags/%E5%8F%8D%E5%B0%84/"/>
    
  </entry>
  
  <entry>
    <title>Java-网络编程</title>
    <link href="https://1.15.86.100/2021/11/30/Java-%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/"/>
    <id>https://1.15.86.100/2021/11/30/Java-%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/</id>
    <published>2021-11-30T08:21:17.000Z</published>
    <updated>2021-12-02T12:38:43.709Z</updated>
    
    <content type="html"><![CDATA[<h1 id="网络编程"><a href="#网络编程" class="headerlink" title="网络编程"></a>网络编程</h1><h2 id="常用类"><a href="#常用类" class="headerlink" title="常用类"></a>常用类</h2><h3 id="InetAddress"><a href="#InetAddress" class="headerlink" title="InetAddress"></a>InetAddress</h3><p>获取<strong>IP地址</strong>。</p><h4 id="常用方法"><a href="#常用方法" class="headerlink" title="常用方法"></a>常用方法</h4><ul><li><strong>getLocalHost()</strong>：获取本地IP；</li><li><strong>getByName(String host)</strong>：通过网址获取IP；</li></ul><h2 id="URL网络编程"><a href="#URL网络编程" class="headerlink" title="URL网络编程"></a>URL网络编程</h2><h4 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h4><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">    HttpURLConnection urlConnection = <span class="keyword">null</span>;</span><br><span class="line">    FileOutputStream fos = <span class="keyword">null</span>;</span><br><span class="line">    InputStream is = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">try</span> {</span><br><span class="line">        URL url = <span class="keyword">new</span> URL(<span class="string">"https://www.hust.edu.cn/images/weixintupian_20211126135639.jpg"</span>);</span><br><span class="line">        urlConnection = (HttpURLConnection) url.openConnection();</span><br><span class="line">        urlConnection.connect();</span><br><span class="line">        is = urlConnection.getInputStream();</span><br><span class="line">        fos = <span class="keyword">new</span> FileOutputStream(<span class="string">"test.jpg"</span>);</span><br><span class="line">        <span class="keyword">byte</span>[] buffer = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">        <span class="keyword">int</span> len;</span><br><span class="line">        <span class="keyword">while</span> ((len = is.read(buffer)) != -<span class="number">1</span>) {</span><br><span class="line">            fos.write(buffer, <span class="number">0</span>, len);</span><br><span class="line">        }</span><br><span class="line">    } <span class="keyword">catch</span> (MalformedURLException e) {</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    } <span class="keyword">catch</span> (IOException e) {</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    } <span class="keyword">finally</span> {</span><br><span class="line">        <span class="keyword">if</span> (is != <span class="keyword">null</span>) {</span><br><span class="line">            <span class="keyword">try</span> {</span><br><span class="line">                is.close();</span><br><span class="line">            } <span class="keyword">catch</span> (IOException e) {</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">if</span> (fos != <span class="keyword">null</span>) {</span><br><span class="line">            <span class="keyword">try</span> {</span><br><span class="line">                fos.close();</span><br><span class="line">            } <span class="keyword">catch</span> (IOException e) {</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            }</span><br><span class="line">        } <span class="keyword">if</span> (urlConnection != <span class="keyword">null</span>) {</span><br><span class="line">            urlConnection.disconnect();</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="TCP连接"><a href="#TCP连接" class="headerlink" title="TCP连接"></a>TCP连接</h2><h3 id="客户端"><a href="#客户端" class="headerlink" title="客户端"></a>客户端</h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TCPClientDemo</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        Socket socket = <span class="keyword">null</span>;</span><br><span class="line">        OutputStream os = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> {</span><br><span class="line">            InetAddress serverIP = InetAddress.getLocalHost();</span><br><span class="line">            <span class="keyword">int</span> port = <span class="number">9999</span>;</span><br><span class="line">            <span class="comment">// 创建连接</span></span><br><span class="line">            socket = <span class="keyword">new</span> Socket(serverIP, port);</span><br><span class="line">            os = socket.getOutputStream();</span><br><span class="line">            os.write(<span class="string">"Hello Server"</span>.getBytes());</span><br><span class="line"></span><br><span class="line">        } <span class="keyword">catch</span> (UnknownHostException e) {</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        } <span class="keyword">catch</span> (IOException e) {</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        } <span class="keyword">finally</span> {</span><br><span class="line">            <span class="keyword">if</span> (socket != <span class="keyword">null</span>) {</span><br><span class="line">                <span class="keyword">try</span> {</span><br><span class="line">                    socket.close();</span><br><span class="line">                } <span class="keyword">catch</span> (IOException e) {</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">            <span class="keyword">if</span> (os != <span class="keyword">null</span>) {</span><br><span class="line">                <span class="keyword">try</span> {</span><br><span class="line">                    os.close();</span><br><span class="line">                } <span class="keyword">catch</span> (IOException e) {</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="服务器"><a href="#服务器" class="headerlink" title="服务器"></a>服务器</h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TCPServerDemo</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        ServerSocket serverSocket = <span class="keyword">null</span>;</span><br><span class="line">        Socket socket = <span class="keyword">null</span>;</span><br><span class="line">        InputStream is = <span class="keyword">null</span>;</span><br><span class="line">        ByteArrayOutputStream baos = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> {</span><br><span class="line">            serverSocket = <span class="keyword">new</span> ServerSocket(<span class="number">9999</span>);</span><br><span class="line">            socket = serverSocket.accept();</span><br><span class="line">            is = socket.getInputStream();</span><br><span class="line">            baos = <span class="keyword">new</span> ByteArrayOutputStream();</span><br><span class="line">            <span class="keyword">byte</span>[] buffer = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">            <span class="keyword">int</span> len;</span><br><span class="line">            <span class="keyword">while</span> ((len = is.read(buffer)) != -<span class="number">1</span>) {</span><br><span class="line">                baos.write(buffer, <span class="number">0</span>, len);</span><br><span class="line">            }</span><br><span class="line">            System.out.println(baos.toString());</span><br><span class="line">        } <span class="keyword">catch</span> (IOException e) {</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        } <span class="keyword">finally</span> {</span><br><span class="line">            <span class="keyword">if</span> (serverSocket != <span class="keyword">null</span>) {</span><br><span class="line">                <span class="keyword">try</span> {</span><br><span class="line">                    serverSocket.close();</span><br><span class="line">                } <span class="keyword">catch</span> (IOException e) {</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">            <span class="keyword">if</span> (socket != <span class="keyword">null</span>) {</span><br><span class="line">                <span class="keyword">try</span> {</span><br><span class="line">                    socket.close();</span><br><span class="line">                } <span class="keyword">catch</span> (IOException e) {</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">            <span class="keyword">if</span> (is != <span class="keyword">null</span>) {</span><br><span class="line">                <span class="keyword">try</span> {</span><br><span class="line">                    is.close();</span><br><span class="line">                } <span class="keyword">catch</span> (IOException e) {</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">            <span class="keyword">if</span> (baos != <span class="keyword">null</span>) {</span><br><span class="line">                <span class="keyword">try</span> {</span><br><span class="line">                    baos.close();</span><br><span class="line">                } <span class="keyword">catch</span> (IOException e) {</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>]]></content>
    
    
    <summary type="html">Java网络编程简介。</summary>
    
    
    
    <category term="Java" scheme="https://1.15.86.100/categories/Java/"/>
    
    
    <category term="网络" scheme="https://1.15.86.100/tags/%E7%BD%91%E7%BB%9C/"/>
    
  </entry>
  
  <entry>
    <title>Java-流</title>
    <link href="https://1.15.86.100/2021/11/29/Java-%E6%B5%81/"/>
    <id>https://1.15.86.100/2021/11/29/Java-%E6%B5%81/</id>
    <published>2021-11-29T02:40:35.000Z</published>
    <updated>2021-11-30T07:59:50.259Z</updated>
    
    <content type="html"><![CDATA[<h1 id="IO流"><a href="#IO流" class="headerlink" title="IO流"></a>IO流</h1><h2 id="File类"><a href="#File类" class="headerlink" title="File类"></a>File类</h2><p><strong>File类</strong>不涉及<strong>文件内容</strong>的==读取写入==操作，这些操作需要使用==IO流==进行。</p><h3 id="声明"><a href="#声明" class="headerlink" title="声明"></a>声明</h3><p><code>java.io.File</code></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">File</span></span></span><br><span class="line"><span class="class"><span class="keyword">extends</span> <span class="title">Object</span></span></span><br><span class="line"><span class="class"><span class="keyword">implements</span> <span class="title">Serializable</span>, <span class="title">Comparable</span>&lt;<span class="title">File</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h3 id="常用方法"><a href="#常用方法" class="headerlink" title="常用方法"></a>常用方法</h3><ul><li>==<strong>File(String pathname)</strong>==：构造方法；</li><li><strong>length()</strong>：获取文件大小；</li><li><strong>getParentFile()</strong>：获取文件<strong>父目录</strong>；</li><li><strong>String[]  list()</strong>：获取<strong>目录</strong>下面所有<strong>文件</strong>和<strong>文件夹</strong>；</li><li><strong>File[]  listFiles()</strong>：获取<strong>目录</strong>下面所有<strong>文件</strong>和<strong>文件夹</strong>；</li><li><strong>renameTo(File dest)</strong>：修改文件名；</li><li><strong>isDirectory()</strong>：判断是否是目录；</li><li><strong>delete()</strong>：删除文件；</li><li>==<strong>exists()</strong>==：判断文件是否存在；</li><li><strong>createNewFile()</strong>：创建文件；</li><li><strong>mkdir()</strong>：创建目录；</li></ul><h2 id="RandomAccessFile类"><a href="#RandomAccessFile类" class="headerlink" title="RandomAccessFile类"></a>RandomAccessFile类</h2><p>可以实现文件的随机访问。</p><h4 id="声明-1"><a href="#声明-1" class="headerlink" title="声明"></a>声明</h4><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RandomAccessFile</span></span></span><br><span class="line"><span class="class"><span class="keyword">extends</span> <span class="title">Object</span></span></span><br><span class="line"><span class="class"><span class="keyword">implements</span> <span class="title">DataOutput</span>, <span class="title">DataInput</span>, <span class="title">Closeable</span></span></span><br></pre></td></tr></tbody></table></figure><h4 id="常用方法-1"><a href="#常用方法-1" class="headerlink" title="常用方法"></a>常用方法</h4><ul><li><strong>seek()</strong>；</li></ul><h2 id="流的分类"><a href="#流的分类" class="headerlink" title="流的分类"></a>流的分类</h2><p><img src="/Java-流/stream.jpg" alt=""></p><h4 id="数据单位"><a href="#数据单位" class="headerlink" title="数据单位"></a>数据单位</h4><ul><li><strong>字节流（8 bit）</strong>：<em>InputStream</em>，<em>OutputStream</em>；</li><li><strong>字符流（16 bit）</strong>；<em>Reader</em>，<em>Writer</em>；</li></ul><h4 id="流向"><a href="#流向" class="headerlink" title="流向"></a>流向</h4><ul><li><strong>输入流</strong>：<em>InputStream</em>，<em>Reader</em>；</li><li><strong>输出流</strong>：<em>OutputStream</em>，<em>Writer</em>；</li></ul><h4 id="角色"><a href="#角色" class="headerlink" title="角色"></a>角色</h4><ul><li><strong>节点流</strong>；</li><li><strong>处理流</strong>；</li></ul><h2 id="缓冲流"><a href="#缓冲流" class="headerlink" title="缓冲流"></a>缓冲流</h2><p>带<strong>缓冲</strong>的文件输入流。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span> <span class="keyword">throws</span> FileNotFoundException </span>{</span><br><span class="line">    File file1 = <span class="keyword">new</span> File(<span class="string">""</span>);</span><br><span class="line">    File file2 = <span class="keyword">new</span> File(<span class="string">""</span>);</span><br><span class="line"></span><br><span class="line">    FileInputStream fis = <span class="keyword">new</span> FileInputStream(file1);</span><br><span class="line">    FileOutputStream fos = <span class="keyword">new</span> FileOutputStream(file2);</span><br><span class="line"></span><br><span class="line">    BufferedInputStream bis = <span class="keyword">new</span> BufferedInputStream(fis);</span><br><span class="line">    BufferedOutputStream bos = <span class="keyword">new</span> BufferedOutputStream(fos);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="转换流"><a href="#转换流" class="headerlink" title="转换流"></a>转换流</h2><h4 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h4><p>属于<strong>字符流</strong>，提供<strong>字节流</strong>和<strong>字符流</strong>之间的转换。</p><ul><li><strong>InputStreamReader</strong>：<strong>字节</strong>输入流 <span class="github-emoji"><span>➡</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/27a1.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <strong>字符</strong>输入流；</li><li><strong>OutputStreamWriter</strong>：<strong>字符</strong>输出流 <span class="github-emoji"><span>➡</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/27a1.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <strong>字节</strong>输出流；</li></ul><h4 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h4><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span> <span class="keyword">throws</span> FileNotFoundException </span>{</span><br><span class="line">    File file1 = <span class="keyword">new</span> File(<span class="string">""</span>);</span><br><span class="line">    File file2 = <span class="keyword">new</span> File(<span class="string">""</span>);</span><br><span class="line"></span><br><span class="line">    FileInputStream fis = <span class="keyword">new</span> FileInputStream(file1);</span><br><span class="line">    FileOutputStream fos = <span class="keyword">new</span> FileOutputStream(file2);</span><br><span class="line"></span><br><span class="line">    InputStreamReader isr = <span class="keyword">new</span> InputStreamReader(fis);</span><br><span class="line">    OutputStreamWriter osw = <span class="keyword">new</span> OutputStreamWriter(fos);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="标准输入、输出流"><a href="#标准输入、输出流" class="headerlink" title="标准输入、输出流"></a>标准输入、输出流</h2><h4 id="常量"><a href="#常量" class="headerlink" title="常量"></a>常量</h4><ul><li><strong>System.in</strong>：标准输入流【默认从键盘】；</li><li><strong>System.out</strong>：标准输出流【默认控制台】；</li><li><strong>System.err</strong>：标准错误输出流；</li></ul><h4 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h4><ul><li><strong>System.setIn()</strong>：设置<strong>标准输入流</strong>；</li><li><strong>System.setOut()</strong>：设置<strong>标准输出流</strong>；</li></ul><h2 id="打印流"><a href="#打印流" class="headerlink" title="打印流"></a>打印流</h2><h4 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h4><p>将<strong>基本数据类型</strong>的数据格式转化为<strong>字符串</strong>输出。</p><h4 id="基本类"><a href="#基本类" class="headerlink" title="基本类"></a>基本类</h4><ul><li><strong>PrintStream</strong>；</li><li><strong>PrintWriter</strong>；</li></ul><h4 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h4><p><code>自定义标准输出流</code></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test3</span><span class="params">()</span> </span>{</span><br><span class="line">    PrintStream ps = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">try</span> {</span><br><span class="line">        FileOutputStream fos = <span class="keyword">new</span> FileOutputStream(<span class="keyword">new</span> File(<span class="string">"test.txt"</span>));</span><br><span class="line">        ps = <span class="keyword">new</span> PrintStream(fos, <span class="keyword">true</span>);</span><br><span class="line">        <span class="keyword">if</span> (ps != <span class="keyword">null</span>) {</span><br><span class="line">            System.setOut(ps);</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">256</span>; i++) {</span><br><span class="line">                System.out.print((<span class="keyword">char</span>) i);</span><br><span class="line">                <span class="keyword">if</span> (i % <span class="number">50</span> == <span class="number">0</span>) {</span><br><span class="line">                    System.out.println();</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    } <span class="keyword">catch</span> (IOException e) {</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    } <span class="keyword">finally</span> {</span><br><span class="line">        <span class="keyword">if</span> (ps != <span class="keyword">null</span>) {</span><br><span class="line">            ps.close();</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="数据流"><a href="#数据流" class="headerlink" title="数据流"></a>数据流</h2><h4 id="功能-1"><a href="#功能-1" class="headerlink" title="功能"></a>功能</h4><p>操作Java<strong>基本数据类型</strong>和<strong>String</strong>的数据。</p><h4 id="基本类-1"><a href="#基本类-1" class="headerlink" title="基本类"></a>基本类</h4><ul><li><strong>DataInputStream</strong>；</li><li><strong>DataOutputStream</strong>；</li></ul><h2 id="对象流"><a href="#对象流" class="headerlink" title="对象流"></a>对象流</h2><h4 id="功能-2"><a href="#功能-2" class="headerlink" title="功能"></a>功能</h4><p>存储和读取<strong>基本数据类型</strong>和<strong>对象</strong>的处理流。</p><h4 id="基本类-2"><a href="#基本类-2" class="headerlink" title="基本类"></a>基本类</h4><ul><li><p><strong>ObjectInputStream</strong>：<strong>反序列化</strong>过程；</p></li><li><p><strong>ObjectOutputStream</strong>：<strong>序列化</strong>过程；</p></li></ul><p>这两个类不能序列化<strong>static</strong>和<strong>transient</strong>修饰的数据。</p><h4 id="序列化要求"><a href="#序列化要求" class="headerlink" title="序列化要求"></a>序列化要求</h4><ul><li><p>实现<strong>Serializable</strong>接口；</p></li><li><p>定义静态常量<strong>serialVersionUID</strong>；</p>  <figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">422423432L</span>;</span><br></pre></td></tr></tbody></table></figure></li></ul>]]></content>
    
    
    <summary type="html">关于Java文件读写与流。</summary>
    
    
    
    <category term="Java" scheme="https://1.15.86.100/categories/Java/"/>
    
    
    <category term="File" scheme="https://1.15.86.100/tags/File/"/>
    
  </entry>
  
  <entry>
    <title>Java-Collections</title>
    <link href="https://1.15.86.100/2021/11/28/Java-Collections/"/>
    <id>https://1.15.86.100/2021/11/28/Java-Collections/</id>
    <published>2021-11-28T12:53:14.000Z</published>
    <updated>2021-11-28T13:07:17.546Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Collections"><a href="#Collections" class="headerlink" title="Collections"></a>Collections</h1><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p><strong>java.utils.Collections</strong>是操作<strong>Set、List、Map</strong>等<strong>集合</strong>的工具类。</p><h2 id="常用方法"><a href="#常用方法" class="headerlink" title="常用方法"></a>常用方法</h2><h3 id="reverse"><a href="#reverse" class="headerlink" title="reverse"></a>reverse</h3><p>翻转<strong>List</strong>。</p><h3 id="shuffle"><a href="#shuffle" class="headerlink" title="shuffle"></a>shuffle</h3><p>打乱<strong>List</strong>。</p><h3 id="swap"><a href="#swap" class="headerlink" title="swap"></a>swap</h3><p>交换<strong>List</strong>两个元素。</p><h3 id="synchronized"><a href="#synchronized" class="headerlink" title="synchronized[]"></a>synchronized[]</h3><ul><li><strong>synchronizedList</strong>；</li><li><strong>synchronizedMap</strong>；</li><li><strong>synchronizedSet</strong>；</li></ul><p>返回<strong>线程安全</strong>的对象。</p>]]></content>
    
    
    <summary type="html">Java的Collections工具类简介。</summary>
    
    
    
    <category term="Java" scheme="https://1.15.86.100/categories/Java/"/>
    
    
    <category term="Collections" scheme="https://1.15.86.100/tags/Collections/"/>
    
  </entry>
  
  <entry>
    <title>Java-Map</title>
    <link href="https://1.15.86.100/2021/11/28/Java-Map/"/>
    <id>https://1.15.86.100/2021/11/28/Java-Map/</id>
    <published>2021-11-28T10:51:24.000Z</published>
    <updated>2021-11-28T12:47:18.745Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Map"><a href="#Map" class="headerlink" title="Map"></a>Map</h1><h3 id="继承图"><a href="#继承图" class="headerlink" title="继承图"></a>继承图</h3><p><img src="/Java-Map/map.png" alt=""></p><h2 id="常用方法"><a href="#常用方法" class="headerlink" title="常用方法"></a>常用方法</h2><h3 id="keySet"><a href="#keySet" class="headerlink" title="keySet"></a>keySet</h3><h4 id="声明"><a href="#声明" class="headerlink" title="声明"></a>声明</h4><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">Set&lt;K&gt; <span class="title">keySet</span><span class="params">()</span></span>;</span><br></pre></td></tr></tbody></table></figure><h4 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h4><p>返回<strong>key</strong>的<strong>集合</strong>；</p><h3 id="values"><a href="#values" class="headerlink" title="values"></a>values</h3><h4 id="声明-1"><a href="#声明-1" class="headerlink" title="声明"></a>声明</h4><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">Collection&lt;V&gt; <span class="title">values</span><span class="params">()</span></span>;</span><br></pre></td></tr></tbody></table></figure><h4 id="功能-1"><a href="#功能-1" class="headerlink" title="功能"></a>功能</h4><p>返回<strong>value</strong>的<strong>集合</strong>；</p><h3 id="entrySet"><a href="#entrySet" class="headerlink" title="entrySet"></a>entrySet</h3><h4 id="声明-2"><a href="#声明-2" class="headerlink" title="声明"></a>声明</h4><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Set&lt;Map.Entry&lt;K, V&gt;&gt; entrySet();</span><br></pre></td></tr></tbody></table></figure><h4 id="功能-2"><a href="#功能-2" class="headerlink" title="功能"></a>功能</h4><p>返回<strong>key-value</strong>的<strong>集合</strong>；</p><h2 id="主要实现类"><a href="#主要实现类" class="headerlink" title="主要实现类"></a>主要实现类</h2><h3 id="HashMap"><a href="#HashMap" class="headerlink" title="HashMap"></a>HashMap</h3><h4 id="声明-3"><a href="#声明-3" class="headerlink" title="声明"></a>声明</h4><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HashMap</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; <span class="keyword">extends</span> <span class="title">AbstractMap</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt;</span></span><br><span class="line"><span class="class">    <span class="keyword">implements</span> <span class="title">Map</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt;, <span class="title">Cloneable</span>, <span class="title">Serializable</span></span>{}</span><br></pre></td></tr></tbody></table></figure><h4 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h4><ul><li>线程不安全；</li><li>可以存储<strong>null</strong>的<strong>key</strong>和<strong>value</strong>；</li><li>底层是<strong>数组+链表+红黑树</strong>；</li></ul><h4 id="put"><a href="#put" class="headerlink" title="put"></a>put</h4><ul><li><p>放入<strong>key-value</strong>；</p></li><li><p>先调用<strong>key.hashCode()</strong>获取<strong>哈希值</strong>；</p></li><li>利用<strong>哈希值</strong>计算在<strong>table（Node<k,v>类型）</k,v></strong>数组中的存储位置；<ul><li>如果该位置为空；</li><li>如果该位置<strong>不为空</strong>：<ul><li>如果<strong>key</strong>的<strong>哈希值</strong>和某个数据的<strong>哈希值</strong>一样，继续调用<strong>equals()</strong>方法比较；<ul><li>如果返回<strong>true</strong>：替换<strong>value</strong>；</li><li>如果返回<strong>false</strong>：添加成功；</li></ul></li><li>否则，如果该位置数据为<strong>tree</strong>：<ul><li>向<strong>tree</strong>中添加元素<strong>key-value</strong>；</li></ul></li><li>否则，依次判断<strong>链表</strong>每个结点的<strong>哈希值</strong>和<strong>equals()</strong>是不是等于<strong>key</strong>：<ul><li>如果不存在则<strong>创建新的节点</strong>：<ul><li>如果<strong>链表</strong>节点<strong>总数</strong>超过8个，则将<strong>链表</strong>转成<strong>红黑树</strong>；</li></ul></li><li>如果存在，则替换<strong>value</strong>；</li></ul></li></ul></li></ul></li></ul><h3 id="LinkedHashMap"><a href="#LinkedHashMap" class="headerlink" title="LinkedHashMap"></a>LinkedHashMap</h3><h4 id="特点-1"><a href="#特点-1" class="headerlink" title="特点"></a>特点</h4><ul><li>继承自<strong>HashMap</strong>；</li><li>可以按照<strong>添加顺序</strong>进行遍历【添加了指针】；</li></ul><h4 id="声明-4"><a href="#声明-4" class="headerlink" title="声明"></a>声明</h4><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LinkedHashMap</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt;</span></span><br><span class="line"><span class="class">    <span class="keyword">extends</span> <span class="title">HashMap</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt;</span></span><br><span class="line"><span class="class">    <span class="keyword">implements</span> <span class="title">Map</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt;</span>{}</span><br></pre></td></tr></tbody></table></figure><h3 id="TreeMap"><a href="#TreeMap" class="headerlink" title="TreeMap"></a>TreeMap</h3><h4 id="特点-2"><a href="#特点-2" class="headerlink" title="特点"></a>特点</h4><ul><li>底层是<strong>红黑树</strong>；</li><li>需要实现<strong>排序</strong>；</li></ul><h3 id="Hashtable"><a href="#Hashtable" class="headerlink" title="Hashtable"></a>Hashtable</h3><h4 id="特点-3"><a href="#特点-3" class="headerlink" title="特点"></a>特点</h4><ul><li>线程安全，效率不高；</li><li>不能存储<strong>null</strong>；</li></ul><h3 id="Properties"><a href="#Properties" class="headerlink" title="Properties"></a>Properties</h3><h4 id="特点-4"><a href="#特点-4" class="headerlink" title="特点"></a>特点</h4><ul><li>继承自<strong>Hashtable</strong>；</li><li>常用来处理配置文件；</li><li><strong>key</strong>和<strong>value</strong>都必须是<strong>String</strong>；</li></ul><h4 id="加载properties文件"><a href="#加载properties文件" class="headerlink" title="加载properties文件"></a>加载properties文件</h4><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>{</span><br><span class="line">    Properties properties = <span class="keyword">new</span> Properties();</span><br><span class="line">    FileInputStream fis = <span class="keyword">new</span> FileInputStream(<span class="string">"jdbc.properties"</span>);</span><br><span class="line">    properties.load(fis);</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>]]></content>
    
    
    <summary type="html">对Java的Map接口及其实现的介绍。</summary>
    
    
    
    <category term="Java" scheme="https://1.15.86.100/categories/Java/"/>
    
    
    <category term="Map" scheme="https://1.15.86.100/tags/Map/"/>
    
  </entry>
  
  <entry>
    <title>Java-锁</title>
    <link href="https://1.15.86.100/2021/11/26/Java-%E9%94%81/"/>
    <id>https://1.15.86.100/2021/11/26/Java-%E9%94%81/</id>
    <published>2021-11-26T08:47:56.000Z</published>
    <updated>2021-11-26T09:10:17.255Z</updated>
    
    <content type="html"><![CDATA[<h1 id="锁"><a href="#锁" class="headerlink" title="锁"></a>锁</h1><h2 id="公平锁、非公平锁"><a href="#公平锁、非公平锁" class="headerlink" title="公平锁、非公平锁"></a>公平锁、非公平锁</h2><ul><li><p><strong>公平锁</strong>：公平分配资源，不允许插队，严格先来后到；</p></li><li><p><strong>非公平锁</strong>：可以插队【默认】；</p>  <figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ReentrantLock</span><span class="params">()</span> </span>{</span><br><span class="line">    sync = <span class="keyword">new</span> NonfairSync();</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ReentrantLock</span><span class="params">(<span class="keyword">boolean</span> fair)</span> </span>{</span><br><span class="line">    sync = fair ? <span class="keyword">new</span> FairSync() : <span class="keyword">new</span> NonfairSync();</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li></ul><h2 id="可重入锁"><a href="#可重入锁" class="headerlink" title="可重入锁"></a>可重入锁</h2><p>可以<strong>重复获取</strong>同一个锁而<strong>不会出现死锁</strong>（例如，<strong>synchronized</strong>代码块的<strong>嵌套</strong>）。</p><h2 id="自旋锁"><a href="#自旋锁" class="headerlink" title="自旋锁"></a>自旋锁</h2><p>不断尝试直到成功。</p><blockquote><p><strong>例如：</strong></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&gt;<span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">getAndSetInt</span><span class="params">(Object var1, <span class="keyword">long</span> var2, <span class="keyword">int</span> var4)</span> </span>{</span><br><span class="line">   <span class="keyword">int</span> var5;</span><br><span class="line">   <span class="keyword">do</span> {</span><br><span class="line">       var5 = <span class="keyword">this</span>.getIntVolatile(var1, var2);</span><br><span class="line">   } <span class="keyword">while</span>(!<span class="keyword">this</span>.compareAndSwapInt(var1, var2, var5, var4));</span><br><span class="line"></span><br><span class="line">   <span class="keyword">return</span> var5;</span><br><span class="line">&gt;}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure></blockquote><h2 id="读写锁"><a href="#读写锁" class="headerlink" title="读写锁"></a>读写锁</h2><h2 id="死锁"><a href="#死锁" class="headerlink" title="死锁"></a>死锁</h2><h2 id="乐观锁"><a href="#乐观锁" class="headerlink" title="乐观锁"></a>乐观锁</h2><p>认为数据一般情况下不会造成冲突，所以在数据进行提交更新的时候，才会正式对数据的冲突与否进行检测。</p><h2 id="悲观锁"><a href="#悲观锁" class="headerlink" title="悲观锁"></a>悲观锁</h2><p>以一种预防的姿态在修改数据之前把数据锁住，然后再对数据进行读写，在它释放锁之前任何人都不能对其数据进行操作，直到前面一个人把锁释放后下一个人数据加锁才可对数据进行加锁，然后才可以对数据进行操作。</p>]]></content>
    
    
    <summary type="html">Java各种锁的总结。</summary>
    
    
    
    <category term="Java" scheme="https://1.15.86.100/categories/Java/"/>
    
    
    <category term="锁" scheme="https://1.15.86.100/tags/%E9%94%81/"/>
    
  </entry>
  
  <entry>
    <title>Java-函数式接口</title>
    <link href="https://1.15.86.100/2021/11/25/Java-%E5%87%BD%E6%95%B0%E5%BC%8F%E6%8E%A5%E5%8F%A3/"/>
    <id>https://1.15.86.100/2021/11/25/Java-%E5%87%BD%E6%95%B0%E5%BC%8F%E6%8E%A5%E5%8F%A3/</id>
    <published>2021-11-25T08:08:05.000Z</published>
    <updated>2021-11-25T08:27:17.575Z</updated>
    
    <content type="html"><![CDATA[<h1 id="函数式接口"><a href="#函数式接口" class="headerlink" title="函数式接口"></a>函数式接口</h1><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p><strong>函数式接口(Functional Interface)</strong>就是一个有且<strong>仅有一个抽象方法</strong>，但是可以有多个非抽象方法的接口。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@FunctionalInterface</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">GreetingService</span> </span></span><br><span class="line"><span class="class"></span>{</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">sayMessage</span><span class="params">(String message)</span></span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="四大函数式接口"><a href="#四大函数式接口" class="headerlink" title="四大函数式接口"></a>四大函数式接口</h2><h3 id="Function"><a href="#Function" class="headerlink" title="Function"></a>Function</h3><p>函数式接口，输入一个对象，输出一个对象。</p><h4 id="声明"><a href="#声明" class="headerlink" title="声明"></a>声明</h4><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@FunctionalInterface</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Function</span>&lt;<span class="title">T</span>,<span class="title">R</span>&gt;</span>{</span><br><span class="line">    <span class="function">R <span class="title">apply</span><span class="params">(T t)</span></span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h4 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h4><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">    Function function = (str)-&gt;{<span class="keyword">return</span> str;};</span><br><span class="line">    System.out.println(function.apply(<span class="string">"efgref"</span>));</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="Predicate"><a href="#Predicate" class="headerlink" title="Predicate"></a>Predicate</h3><p><strong>断定型</strong>接口，输入一个对象，返回判定结果。</p><h4 id="声明-1"><a href="#声明-1" class="headerlink" title="声明"></a>声明</h4><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@FunctionalInterface</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Predicate</span>&lt;<span class="title">T</span>&gt;</span>{</span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">test</span><span class="params">(T t)</span></span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h4 id="示例-1"><a href="#示例-1" class="headerlink" title="示例"></a>示例</h4><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">    Predicate&lt;String&gt; predicate = (str) -&gt; {<span class="keyword">return</span> str.length() &gt; <span class="number">10</span>;};</span><br><span class="line">    System.out.println(predicate.test(<span class="string">"fgervrvtrvrvcdcdc"</span>));</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="Supplier"><a href="#Supplier" class="headerlink" title="Supplier"></a>Supplier</h3><p><strong>生产型</strong>接口，<strong>只有输出没有输入</strong>。</p><h4 id="声明-2"><a href="#声明-2" class="headerlink" title="声明"></a>声明</h4><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@FunctionalInterface</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Supplier</span>&lt;<span class="title">T</span>&gt; </span>{</span><br><span class="line">    <span class="function">T <span class="title">get</span><span class="params">()</span></span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h4 id="示例-2"><a href="#示例-2" class="headerlink" title="示例"></a>示例</h4><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">    Supplier&lt;String&gt; supplier= () -&gt; {<span class="keyword">return</span> <span class="string">"fdfvdfvfg"</span>;};</span><br><span class="line">    System.out.println(supplier.get());</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="Consumer"><a href="#Consumer" class="headerlink" title="Consumer"></a>Consumer</h3><p><strong>消费型</strong>接口，只有输入没有输出。</p><h4 id="声明-3"><a href="#声明-3" class="headerlink" title="声明"></a>声明</h4><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@FunctionalInterface</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Consumer</span>&lt;<span class="title">T</span>&gt;</span>{</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">accept</span><span class="params">(T t)</span></span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h4 id="示例-3"><a href="#示例-3" class="headerlink" title="示例"></a>示例</h4><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">    Consumer&lt;String&gt; consumer = (str) -&gt; {</span><br><span class="line">        System.out.println(str);</span><br><span class="line">    };</span><br><span class="line">    consumer.accept(<span class="string">"gefervtrv"</span>);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>]]></content>
    
    
    <summary type="html">Java函数式接口简介。</summary>
    
    
    
    <category term="Java" scheme="https://1.15.86.100/categories/Java/"/>
    
    
    <category term="函数式接口" scheme="https://1.15.86.100/tags/%E5%87%BD%E6%95%B0%E5%BC%8F%E6%8E%A5%E5%8F%A3/"/>
    
  </entry>
  
  <entry>
    <title>Java-Collection</title>
    <link href="https://1.15.86.100/2021/11/16/Java-Collection/"/>
    <id>https://1.15.86.100/2021/11/16/Java-Collection/</id>
    <published>2021-11-16T09:08:09.000Z</published>
    <updated>2021-11-24T02:50:17.940Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Collection"><a href="#Collection" class="headerlink" title="Collection"></a>Collection</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><h3 id="源码声明"><a href="#源码声明" class="headerlink" title="源码声明"></a>源码声明</h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Collection</span>&lt;<span class="title">E</span>&gt;</span></span><br><span class="line"><span class="class"><span class="keyword">extends</span> <span class="title">Iterable</span>&lt;<span class="title">E</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h3 id="Collection的继承关系"><a href="#Collection的继承关系" class="headerlink" title="Collection的继承关系"></a>Collection的继承关系</h3><p><img src="/2021/11/16/Java-Collection/1362965-20190118094735724-2129767713.png" alt="img"></p><h2 id="主要方法"><a href="#主要方法" class="headerlink" title="主要方法"></a>主要方法</h2><h3 id="contains"><a href="#contains" class="headerlink" title="contains"></a>contains</h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">contains</span><span class="params">(Object o)</span></span></span><br></pre></td></tr></tbody></table></figure><h4 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h4><p>返回<strong>Collection</strong>中是否存在<strong>o</strong>；</p><h4 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h4><ul><li>判断是否相等时调用<strong>equals</strong>方法【<strong>(o\=\=null ? e\=\=null : o.equals(e))</strong>】；</li><li>如果没有重写<strong>equals</strong>方法，会直接用<strong>==</strong>判断；</li></ul><h3 id="remove"><a href="#remove" class="headerlink" title="remove"></a>remove</h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">remove</span><span class="params">(Object o)</span></span></span><br></pre></td></tr></tbody></table></figure><h4 id="功能-1"><a href="#功能-1" class="headerlink" title="功能"></a>功能</h4><p>删除等于元素<strong>o</strong>的元素【<strong>不一定</strong>地址一样】；</p><h4 id="注意事项-1"><a href="#注意事项-1" class="headerlink" title="注意事项"></a>注意事项</h4><ul><li>利用<strong>equals</strong>判断是否相等【<strong>(o\=\=null ? e\=\=null : o.equals(e))</strong>】；</li></ul><h3 id="retainAll"><a href="#retainAll" class="headerlink" title="retainAll"></a>retainAll</h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">retainAll</span><span class="params">(Collection&lt;?&gt; c)</span></span></span><br></pre></td></tr></tbody></table></figure><h4 id="功能-2"><a href="#功能-2" class="headerlink" title="功能"></a>功能</h4><p>求两个<strong>Collection</strong>的<strong>交集</strong>【即两个<strong>Collection</strong>都<strong>contain</strong>的元素】；</p><h3 id="iterator"><a href="#iterator" class="headerlink" title="iterator"></a>iterator</h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">Iterator&lt;E&gt; <span class="title">iterator</span><span class="params">()</span></span></span><br></pre></td></tr></tbody></table></figure><h4 id="功能-3"><a href="#功能-3" class="headerlink" title="功能"></a>功能</h4><ul><li>返回<strong>Iterator</strong>元素，用于遍历；</li></ul><h2 id="Set"><a href="#Set" class="headerlink" title="Set"></a>Set</h2><ul><li>无序性；</li><li>不可重复性【利用<strong>equals()</strong>方法判断】；</li></ul><h3 id="HashSet"><a href="#HashSet" class="headerlink" title="HashSet"></a>HashSet</h3>]]></content>
    
    
    <summary type="html">Java的集合框架Collection的简介。</summary>
    
    
    
    <category term="Java" scheme="https://1.15.86.100/categories/Java/"/>
    
    
    <category term="Collection" scheme="https://1.15.86.100/tags/Collection/"/>
    
  </entry>
  
  <entry>
    <title>Java-注解</title>
    <link href="https://1.15.86.100/2021/11/14/Java-%E6%B3%A8%E8%A7%A3/"/>
    <id>https://1.15.86.100/2021/11/14/Java-%E6%B3%A8%E8%A7%A3/</id>
    <published>2021-11-14T11:19:54.000Z</published>
    <updated>2021-12-03T03:07:34.759Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Java注解"><a href="#Java注解" class="headerlink" title="Java注解"></a>Java注解</h1><h2 id="注解简介"><a href="#注解简介" class="headerlink" title="注解简介"></a>注解简介</h2><p>注解是代码里的<strong>特殊标记</strong>【JDK5.0引入】，这些标记可以在编译，类加载，运行时被读取，并执行相应的处理。通过注解开发人员可以在不改变原有代码和逻辑的情况下在源代码中嵌入补充信息。</p><p><strong>注解</strong>只是一种标记，一般利用<strong>反射</strong>读取注解实现特定功能。</p><h2 id="注解创建"><a href="#注解创建" class="headerlink" title="注解创建"></a>注解创建</h2><ul><li>注解的<strong>声明关键字</strong>为<strong>@interface</strong>：<ul><li>自动继承<strong>java.lang.annotation.Annotation</strong>接口；</li><li>格式：<strong><code>public @interface 注解名 {内容}</code></strong>；</li></ul></li><li>每一个方法实际是声明一个<strong>配置参数</strong>：<ul><li><strong>方法名</strong>就是<strong>参数名</strong>；</li><li><strong>返回值</strong>类型就是<strong>参数类型</strong>【只能是<strong>基本类型</strong>】；</li><li>可以用<strong>default</strong>指定参数<strong>默认值</strong>；</li><li>如果只有一个参数，一般参数名为<strong>value</strong>；</li></ul></li><li>注解元素必须有值，一般设置<strong>默认值</strong>；</li></ul><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Target(value = ElementType.METHOD)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> MyAnnotation {</span><br><span class="line">    <span class="function">String <span class="title">value</span><span class="params">()</span> <span class="keyword">default</span> "Hello"</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="元注解"><a href="#元注解" class="headerlink" title="元注解"></a>元注解</h2><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p><strong>元注解</strong>是<strong>修饰</strong>其他<strong>注解</strong>的注解。</p><h3 id="Retention"><a href="#Retention" class="headerlink" title="Retention"></a>Retention</h3><h4 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h4><p>只能用于修饰<strong>Annotation的定义</strong>，用于指定该<strong>Annotation</strong>的<strong>生命周期</strong>。</p><p>其内部包含一个<strong>RetentionPolicy枚举类</strong>成员变量，其中<strong>RetentionPolicy</strong>值可以为：</p><ul><li><strong>RetentionPolicy.SOURCE</strong>：在源文件中有效【即在<strong>源文件</strong>中保留，编译器会丢弃该注解】；</li><li><strong>RetentionPolicy.CLASS</strong>：（<strong>默认值</strong>）在<strong>class</strong>文件中有效【即在<strong>class</strong>文件中保留，运行程序时，<strong>JVM</strong>会丢弃该注解】；</li><li><strong>RetentionPolicy.RUNTIME</strong>：在<strong>运行时</strong>有效【即在<strong>运行时</strong>也保留，<strong>JVM</strong>会保留注解】；</li></ul><h3 id="Target"><a href="#Target" class="headerlink" title="Target"></a>Target</h3><h4 id="功能-1"><a href="#功能-1" class="headerlink" title="功能"></a>功能</h4><p>用于指定被修饰的<strong>Annotation</strong>可以修饰哪些<strong>程序元素</strong>，<strong>value</strong>成员变量取值：</p><ul><li><strong>CONSTRUCTOR</strong>：构造器；</li><li><strong>FIELD</strong>：描述域；</li><li><strong>LOCAL_VARIABLE</strong>：局部变量；</li><li><strong>METHOD</strong>：方法；</li><li>……</li></ul><h3 id="Documented"><a href="#Documented" class="headerlink" title="Documented"></a>Documented</h3><h4 id="功能-2"><a href="#功能-2" class="headerlink" title="功能"></a>功能</h4><p>指定被修饰的<strong>Annotation类</strong>会被<strong>javadoc</strong>工具提取成<strong>文档</strong>，默认情况下<strong>javadoc</strong>不包含<strong>注解</strong>。</p><h3 id="Inherited"><a href="#Inherited" class="headerlink" title="Inherited"></a>Inherited</h3><h4 id="功能-3"><a href="#功能-3" class="headerlink" title="功能"></a>功能</h4><p>被修饰的<strong>Annotation</strong>将具有<strong>继承性</strong>【被修饰类的<strong>子类</strong>自动具有该注解】</p><h3 id="Repeatable"><a href="#Repeatable" class="headerlink" title="Repeatable"></a>Repeatable</h3><h4 id="功能-4"><a href="#功能-4" class="headerlink" title="功能"></a>功能</h4><p>被修饰的<strong>Annotation</strong>可以重复修饰同一个元素。</p><h2 id="常用注解"><a href="#常用注解" class="headerlink" title="常用注解"></a>常用注解</h2><ul><li><strong>FunctionalInterface</strong>：函数式接口；</li><li><strong>Override</strong>：重写；</li><li><strong>Deprecated</strong>：不推荐使用的方法；</li><li><strong>SuppressWarnings</strong>：抑制警告；</li></ul>]]></content>
    
    
    <summary type="html">Java注解的简介。</summary>
    
    
    
    <category term="Java" scheme="https://1.15.86.100/categories/Java/"/>
    
    
    <category term="注解" scheme="https://1.15.86.100/tags/%E6%B3%A8%E8%A7%A3/"/>
    
  </entry>
  
  <entry>
    <title>Java String类</title>
    <link href="https://1.15.86.100/2021/11/10/Java-String%E7%B1%BB/"/>
    <id>https://1.15.86.100/2021/11/10/Java-String%E7%B1%BB/</id>
    <published>2021-11-10T12:25:40.000Z</published>
    <updated>2021-11-11T08:55:46.972Z</updated>
    
    <content type="html"><![CDATA[<h1 id="String"><a href="#String" class="headerlink" title="String"></a>String</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><ul><li>存储<strong>字符串</strong>【不可变，其内部存储为<strong>final char[]</strong>】；</li><li>是一个<strong>final</strong>类，不可以<strong>被继承</strong>；</li><li>实现了<code>java.io.Serializable</code>【可以<strong>序列化</strong>】，<code>Comparable&lt;String&gt;</code>【可以比较】，<code>CharSequence</code>接口；</li></ul><h2 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h2><h3 id="getBytes"><a href="#getBytes" class="headerlink" title="getBytes()"></a>getBytes()</h3><p>转成<strong>字节数组</strong>即<strong>byte[]</strong>，可以指定<strong>编码集</strong>；</p><h2 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h2><h2 id="StringBuffer"><a href="#StringBuffer" class="headerlink" title="StringBuffer"></a>StringBuffer</h2><h3 id="简介-1"><a href="#简介-1" class="headerlink" title="简介"></a>简介</h3><ul><li><strong>可变</strong>的字符序列【内部存储为<strong>char[]</strong>，功能基本相当于<strong>StringBuilder</strong>】；</li><li><strong>线程安全</strong>；</li><li>效率相对<strong>StringBuilder</strong>较<strong>低</strong>；</li></ul><h3 id="常用方法"><a href="#常用方法" class="headerlink" title="常用方法"></a>常用方法</h3><ul><li><strong>append()</strong>：添加<strong>字符</strong>或者<strong>字符串</strong>；</li><li><strong>delete()</strong>：删除指定位置内容；</li><li><strong>replace()</strong>：替换；</li><li><strong>insert()</strong>：插入<strong>字符</strong>；</li><li><strong>reverse()</strong>：<strong>翻转</strong>字符串；</li><li><strong>setCharAt()</strong>：修改指定位置<strong>字符</strong>；</li></ul><h2 id="StringBuilder"><a href="#StringBuilder" class="headerlink" title="StringBuilder"></a>StringBuilder</h2><h3 id="简介-2"><a href="#简介-2" class="headerlink" title="简介"></a>简介</h3><ul><li><strong>可变</strong>的字符序列【内部存储为<strong>char[]</strong>，功能基本相当于<strong>StringBuffer</strong>】；</li><li><strong>线程不安全</strong>；</li><li>效率相对<strong>StringBuilder</strong>较高；</li></ul>]]></content>
    
    
    <summary type="html">Java的String类的介绍。</summary>
    
    
    
    <category term="Java" scheme="https://1.15.86.100/categories/Java/"/>
    
    
    <category term="String" scheme="https://1.15.86.100/tags/String/"/>
    
  </entry>
  
  <entry>
    <title>Java-多线程</title>
    <link href="https://1.15.86.100/2021/11/06/Java-%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    <id>https://1.15.86.100/2021/11/06/Java-%E5%A4%9A%E7%BA%BF%E7%A8%8B/</id>
    <published>2021-11-06T02:19:49.000Z</published>
    <updated>2021-11-26T08:32:09.339Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Java多线程使用"><a href="#Java多线程使用" class="headerlink" title="Java多线程使用"></a>Java多线程使用</h1><h2 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h2><h3 id="方法一【Runnable接口】"><a href="#方法一【Runnable接口】" class="headerlink" title="方法一【Runnable接口】"></a>方法一【Runnable接口】</h3><h4 id="使用步骤"><a href="#使用步骤" class="headerlink" title="使用步骤"></a>使用步骤</h4><ul><li>创建一个实现<strong>Runnable</strong>接口的类；</li><li>实现<strong>Runnable</strong>接口的抽象方法：<strong>run()</strong>；</li><li>创建该类的对象；</li><li>将该对象作为参数传给<strong>Thread</strong>，创建<strong>Thread</strong>对象；</li><li>调用<strong>Thread</strong>对象的<strong>start()</strong>方法；</li></ul><h4 id="示例代码"><a href="#示例代码" class="headerlink" title="示例代码"></a>示例代码</h4><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyThread</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) {</span><br><span class="line">            <span class="keyword">if</span> (i % <span class="number">2</span> == <span class="number">0</span>) {</span><br><span class="line">                System.out.println(Thread.currentThread().getName() + <span class="string">":"</span> + i);</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyTest</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        MyThread myThread = <span class="keyword">new</span> MyThread();</span><br><span class="line">        Thread thread1 = <span class="keyword">new</span> Thread(myThread);</span><br><span class="line">        thread1.setName(<span class="string">"线程一"</span>);</span><br><span class="line">        thread1.start();</span><br><span class="line"></span><br><span class="line">        Thread thread2 = <span class="keyword">new</span> Thread(myThread);</span><br><span class="line">        thread2.setName(<span class="string">"线程二"</span>);</span><br><span class="line">        thread2.start();</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="方法二【继承】"><a href="#方法二【继承】" class="headerlink" title="方法二【继承】"></a>方法二【继承】</h3><h4 id="使用步骤-1"><a href="#使用步骤-1" class="headerlink" title="使用步骤"></a>使用步骤</h4><ul><li>创建一个继承<strong>Thread</strong>的子类；</li><li>重写<strong>Thread</strong>类的<strong>run()</strong>方法；</li><li>创建<strong>Thread</strong>子类对象；</li><li>该类调用<strong>start()</strong>方法；</li></ul><h4 id="示例代码-1"><a href="#示例代码-1" class="headerlink" title="示例代码"></a>示例代码</h4><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyThreadExtends</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) {</span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">":"</span> + i);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ThreadTest</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        MyThreadExtends myThreadExtends1 = <span class="keyword">new</span> MyThreadExtends();</span><br><span class="line">        myThreadExtends1.setName(<span class="string">"线程0"</span>);</span><br><span class="line">        myThreadExtends1.start();</span><br><span class="line">        MyThreadExtends myThreadExtends2 = <span class="keyword">new</span> MyThreadExtends();</span><br><span class="line">        myThreadExtends2.setName(<span class="string">"线程1"</span>);</span><br><span class="line">        myThreadExtends2.start();</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="方法三【Callable接口】"><a href="#方法三【Callable接口】" class="headerlink" title="方法三【Callable接口】"></a>方法三【Callable接口】</h3><h4 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h4><ul><li><strong>call()</strong>方法可以有<strong>返回值</strong>；</li><li><strong>call()</strong>可以<strong>抛出异常</strong>；</li><li><strong>Callable</strong>支持<strong>泛型</strong>【表示返回值类型】；</li></ul><h4 id="使用步骤-2"><a href="#使用步骤-2" class="headerlink" title="使用步骤"></a>使用步骤</h4><ul><li>创建一个<strong>Callable</strong>的实现类；</li><li>实现<strong>call()</strong>方法；</li><li>创建<strong>Callable</strong>实现类的对象；</li><li>创建<strong>FutureTask</strong>对象（用实现类作为参数）；</li><li>创建<strong>Thread</strong>对象（用<strong>FutureTask</strong>对象作为参数）；</li><li>调用<strong>Thread</strong>的<strong>start()</strong>方法；</li></ul><h4 id="示例代码-2"><a href="#示例代码-2" class="headerlink" title="示例代码"></a>示例代码</h4><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ThreadCall</span> <span class="keyword">implements</span> <span class="title">Callable</span></span>{</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">call</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>{</span><br><span class="line">        <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &amp;lt;= <span class="number">100</span>; i++) {</span><br><span class="line">            <span class="keyword">if</span> (i % <span class="number">2</span> == <span class="number">0</span>) {</span><br><span class="line">                System.out.println(i);</span><br><span class="line">                sum += i;</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> sum;</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ThreadCallTest</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        ThreadCall threadCall = <span class="keyword">new</span> ThreadCall();</span><br><span class="line"></span><br><span class="line">        FutureTask futureTask = <span class="keyword">new</span> FutureTask(threadCall);</span><br><span class="line">    </span><br><span class="line">        <span class="keyword">new</span> Thread(futureTask).start();</span><br><span class="line">    </span><br><span class="line">        <span class="keyword">try</span> {</span><br><span class="line">            Object sum = futureTask.get();</span><br><span class="line">            System.out.println(sum);</span><br><span class="line">        } <span class="keyword">catch</span> (InterruptedException e) {</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        } <span class="keyword">catch</span> (ExecutionException e) {</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h4 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h4><ul><li><strong>Callable.get()</strong>方法需要等待线程结果，可能会<strong>阻塞</strong>；</li><li>一个<strong>FutrueTask</strong>对象只能<strong>执行一次</strong>；</li></ul><h3 id="方法四【线程池】"><a href="#方法四【线程池】" class="headerlink" title="方法四【线程池】"></a>方法四【线程池】</h3><h4 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h4><ul><li>提高响应速度；</li><li>降低资源消耗；</li><li>便于线程管理；</li></ul><h4 id="使用步骤-3"><a href="#使用步骤-3" class="headerlink" title="使用步骤"></a>使用步骤</h4><ul><li>创建线程池；</li><li>执行线程；</li></ul><h4 id="Executors-API"><a href="#Executors-API" class="headerlink" title="Executors-API"></a>Executors-API</h4><p><strong>Executors</strong>创建线程本质是创建<strong>ThreadPoolExecutor</strong>实现。</p><ul><li><strong>Executors.newFixedThreadPool()</strong>：创建固定大小的线程池；</li><li><strong>Executors.newCachedThreadPool()</strong>：创建可变大小的线程池；</li><li><strong>Executors.newSingleThreadExecutor()</strong>：创建单个线程的线程池；</li></ul><h4 id="示例代码【Executors创建】"><a href="#示例代码【Executors创建】" class="headerlink" title="示例代码【Executors创建】"></a>示例代码【Executors创建】</h4><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ThreadPoolNumber</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>{</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">100</span>; i++) {</span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">":"</span> + i);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ThreadPool</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        ThreadPoolExecutor executorService = (ThreadPoolExecutor)Executors.newFixedThreadPool(<span class="number">10</span>);</span><br><span class="line">        executorService.execute(<span class="keyword">new</span> ThreadPoolNumber()); <span class="comment">// Runnable</span></span><br><span class="line">        executorService.execute(<span class="keyword">new</span> ThreadPoolNumber()); <span class="comment">// Runnable</span></span><br><span class="line">        executorService.shutdown(); <span class="comment">// 关闭线程池</span></span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h4 id="ThreadPoolExecutor"><a href="#ThreadPoolExecutor" class="headerlink" title="ThreadPoolExecutor"></a>ThreadPoolExecutor</h4><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ThreadPoolExecutor</span><span class="params">(<span class="keyword">int</span> corePoolSize, // 核心线程池大小</span></span></span><br><span class="line"><span class="function"><span class="params">                          <span class="keyword">int</span> maximumPoolSize, // 最大核心线程池大小</span></span></span><br><span class="line"><span class="function"><span class="params">                          <span class="keyword">long</span> keepAliveTime,  // 超时释放时间</span></span></span><br><span class="line"><span class="function"><span class="params">                          TimeUnit unit, // 超时单位</span></span></span><br><span class="line"><span class="function"><span class="params">                          BlockingQueue&lt;Runnable&gt; workQueue,  // 阻塞队列</span></span></span><br><span class="line"><span class="function"><span class="params">                          ThreadFactory threadFactory,  // 线程工厂，创建线程</span></span></span><br><span class="line"><span class="function"><span class="params">                          RejectedExecutionHandler handler)</span> <span class="comment">// 拒绝策略</span></span></span><br></pre></td></tr></tbody></table></figure><h4 id="示例代码【ThreadPoolExecutor创建】"><a href="#示例代码【ThreadPoolExecutor创建】" class="headerlink" title="示例代码【ThreadPoolExecutor创建】"></a>示例代码【ThreadPoolExecutor创建】</h4><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">    ExecutorService threadPool = <span class="keyword">new</span> ThreadPoolExecutor(</span><br><span class="line">        <span class="number">2</span>,</span><br><span class="line">        <span class="number">5</span>,</span><br><span class="line">        <span class="number">3</span>, TimeUnit.SECONDS,</span><br><span class="line">        <span class="keyword">new</span> LinkedBlockingQueue&lt;&gt;(<span class="number">3</span>),</span><br><span class="line">        Executors.defaultThreadFactory(),</span><br><span class="line">        <span class="keyword">new</span> ThreadPoolExecutor.AbortPolicy()</span><br><span class="line">    );</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) {</span><br><span class="line">        threadPool.execute(() -&gt; {</span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">" OK"</span>);</span><br><span class="line">        });</span><br><span class="line">    }</span><br><span class="line">    threadPool.shutdown();</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h4 id="拒绝策略"><a href="#拒绝策略" class="headerlink" title="拒绝策略"></a>拒绝策略</h4><ul><li><strong>AbortPolicy</strong>：队列满了，不处理，抛出异常【默认】；</li><li><strong>CallerRunsPolicy</strong>：队列满了，交给<strong>main</strong>线程处理；</li><li><strong>DiscardPolicy</strong>：队列满了，不处理，不会抛出异常；</li><li><strong>DiscardOldestPolicy</strong>：队列满了，尝试竞争，竞争失败就抛弃；</li></ul><h2 id="Java线程细节"><a href="#Java线程细节" class="headerlink" title="Java线程细节"></a>Java线程细节</h2><h3 id="Java线程状态"><a href="#Java线程状态" class="headerlink" title="Java线程状态"></a>Java线程状态</h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">enum</span> <span class="title">State</span> </span>{</span><br><span class="line">    NEW,</span><br><span class="line">    RUNNABLE,</span><br><span class="line">    BLOCKED,</span><br><span class="line">    WAITING,</span><br><span class="line">    TIMED_WAITING,</span><br><span class="line">    TERMINATED;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="线程同步"><a href="#线程同步" class="headerlink" title="线程同步"></a>线程同步</h2><h3 id="同步代码块【synchronized】"><a href="#同步代码块【synchronized】" class="headerlink" title="同步代码块【synchronized】"></a>同步代码块【synchronized】</h3><h4 id="特点-1"><a href="#特点-1" class="headerlink" title="特点"></a>特点</h4><ul><li>可重入锁【可以<strong>重复获取</strong>同一个锁而<strong>不会出现死锁</strong>（例如，<strong>synchronized</strong>代码块的<strong>嵌套</strong>）】；</li><li>不可以中断【等待获取锁的时候不可中断，拿到锁之后可中断；没获取到锁的情况下，中断操作一直不会生效直到<strong>获取锁之后中断发生</strong>】；</li><li>非公平；</li></ul><h4 id="使用步骤-4"><a href="#使用步骤-4" class="headerlink" title="使用步骤"></a>使用步骤</h4><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">synchronized</span>(监视类){</span><br><span class="line">    同步代码块（每次仅允许一个线程进入）</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyThread</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>{</span><br><span class="line">    Object object = <span class="keyword">new</span> Object();</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> ticket = <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) {</span><br><span class="line">            <span class="keyword">synchronized</span> (object) {</span><br><span class="line">                <span class="keyword">if</span> (ticket &gt; <span class="number">0</span>) {</span><br><span class="line">                    <span class="keyword">try</span> {</span><br><span class="line">                        Thread.sleep(<span class="number">100</span>);</span><br><span class="line">                    } <span class="keyword">catch</span> (InterruptedException e) {</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    }</span><br><span class="line"></span><br><span class="line">                    System.out.println(Thread.currentThread().getName() + <span class="string">" : "</span> + ticket);</span><br><span class="line">                    ticket--;</span><br><span class="line">                } <span class="keyword">else</span> {</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="同步方法"><a href="#同步方法" class="headerlink" title="同步方法"></a>同步方法</h3><h4 id="使用步骤【synchronized】"><a href="#使用步骤【synchronized】" class="headerlink" title="使用步骤【synchronized】"></a>使用步骤【synchronized】</h4><p>在<strong>方法声明</strong>前面添加<strong>synchronized</strong>关键字。</p><ul><li>实现<strong>Runnable</strong>接口方式：直接添加关键字；</li><li>继承<strong>Thread</strong>方式：需要设置该方法为<strong>静态方法</strong>；</li></ul><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyThreadMethod</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>{</span><br><span class="line">    Object object = <span class="keyword">new</span> Object();</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> ticket = <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) {</span><br><span class="line">            <span class="keyword">if</span> (!getTicket()) {</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">boolean</span> <span class="title">getTicket</span> <span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">if</span> (ticket &gt; <span class="number">0</span>) {</span><br><span class="line">            <span class="keyword">try</span> {</span><br><span class="line">                Thread.sleep(<span class="number">100</span>);</span><br><span class="line">            } <span class="keyword">catch</span> (InterruptedException e) {</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            }</span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">" : "</span> + ticket);</span><br><span class="line">            ticket--;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        } <span class="keyword">else</span> {</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="Lock锁🔒"><a href="#Lock锁🔒" class="headerlink" title="Lock锁🔒"></a>Lock锁🔒</h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LockTicket</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> ticket = <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> ReentrantLock lock = <span class="keyword">new</span> ReentrantLock();</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) {</span><br><span class="line">            <span class="comment">// 调用lock方法</span></span><br><span class="line">            lock.lock();</span><br><span class="line">            <span class="keyword">try</span> {                </span><br><span class="line">                <span class="keyword">if</span> (ticket &gt; <span class="number">0</span>) {</span><br><span class="line">                    <span class="keyword">try</span> {</span><br><span class="line">                        Thread.sleep(<span class="number">100</span>);</span><br><span class="line">                    } <span class="keyword">catch</span> (InterruptedException e) {</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    }</span><br><span class="line">                    System.out.println(Thread.currentThread().getName() + <span class="string">":"</span> + ticket);</span><br><span class="line">                    ticket--;</span><br><span class="line">                } <span class="keyword">else</span> {</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                }</span><br><span class="line">            } <span class="keyword">finally</span> {</span><br><span class="line">                <span class="comment">// 调用unlock</span></span><br><span class="line">                lock.unlock();</span><br><span class="line">            }</span><br><span class="line"></span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h4 id="注意事项-1"><a href="#注意事项-1" class="headerlink" title="注意事项"></a>注意事项</h4><h4 id="Synchronized-和-Lock-区别"><a href="#Synchronized-和-Lock-区别" class="headerlink" title="Synchronized 和 Lock 区别"></a>Synchronized 和 Lock 区别</h4><ul><li><p><strong>Synchronized</strong>是内置的<strong>Java关键字</strong>，<strong>Lock</strong>是<strong>Java类</strong>；</p></li><li><p><strong>Synchronized</strong>无法判断<strong>锁的状态</strong>，<strong>Lock</strong>可以判断<strong>是否获取到了锁</strong>；</p></li><li><p><strong>Synchronized</strong>可以<strong>自动释放锁</strong>，<strong>Lock</strong>必须<strong>手动释放</strong>；</p></li></ul><h2 id="线程通信"><a href="#线程通信" class="headerlink" title="线程通信"></a>线程通信</h2><h3 id="普通方法"><a href="#普通方法" class="headerlink" title="普通方法"></a>普通方法</h3><p>该三个方法必须在<strong>同步代码块</strong>中使用；三个方法的调用者必须是<strong>同步代码块</strong>或者<strong>同步方法</strong>中的<strong>同步监视器</strong>。</p><ul><li><strong>wait()</strong>：该方法可以使线程进入阻塞状态；</li><li><strong>notify()</strong>：唤醒一个进程；</li><li><strong>notifyAll()</strong>：唤醒所有进程；</li></ul><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Number</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>{</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> number = <span class="number">1</span>;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">while</span>(<span class="keyword">true</span>) {</span><br><span class="line">            <span class="keyword">synchronized</span> (<span class="keyword">this</span>) {</span><br><span class="line">                <span class="keyword">if</span> (number &lt;= <span class="number">100</span>) {</span><br><span class="line">                    System.out.println(Thread.currentThread().getName() + <span class="string">":"</span> + number);</span><br><span class="line">                    number++;</span><br><span class="line">                    notify();</span><br><span class="line">                    <span class="keyword">try</span> {</span><br><span class="line">                        wait();</span><br><span class="line">                    } <span class="keyword">catch</span> (InterruptedException e) {</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    }</span><br><span class="line"></span><br><span class="line">                } <span class="keyword">else</span> {</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="JUC方法"><a href="#JUC方法" class="headerlink" title="JUC方法"></a>JUC方法</h3><ul><li><strong>Condition.await()</strong>：该方法可以使线程进入阻塞状态；</li><li><strong>Condition.signalAll()</strong>：唤醒所有进程；</li></ul><h4 id="代码示例"><a href="#代码示例" class="headerlink" title="代码示例"></a>代码示例</h4><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Data</span></span>{</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> number = <span class="number">0</span>;</span><br><span class="line">    Lock lock = <span class="keyword">new</span> ReentrantLock();</span><br><span class="line">    Condition condition = lock.newCondition();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">increment</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>{</span><br><span class="line">        lock.lock();</span><br><span class="line">        <span class="keyword">try</span> {</span><br><span class="line">            <span class="keyword">while</span> (number != <span class="number">0</span>) {</span><br><span class="line">                condition.await();</span><br><span class="line">            }</span><br><span class="line">            number++;</span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">"=&gt;"</span> + number);</span><br><span class="line">            condition.signalAll();</span><br><span class="line">        } <span class="keyword">catch</span> (Exception e) {</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        } <span class="keyword">finally</span> {</span><br><span class="line">            lock.unlock();</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">decrement</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>{</span><br><span class="line">        lock.lock();</span><br><span class="line">        <span class="keyword">try</span> {</span><br><span class="line">            <span class="keyword">while</span> (number == <span class="number">0</span>) {</span><br><span class="line">                condition.await();</span><br><span class="line">            }</span><br><span class="line">            number--;</span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">"=&gt;"</span> + number);</span><br><span class="line">            condition.signalAll();</span><br><span class="line">        } <span class="keyword">catch</span> (Exception e) {</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        } <span class="keyword">finally</span> {</span><br><span class="line">            lock.unlock();</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="注意事项-2"><a href="#注意事项-2" class="headerlink" title="注意事项"></a>注意事项</h3><h4 id="虚假唤醒问题"><a href="#虚假唤醒问题" class="headerlink" title="虚假唤醒问题"></a>虚假唤醒问题</h4><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (number == <span class="number">0</span>) {</span><br><span class="line">    wait();</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>如果使用<strong>if</strong>，有可能<strong>唤醒</strong>的线程任不满足条件，所以最好使用<strong>while</strong>；</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> (number == <span class="number">0</span>) {</span><br><span class="line">    wait();</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="JUC常用辅助类"><a href="#JUC常用辅助类" class="headerlink" title="JUC常用辅助类"></a>JUC常用辅助类</h2><h3 id="CountDownLatch"><a href="#CountDownLatch" class="headerlink" title="CountDownLatch"></a>CountDownLatch</h3><p>等待<strong>计算器</strong>归零再执行。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JUCCountDownLatch</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>{</span><br><span class="line">        CountDownLatch countDownLatch = <span class="keyword">new</span> CountDownLatch(<span class="number">6</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">6</span>; i++) {</span><br><span class="line">            <span class="keyword">new</span> Thread(()-&gt;{</span><br><span class="line">                System.out.println(Thread.currentThread().getName() + <span class="string">" Go out"</span>);</span><br><span class="line">                countDownLatch.countDown();</span><br><span class="line">            }, String.valueOf(i)).start();</span><br><span class="line">        }</span><br><span class="line">        countDownLatch.await();</span><br><span class="line">        System.out.println(<span class="string">"Close Door"</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="CyclicBarrier"><a href="#CyclicBarrier" class="headerlink" title="CyclicBarrier"></a>CyclicBarrier</h3><p>等待指定个数个线程结束，指定执行某个线程。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">    CyclicBarrier cyclicBarrier = <span class="keyword">new</span> CyclicBarrier(<span class="number">7</span>, ()-&gt;{</span><br><span class="line">        System.out.println(<span class="string">"召唤神龙成功"</span>);</span><br><span class="line">    });</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">7</span>; i++) {</span><br><span class="line">        <span class="keyword">new</span> Thread(()-&gt;{</span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">" Get"</span>);</span><br><span class="line">            <span class="keyword">try</span> {</span><br><span class="line">                cyclicBarrier.await();</span><br><span class="line">            } <span class="keyword">catch</span> (InterruptedException e) {</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            } <span class="keyword">catch</span> (BrokenBarrierException e) {</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            }</span><br><span class="line">        }, String.valueOf(i)).start();</span><br><span class="line">    }</span><br><span class="line">    System.out.println(<span class="string">"Close Door"</span>);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="Semaphore"><a href="#Semaphore" class="headerlink" title="Semaphore"></a>Semaphore</h3><p>信号量。</p><ul><li><strong>Semaphore.acquire()</strong>：获得信号量，如果满了就等待；</li><li><strong>Semaphore.release()</strong>：释放信号量，会将当前信号量加一，然后唤醒等待线程；</li></ul><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">    <span class="comment">// 线程数量</span></span><br><span class="line">    Semaphore semaphore = <span class="keyword">new</span> Semaphore(<span class="number">3</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">6</span>; i++) {</span><br><span class="line">        <span class="keyword">new</span> Thread(()-&gt;{</span><br><span class="line">            <span class="keyword">try</span> {</span><br><span class="line">                semaphore.acquire();</span><br><span class="line">                System.out.println(Thread.currentThread().getName() + <span class="string">"抢到车位"</span>);</span><br><span class="line">                TimeUnit.SECONDS.sleep(<span class="number">2</span>);</span><br><span class="line">                System.out.println(Thread.currentThread().getName() + <span class="string">"离开车位"</span>);</span><br><span class="line">            } <span class="keyword">catch</span> (InterruptedException e) {</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            } <span class="keyword">finally</span> {</span><br><span class="line">                semaphore.release();</span><br><span class="line">            }</span><br><span class="line">        }, String.valueOf(i)).start();</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="JUC常用锁"><a href="#JUC常用锁" class="headerlink" title="JUC常用锁"></a>JUC常用锁</h2><h2 id="线程安全"><a href="#线程安全" class="headerlink" title="线程安全"></a>线程安全</h2><h3 id="线程安全的List"><a href="#线程安全的List" class="headerlink" title="线程安全的List"></a>线程安全的List</h3><h4 id="java-util-Vector"><a href="#java-util-Vector" class="headerlink" title="java.util.Vector"></a>java.util.Vector</h4><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Vector&lt;Integer&gt; list = <span class="keyword">new</span> Vector&lt;&gt;();</span><br></pre></td></tr></tbody></table></figure><h4 id="java-util-concurrent-CopyOnWriteArrayList"><a href="#java-util-concurrent-CopyOnWriteArrayList" class="headerlink" title="java.util.concurrent.CopyOnWriteArrayList"></a>java.util.concurrent.CopyOnWriteArrayList</h4><p><strong>写入时复制</strong></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CopyOnWriteArrayList&lt;Integer&gt; list = <span class="keyword">new</span> CopyOnWriteArrayList&lt;&gt;();</span><br></pre></td></tr></tbody></table></figure><h4 id="java-util-Collections-synchronizedList"><a href="#java-util-Collections-synchronizedList" class="headerlink" title="java.util.Collections.synchronizedList()"></a>java.util.Collections.synchronizedList()</h4><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">List&lt;Integer&gt; list = Collections.synchronizedList(<span class="keyword">new</span> ArrayList&lt;&gt;());</span><br></pre></td></tr></tbody></table></figure><h2 id="阻塞队列"><a href="#阻塞队列" class="headerlink" title="阻塞队列"></a>阻塞队列</h2><h3 id="API"><a href="#API" class="headerlink" title="API"></a>API</h3><div class="table-container"><table><thead><tr><th>方式</th><th>抛出异常</th><th>有返回值，不抛异常</th><th>阻塞等待</th><th>超时等待</th></tr></thead><tbody><tr><td><strong>添加</strong></td><td>add()</td><td>offer()</td><td>put()</td><td>offer()</td></tr><tr><td><strong>删除</strong></td><td>remove()</td><td>poll()</td><td>take()</td><td>poll()</td></tr><tr><td><strong>返回队首元素</strong></td><td>element()</td><td>peek()</td><td>-</td><td>-</td></tr></tbody></table></div><h3 id="SynchronousQueue"><a href="#SynchronousQueue" class="headerlink" title="SynchronousQueue"></a>SynchronousQueue</h3><p>只存储一个元素。</p><h2 id="JMM"><a href="#JMM" class="headerlink" title="JMM"></a>JMM</h2><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>JMM即为<strong>JAVA 内存模型（Java Memory Model）</strong>。</p><p><strong>JVM</strong>在设计时候考虑到，如果JAVA线程每次读取和写入变量都直接操作主内存，<strong>对性能影响比较大</strong>，所以<strong>每条线程拥有各自的工作内存</strong>，工作内存中的变量是主内存中的一份拷贝，线程对变量的读取和写入，直接在工作内存中操作，而不能直接去操作主内存中的变量。但是这样就会出现一个问题，当一个线程修改了自己工作内存中变量，对其他线程是不可见的，会导致线程不安全的问题。因为<strong>JMM</strong>制定了一套标准来保证开发者在编写多线程程序的时候，能够控制什么时候内存会被同步给其他线程。</p><p><img src="/2021/11/06/Java-%E5%A4%9A%E7%BA%BF%E7%A8%8B/1102674-20180815143324915-2024156794.png" alt="img"></p><h3 id="内存交互操作"><a href="#内存交互操作" class="headerlink" title="内存交互操作"></a>内存交互操作</h3><p>每一个操作都是原子的，不可再分的。</p><ul><li><strong>lock</strong>（锁定）：作用于主内存的变量，把一个变量标识为线程独占状态</li><li><strong>unlock</strong>（解锁）：作用于主内存的变量，它把一个处于锁定状态的变量释放出来，释放后的变量才可以被其他线程锁定</li><li><strong>read</strong>（读取）：作用于主内存变量，它把一个变量的值从主内存传输到线程的工作内存中，以便随后的load动作使用</li><li><strong>load</strong>（载入）：作用于工作内存的变量，它把read操作从主存中变量放入工作内存中</li><li><strong>use</strong>（使用）：作用于工作内存中的变量，它把工作内存中的变量传输给执行引擎，每当虚拟机遇到一个需要使用到变量的值，就会使用到这个指令</li><li><strong>assign</strong>（赋值）：作用于工作内存中的变量，它把一个从执行引擎中接受到的值放入工作内存的变量副本中</li><li><strong>store</strong>（存储）：作用于主内存中的变量，它把一个从工作内存中一个变量的值传送到主内存中，以便后续的write使用</li><li><strong>write</strong>（写入）：作用于主内存中的变量，它把store操作从工作内存中得到的变量的值放入主内存的变量中</li></ul><h3 id="Volatile"><a href="#Volatile" class="headerlink" title="Volatile"></a>Volatile</h3><h4 id="特点-2"><a href="#特点-2" class="headerlink" title="特点"></a>特点</h4><ul><li>保证可见性【数据的修改会被线程立即发现】；</li><li><strong>不保证</strong>原子性；</li><li>禁止指令重排；</li></ul><h4 id="指令重排"><a href="#指令重排" class="headerlink" title="指令重排"></a>指令重排</h4><p>在程序执行过程中，为了性能考虑，编译器和CPU可能会对指令重新排序。</p><ul><li>编译器优化；</li><li>指令并行；</li><li>内存系统；</li></ul><h2 id="原子类"><a href="#原子类" class="headerlink" title="原子类"></a>原子类</h2><h2 id="CAS"><a href="#CAS" class="headerlink" title="CAS"></a>CAS</h2><h3 id="简介-1"><a href="#简介-1" class="headerlink" title="简介"></a>简介</h3><p><strong>CAS（Compare And Swap）</strong>是比较并交换。</p><h3 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">    AtomicInteger atomicInteger = <span class="keyword">new</span> AtomicInteger(<span class="number">2020</span>);</span><br><span class="line">    System.out.println(atomicInteger.compareAndSet(<span class="number">2020</span>, <span class="number">2021</span>));</span><br><span class="line">    System.out.println(atomicInteger.get());</span><br><span class="line">    System.out.println(atomicInteger.compareAndSet(<span class="number">2020</span>, <span class="number">2021</span>));</span><br><span class="line">    System.out.println(atomicInteger.get());</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">getAndSetInt</span><span class="params">(Object var1, <span class="keyword">long</span> var2, <span class="keyword">int</span> var4)</span> </span>{</span><br><span class="line">    <span class="keyword">int</span> var5;</span><br><span class="line">    <span class="keyword">do</span> {</span><br><span class="line">        var5 = <span class="keyword">this</span>.getIntVolatile(var1, var2);</span><br><span class="line">    } <span class="keyword">while</span>(!<span class="keyword">this</span>.compareAndSwapInt(var1, var2, var5, var4));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> var5;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h3><ul><li>循环会耗时；</li><li>一次只能保证一个共享变量的原子性；</li><li><strong>ABA</strong>问题【可以使用<strong>AtomicStampedReference</strong>解决】；</li></ul><h2 id="注意事项-3"><a href="#注意事项-3" class="headerlink" title="注意事项"></a>注意事项</h2><h3 id="sleep-和wait"><a href="#sleep-和wait" class="headerlink" title="sleep()和wait()"></a>sleep()和wait()</h3><ul><li><p><strong>相同点</strong>：执行方法，都可以使得当前进程进入<strong>阻塞</strong>状态；</p></li><li><p><strong>不同点</strong>：</p><ul><li>两个方法声明位置不同：<strong>sleep()</strong>声明在<strong>Thread</strong>类中；<strong>wait()</strong>声明在<strong>Object</strong>类中；</li><li>调用要求不同：<strong>sleep()</strong>可以在任何时候调用；<strong>wait()</strong>必须在<strong>同步代码块</strong>或<strong>同步方法</strong>中调用；</li><li>是否释放<strong>同步监视器</strong>：如果两个方法都使用在<strong>同步代码块</strong>或者<strong>同步方法</strong>中，<strong>sleep()</strong>不会释放锁；<strong>wait()</strong>会释放锁；</li></ul></li></ul>]]></content>
    
    
    <summary type="html">Java多线程的使用方法。</summary>
    
    
    
    <category term="Java" scheme="https://1.15.86.100/categories/Java/"/>
    
    
    <category term="多线程" scheme="https://1.15.86.100/tags/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    
  </entry>
  
</feed>
