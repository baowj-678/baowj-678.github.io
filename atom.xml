<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>BaoWJ&#39;s Blog</title>
  
  
  <link href="https://1.15.86.100/atom.xml" rel="self"/>
  
  <link href="https://1.15.86.100/"/>
  <updated>2021-11-25T08:27:17.575Z</updated>
  <id>https://1.15.86.100/</id>
  
  <author>
    <name>Bao Wenjie</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Java-函数式接口</title>
    <link href="https://1.15.86.100/2021/11/25/Java-%E5%87%BD%E6%95%B0%E5%BC%8F%E6%8E%A5%E5%8F%A3/"/>
    <id>https://1.15.86.100/2021/11/25/Java-%E5%87%BD%E6%95%B0%E5%BC%8F%E6%8E%A5%E5%8F%A3/</id>
    <published>2021-11-25T08:08:05.000Z</published>
    <updated>2021-11-25T08:27:17.575Z</updated>
    
    <content type="html"><![CDATA[<h1 id="函数式接口"><a href="#函数式接口" class="headerlink" title="函数式接口"></a>函数式接口</h1><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p><strong>函数式接口(Functional Interface)</strong>就是一个有且<strong>仅有一个抽象方法</strong>，但是可以有多个非抽象方法的接口。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@FunctionalInterface</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">GreetingService</span> </span></span><br><span class="line"><span class="class"></span>{</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">sayMessage</span><span class="params">(String message)</span></span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="四大函数式接口"><a href="#四大函数式接口" class="headerlink" title="四大函数式接口"></a>四大函数式接口</h2><h3 id="Function"><a href="#Function" class="headerlink" title="Function"></a>Function</h3><p>函数式接口，输入一个对象，输出一个对象。</p><h4 id="声明"><a href="#声明" class="headerlink" title="声明"></a>声明</h4><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@FunctionalInterface</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Function</span>&lt;<span class="title">T</span>,<span class="title">R</span>&gt;</span>{</span><br><span class="line">    <span class="function">R <span class="title">apply</span><span class="params">(T t)</span></span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h4 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h4><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">    Function function = (str)-&gt;{<span class="keyword">return</span> str;};</span><br><span class="line">    System.out.println(function.apply(<span class="string">"efgref"</span>));</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="Predicate"><a href="#Predicate" class="headerlink" title="Predicate"></a>Predicate</h3><p><strong>断定型</strong>接口，输入一个对象，返回判定结果。</p><h4 id="声明-1"><a href="#声明-1" class="headerlink" title="声明"></a>声明</h4><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@FunctionalInterface</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Predicate</span>&lt;<span class="title">T</span>&gt;</span>{</span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">test</span><span class="params">(T t)</span></span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h4 id="示例-1"><a href="#示例-1" class="headerlink" title="示例"></a>示例</h4><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">    Predicate&lt;String&gt; predicate = (str) -&gt; {<span class="keyword">return</span> str.length() &gt; <span class="number">10</span>;};</span><br><span class="line">    System.out.println(predicate.test(<span class="string">"fgervrvtrvrvcdcdc"</span>));</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="Supplier"><a href="#Supplier" class="headerlink" title="Supplier"></a>Supplier</h3><p><strong>生产型</strong>接口，<strong>只有输出没有输入</strong>。</p><h4 id="声明-2"><a href="#声明-2" class="headerlink" title="声明"></a>声明</h4><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@FunctionalInterface</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Supplier</span>&lt;<span class="title">T</span>&gt; </span>{</span><br><span class="line">    <span class="function">T <span class="title">get</span><span class="params">()</span></span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h4 id="示例-2"><a href="#示例-2" class="headerlink" title="示例"></a>示例</h4><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">    Supplier&lt;String&gt; supplier= () -&gt; {<span class="keyword">return</span> <span class="string">"fdfvdfvfg"</span>;};</span><br><span class="line">    System.out.println(supplier.get());</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="Consumer"><a href="#Consumer" class="headerlink" title="Consumer"></a>Consumer</h3><p><strong>消费型</strong>接口，只有输入没有输出。</p><h4 id="声明-3"><a href="#声明-3" class="headerlink" title="声明"></a>声明</h4><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@FunctionalInterface</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Consumer</span>&lt;<span class="title">T</span>&gt;</span>{</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">accept</span><span class="params">(T t)</span></span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h4 id="示例-3"><a href="#示例-3" class="headerlink" title="示例"></a>示例</h4><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">    Consumer&lt;String&gt; consumer = (str) -&gt; {</span><br><span class="line">        System.out.println(str);</span><br><span class="line">    };</span><br><span class="line">    consumer.accept(<span class="string">"gefervtrv"</span>);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>]]></content>
    
    
    <summary type="html">Java函数式接口简介。</summary>
    
    
    
    <category term="Java" scheme="https://1.15.86.100/categories/Java/"/>
    
    
    <category term="函数式接口" scheme="https://1.15.86.100/tags/%E5%87%BD%E6%95%B0%E5%BC%8F%E6%8E%A5%E5%8F%A3/"/>
    
  </entry>
  
  <entry>
    <title>Java-Collection</title>
    <link href="https://1.15.86.100/2021/11/16/Java-Collection/"/>
    <id>https://1.15.86.100/2021/11/16/Java-Collection/</id>
    <published>2021-11-16T09:08:09.000Z</published>
    <updated>2021-11-24T02:50:17.940Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Collection"><a href="#Collection" class="headerlink" title="Collection"></a>Collection</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><h3 id="源码声明"><a href="#源码声明" class="headerlink" title="源码声明"></a>源码声明</h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Collection</span>&lt;<span class="title">E</span>&gt;</span></span><br><span class="line"><span class="class"><span class="keyword">extends</span> <span class="title">Iterable</span>&lt;<span class="title">E</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h3 id="Collection的继承关系"><a href="#Collection的继承关系" class="headerlink" title="Collection的继承关系"></a>Collection的继承关系</h3><p><img src="/2021/11/16/Java-Collection/1362965-20190118094735724-2129767713.png" alt="img"></p><h2 id="主要方法"><a href="#主要方法" class="headerlink" title="主要方法"></a>主要方法</h2><h3 id="contains"><a href="#contains" class="headerlink" title="contains"></a>contains</h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">contains</span><span class="params">(Object o)</span></span></span><br></pre></td></tr></tbody></table></figure><h4 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h4><p>返回<strong>Collection</strong>中是否存在<strong>o</strong>；</p><h4 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h4><ul><li>判断是否相等时调用<strong>equals</strong>方法【<strong>(o\=\=null ? e\=\=null : o.equals(e))</strong>】；</li><li>如果没有重写<strong>equals</strong>方法，会直接用<strong>==</strong>判断；</li></ul><h3 id="remove"><a href="#remove" class="headerlink" title="remove"></a>remove</h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">remove</span><span class="params">(Object o)</span></span></span><br></pre></td></tr></tbody></table></figure><h4 id="功能-1"><a href="#功能-1" class="headerlink" title="功能"></a>功能</h4><p>删除等于元素<strong>o</strong>的元素【<strong>不一定</strong>地址一样】；</p><h4 id="注意事项-1"><a href="#注意事项-1" class="headerlink" title="注意事项"></a>注意事项</h4><ul><li>利用<strong>equals</strong>判断是否相等【<strong>(o\=\=null ? e\=\=null : o.equals(e))</strong>】；</li></ul><h3 id="retainAll"><a href="#retainAll" class="headerlink" title="retainAll"></a>retainAll</h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">retainAll</span><span class="params">(Collection&lt;?&gt; c)</span></span></span><br></pre></td></tr></tbody></table></figure><h4 id="功能-2"><a href="#功能-2" class="headerlink" title="功能"></a>功能</h4><p>求两个<strong>Collection</strong>的<strong>交集</strong>【即两个<strong>Collection</strong>都<strong>contain</strong>的元素】；</p><h3 id="iterator"><a href="#iterator" class="headerlink" title="iterator"></a>iterator</h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">Iterator&lt;E&gt; <span class="title">iterator</span><span class="params">()</span></span></span><br></pre></td></tr></tbody></table></figure><h4 id="功能-3"><a href="#功能-3" class="headerlink" title="功能"></a>功能</h4><ul><li>返回<strong>Iterator</strong>元素，用于遍历；</li></ul><h2 id="Set"><a href="#Set" class="headerlink" title="Set"></a>Set</h2><ul><li>无序性；</li><li>不可重复性【利用<strong>equals()</strong>方法判断】；</li></ul><h3 id="HashSet"><a href="#HashSet" class="headerlink" title="HashSet"></a>HashSet</h3>]]></content>
    
    
    <summary type="html">Java的集合框架Collection的简介。</summary>
    
    
    
    <category term="Java" scheme="https://1.15.86.100/categories/Java/"/>
    
    
    <category term="Collection" scheme="https://1.15.86.100/tags/Collection/"/>
    
  </entry>
  
  <entry>
    <title>Java-注解</title>
    <link href="https://1.15.86.100/2021/11/14/Java-%E6%B3%A8%E8%A7%A3/"/>
    <id>https://1.15.86.100/2021/11/14/Java-%E6%B3%A8%E8%A7%A3/</id>
    <published>2021-11-14T11:19:54.000Z</published>
    <updated>2021-11-15T11:18:00.059Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Java注解"><a href="#Java注解" class="headerlink" title="Java注解"></a>Java注解</h1><h2 id="注解简介"><a href="#注解简介" class="headerlink" title="注解简介"></a>注解简介</h2><p>注解是代码里的<strong>特殊标记</strong>，这些标记可以在编译，类加载，运行时被读取，并执行相应的处理。通过注解开发人员可以在不改变原有代码和逻辑的情况下在源代码中嵌入补充信息。</p><h2 id="注解创建"><a href="#注解创建" class="headerlink" title="注解创建"></a>注解创建</h2><ul><li>注解的<strong>声明关键字</strong>为<strong>@interface</strong>；</li><li>可以用<strong>default</strong>指定成员<strong>默认值</strong>；</li></ul><h2 id="元注解"><a href="#元注解" class="headerlink" title="元注解"></a>元注解</h2><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p><strong>元注解</strong>是<strong>修饰</strong>其他<strong>注解</strong>的注解。</p><h3 id="Retention"><a href="#Retention" class="headerlink" title="Retention"></a>Retention</h3><h4 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h4><p>只能用于修饰<strong>Annotation的定义</strong>，用于指定该<strong>Annotation</strong>的<strong>生命周期</strong>。</p><p>其内部包含一个<strong>RetentionPolicy枚举类</strong>成员变量，其中<strong>RetentionPolicy</strong>值可以为：</p><ul><li><strong>RetentionPolicy.SOURCE</strong>：在源文件中有效【即在<strong>源文件</strong>中保留，编译器会丢弃该注解】；</li><li><strong>RetentionPolicy.CLASS</strong>：（<strong>默认值</strong>）在<strong>class</strong>文件中有效【即在<strong>class</strong>文件中保留，运行程序时，<strong>JVM</strong>会丢弃该注解】；</li><li><strong>RetentionPolicy.RUNTIME</strong>：在<strong>运行时</strong>有效【即在<strong>运行时</strong>也保留，<strong>JVM</strong>会保留注解】；</li></ul><h3 id="Target"><a href="#Target" class="headerlink" title="Target"></a>Target</h3><h4 id="功能-1"><a href="#功能-1" class="headerlink" title="功能"></a>功能</h4><p>用于指定被修饰的<strong>Annotation</strong>可以修饰哪些<strong>程序元素</strong>，<strong>value</strong>成员变量取值：</p><ul><li><strong>CONSTRUCTOR</strong>：构造器；</li><li><strong>FIELD</strong>：描述域；</li><li><strong>LOCAL_VARIABLE</strong>：局部变量；</li><li><strong>METHOD</strong>：方法；</li><li>……</li></ul><h3 id="Documented"><a href="#Documented" class="headerlink" title="Documented"></a>Documented</h3><h4 id="功能-2"><a href="#功能-2" class="headerlink" title="功能"></a>功能</h4><p>指定被修饰的<strong>Annotation类</strong>会被<strong>javadoc</strong>工具提取成<strong>文档</strong>，默认情况下<strong>javadoc</strong>不包含<strong>注解</strong>。</p><h3 id="Inherited"><a href="#Inherited" class="headerlink" title="Inherited"></a>Inherited</h3><h4 id="功能-3"><a href="#功能-3" class="headerlink" title="功能"></a>功能</h4><p>被修饰的<strong>Annotation</strong>将具有<strong>继承性</strong>【被修饰类的<strong>子类</strong>自动具有该注解】</p><h3 id="Repeatable"><a href="#Repeatable" class="headerlink" title="Repeatable"></a>Repeatable</h3><h4 id="功能-4"><a href="#功能-4" class="headerlink" title="功能"></a>功能</h4><p>被修饰的<strong>Annotation</strong>可以重复修饰同一个元素。</p><h2 id="常用注解"><a href="#常用注解" class="headerlink" title="常用注解"></a>常用注解</h2>]]></content>
    
    
    <summary type="html">Java注解的简介。</summary>
    
    
    
    <category term="Java" scheme="https://1.15.86.100/categories/Java/"/>
    
    
    <category term="注解" scheme="https://1.15.86.100/tags/%E6%B3%A8%E8%A7%A3/"/>
    
  </entry>
  
  <entry>
    <title>Java String类</title>
    <link href="https://1.15.86.100/2021/11/10/Java-String%E7%B1%BB/"/>
    <id>https://1.15.86.100/2021/11/10/Java-String%E7%B1%BB/</id>
    <published>2021-11-10T12:25:40.000Z</published>
    <updated>2021-11-11T08:55:46.972Z</updated>
    
    <content type="html"><![CDATA[<h1 id="String"><a href="#String" class="headerlink" title="String"></a>String</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><ul><li>存储<strong>字符串</strong>【不可变，其内部存储为<strong>final char[]</strong>】；</li><li>是一个<strong>final</strong>类，不可以<strong>被继承</strong>；</li><li>实现了<code>java.io.Serializable</code>【可以<strong>序列化</strong>】，<code>Comparable&lt;String&gt;</code>【可以比较】，<code>CharSequence</code>接口；</li></ul><h2 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h2><h3 id="getBytes"><a href="#getBytes" class="headerlink" title="getBytes()"></a>getBytes()</h3><p>转成<strong>字节数组</strong>即<strong>byte[]</strong>，可以指定<strong>编码集</strong>；</p><h2 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h2><h2 id="StringBuffer"><a href="#StringBuffer" class="headerlink" title="StringBuffer"></a>StringBuffer</h2><h3 id="简介-1"><a href="#简介-1" class="headerlink" title="简介"></a>简介</h3><ul><li><strong>可变</strong>的字符序列【内部存储为<strong>char[]</strong>，功能基本相当于<strong>StringBuilder</strong>】；</li><li><strong>线程安全</strong>；</li><li>效率相对<strong>StringBuilder</strong>较<strong>低</strong>；</li></ul><h3 id="常用方法"><a href="#常用方法" class="headerlink" title="常用方法"></a>常用方法</h3><ul><li><strong>append()</strong>：添加<strong>字符</strong>或者<strong>字符串</strong>；</li><li><strong>delete()</strong>：删除指定位置内容；</li><li><strong>replace()</strong>：替换；</li><li><strong>insert()</strong>：插入<strong>字符</strong>；</li><li><strong>reverse()</strong>：<strong>翻转</strong>字符串；</li><li><strong>setCharAt()</strong>：修改指定位置<strong>字符</strong>；</li></ul><h2 id="StringBuilder"><a href="#StringBuilder" class="headerlink" title="StringBuilder"></a>StringBuilder</h2><h3 id="简介-2"><a href="#简介-2" class="headerlink" title="简介"></a>简介</h3><ul><li><strong>可变</strong>的字符序列【内部存储为<strong>char[]</strong>，功能基本相当于<strong>StringBuffer</strong>】；</li><li><strong>线程不安全</strong>；</li><li>效率相对<strong>StringBuilder</strong>较高；</li></ul>]]></content>
    
    
    <summary type="html">Java的String类的介绍。</summary>
    
    
    
    <category term="Java" scheme="https://1.15.86.100/categories/Java/"/>
    
    
    <category term="String" scheme="https://1.15.86.100/tags/String/"/>
    
  </entry>
  
  <entry>
    <title>Java多线程</title>
    <link href="https://1.15.86.100/2021/11/06/Java%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    <id>https://1.15.86.100/2021/11/06/Java%E5%A4%9A%E7%BA%BF%E7%A8%8B/</id>
    <published>2021-11-06T02:19:49.000Z</published>
    <updated>2021-11-24T08:52:16.909Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Java多线程使用"><a href="#Java多线程使用" class="headerlink" title="Java多线程使用"></a>Java多线程使用</h1><h2 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h2><h3 id="方法一【Runnable接口】"><a href="#方法一【Runnable接口】" class="headerlink" title="方法一【Runnable接口】"></a>方法一【Runnable接口】</h3><h4 id="使用步骤"><a href="#使用步骤" class="headerlink" title="使用步骤"></a>使用步骤</h4><ul><li>创建一个实现<strong>Runnable</strong>接口的类；</li><li>实现<strong>Runnable</strong>接口的抽象方法：<strong>run()</strong>；</li><li>创建该类的对象；</li><li>将该对象作为参数传给<strong>Thread</strong>，创建<strong>Thread</strong>对象；</li><li>调用<strong>Thread</strong>对象的<strong>start()</strong>方法；</li></ul><h4 id="示例代码"><a href="#示例代码" class="headerlink" title="示例代码"></a>示例代码</h4><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyThread</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) {</span><br><span class="line">            <span class="keyword">if</span> (i % <span class="number">2</span> == <span class="number">0</span>) {</span><br><span class="line">                System.out.println(Thread.currentThread().getName() + <span class="string">":"</span> + i);</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyTest</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        MyThread myThread = <span class="keyword">new</span> MyThread();</span><br><span class="line">        Thread thread1 = <span class="keyword">new</span> Thread(myThread);</span><br><span class="line">        thread1.setName(<span class="string">"线程一"</span>);</span><br><span class="line">        thread1.start();</span><br><span class="line"></span><br><span class="line">        Thread thread2 = <span class="keyword">new</span> Thread(myThread);</span><br><span class="line">        thread2.setName(<span class="string">"线程二"</span>);</span><br><span class="line">        thread2.start();</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="方法二【继承】"><a href="#方法二【继承】" class="headerlink" title="方法二【继承】"></a>方法二【继承】</h3><h4 id="使用步骤-1"><a href="#使用步骤-1" class="headerlink" title="使用步骤"></a>使用步骤</h4><ul><li>创建一个继承<strong>Thread</strong>的子类；</li><li>重写<strong>Thread</strong>类的<strong>run()</strong>方法；</li><li>创建<strong>Thread</strong>子类对象；</li><li>该类调用<strong>start()</strong>方法；</li></ul><h4 id="示例代码-1"><a href="#示例代码-1" class="headerlink" title="示例代码"></a>示例代码</h4><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyThreadExtends</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) {</span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">":"</span> + i);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ThreadTest</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        MyThreadExtends myThreadExtends1 = <span class="keyword">new</span> MyThreadExtends();</span><br><span class="line">        myThreadExtends1.setName(<span class="string">"线程0"</span>);</span><br><span class="line">        myThreadExtends1.start();</span><br><span class="line">        MyThreadExtends myThreadExtends2 = <span class="keyword">new</span> MyThreadExtends();</span><br><span class="line">        myThreadExtends2.setName(<span class="string">"线程1"</span>);</span><br><span class="line">        myThreadExtends2.start();</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="方法三【Callable接口】"><a href="#方法三【Callable接口】" class="headerlink" title="方法三【Callable接口】"></a>方法三【Callable接口】</h3><h4 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h4><ul><li><strong>call()</strong>方法可以有<strong>返回值</strong>；</li><li><strong>call()</strong>可以<strong>抛出异常</strong>；</li><li><strong>Callable</strong>支持<strong>泛型</strong>【表示返回值类型】；</li></ul><h4 id="使用步骤-2"><a href="#使用步骤-2" class="headerlink" title="使用步骤"></a>使用步骤</h4><ul><li>创建一个<strong>Callable</strong>的实现类；</li><li>实现<strong>call()</strong>方法；</li><li>创建<strong>Callable</strong>实现类的对象；</li><li>创建<strong>FutureTask</strong>对象（用实现类作为参数）；</li><li>创建<strong>Thread</strong>对象（用<strong>FutureTask</strong>对象作为参数）；</li><li>调用<strong>Thread</strong>的<strong>start()</strong>方法；</li></ul><h4 id="示例代码-2"><a href="#示例代码-2" class="headerlink" title="示例代码"></a>示例代码</h4><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ThreadCall</span> <span class="keyword">implements</span> <span class="title">Callable</span></span>{</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">call</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>{</span><br><span class="line">        <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &amp;lt;= <span class="number">100</span>; i++) {</span><br><span class="line">            <span class="keyword">if</span> (i % <span class="number">2</span> == <span class="number">0</span>) {</span><br><span class="line">                System.out.println(i);</span><br><span class="line">                sum += i;</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> sum;</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ThreadCallTest</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        ThreadCall threadCall = <span class="keyword">new</span> ThreadCall();</span><br><span class="line"></span><br><span class="line">        FutureTask futureTask = <span class="keyword">new</span> FutureTask(threadCall);</span><br><span class="line">    </span><br><span class="line">        <span class="keyword">new</span> Thread(futureTask).start();</span><br><span class="line">    </span><br><span class="line">        <span class="keyword">try</span> {</span><br><span class="line">            Object sum = futureTask.get();</span><br><span class="line">            System.out.println(sum);</span><br><span class="line">        } <span class="keyword">catch</span> (InterruptedException e) {</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        } <span class="keyword">catch</span> (ExecutionException e) {</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h4 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h4><ul><li><strong>Callable.get()</strong>方法需要等待线程结果，可能会<strong>阻塞</strong>；</li><li>一个<strong>FutrueTask</strong>对象只能<strong>执行一次</strong>；</li></ul><h3 id="方法四【线程池】"><a href="#方法四【线程池】" class="headerlink" title="方法四【线程池】"></a>方法四【线程池】</h3><h4 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h4><ul><li>提高响应速度；</li><li>降低资源消耗；</li><li>便于线程管理；</li></ul><h4 id="使用步骤-3"><a href="#使用步骤-3" class="headerlink" title="使用步骤"></a>使用步骤</h4><ul><li>创建线程池；</li><li>执行线程；</li></ul><h4 id="Executors-API"><a href="#Executors-API" class="headerlink" title="Executors-API"></a>Executors-API</h4><p><strong>Executors</strong>创建线程本质是创建<strong>ThreadPoolExecutor</strong>实现。</p><ul><li><strong>Executors.newFixedThreadPool()</strong>：创建固定大小的线程池；</li><li><strong>Executors.newCachedThreadPool()</strong>：创建可变大小的线程池；</li><li><strong>Executors.newSingleThreadExecutor()</strong>：创建单个线程的线程池；</li></ul><h4 id="示例代码【Executors创建】"><a href="#示例代码【Executors创建】" class="headerlink" title="示例代码【Executors创建】"></a>示例代码【Executors创建】</h4><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ThreadPoolNumber</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>{</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">100</span>; i++) {</span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">":"</span> + i);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ThreadPool</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        ThreadPoolExecutor executorService = (ThreadPoolExecutor)Executors.newFixedThreadPool(<span class="number">10</span>);</span><br><span class="line">        executorService.execute(<span class="keyword">new</span> ThreadPoolNumber()); <span class="comment">// Runnable</span></span><br><span class="line">        executorService.execute(<span class="keyword">new</span> ThreadPoolNumber()); <span class="comment">// Runnable</span></span><br><span class="line">        executorService.shutdown(); <span class="comment">// 关闭线程池</span></span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h4 id="ThreadPoolExecutor"><a href="#ThreadPoolExecutor" class="headerlink" title="ThreadPoolExecutor"></a>ThreadPoolExecutor</h4><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ThreadPoolExecutor</span><span class="params">(<span class="keyword">int</span> corePoolSize, // 核心线程池大小</span></span></span><br><span class="line"><span class="function"><span class="params">                          <span class="keyword">int</span> maximumPoolSize, // 最大核心线程池大小</span></span></span><br><span class="line"><span class="function"><span class="params">                          <span class="keyword">long</span> keepAliveTime,  // 超时释放时间</span></span></span><br><span class="line"><span class="function"><span class="params">                          TimeUnit unit, // 超时单位</span></span></span><br><span class="line"><span class="function"><span class="params">                          BlockingQueue&lt;Runnable&gt; workQueue,  // 阻塞队列</span></span></span><br><span class="line"><span class="function"><span class="params">                          ThreadFactory threadFactory,  // 线程工厂，创建线程</span></span></span><br><span class="line"><span class="function"><span class="params">                          RejectedExecutionHandler handler)</span> <span class="comment">// 拒绝策略</span></span></span><br></pre></td></tr></tbody></table></figure><h4 id="示例代码【ThreadPoolExecutor创建】"><a href="#示例代码【ThreadPoolExecutor创建】" class="headerlink" title="示例代码【ThreadPoolExecutor创建】"></a>示例代码【ThreadPoolExecutor创建】</h4><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">    ExecutorService threadPool = <span class="keyword">new</span> ThreadPoolExecutor(</span><br><span class="line">        <span class="number">2</span>,</span><br><span class="line">        <span class="number">5</span>,</span><br><span class="line">        <span class="number">3</span>, TimeUnit.SECONDS,</span><br><span class="line">        <span class="keyword">new</span> LinkedBlockingQueue&lt;&gt;(<span class="number">3</span>),</span><br><span class="line">        Executors.defaultThreadFactory(),</span><br><span class="line">        <span class="keyword">new</span> ThreadPoolExecutor.AbortPolicy()</span><br><span class="line">    );</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) {</span><br><span class="line">        threadPool.execute(() -&gt; {</span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">" OK"</span>);</span><br><span class="line">        });</span><br><span class="line">    }</span><br><span class="line">    threadPool.shutdown();</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h4 id="拒绝策略"><a href="#拒绝策略" class="headerlink" title="拒绝策略"></a>拒绝策略</h4><ul><li><strong>AbortPolicy</strong>：队列满了，不处理，抛出异常【默认】；</li><li><strong>CallerRunsPolicy</strong>：队列满了，交给<strong>main</strong>线程处理；</li><li><strong>DiscardPolicy</strong>：队列满了，不处理，不会抛出异常；</li><li><strong>DiscardOldestPolicy</strong>：队列满了，尝试竞争，竞争失败就抛弃；</li></ul><h2 id="Java线程细节"><a href="#Java线程细节" class="headerlink" title="Java线程细节"></a>Java线程细节</h2><h3 id="Java线程状态"><a href="#Java线程状态" class="headerlink" title="Java线程状态"></a>Java线程状态</h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">enum</span> <span class="title">State</span> </span>{</span><br><span class="line">    NEW,</span><br><span class="line">    RUNNABLE,</span><br><span class="line">    BLOCKED,</span><br><span class="line">    WAITING,</span><br><span class="line">    TIMED_WAITING,</span><br><span class="line">    TERMINATED;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="线程同步"><a href="#线程同步" class="headerlink" title="线程同步"></a>线程同步</h2><h3 id="同步代码块【synchronized】"><a href="#同步代码块【synchronized】" class="headerlink" title="同步代码块【synchronized】"></a>同步代码块【synchronized】</h3><h4 id="特点-1"><a href="#特点-1" class="headerlink" title="特点"></a>特点</h4><ul><li>可重入锁【可以<strong>重复获取</strong>同一个锁而<strong>不会出现死锁</strong>（例如，<strong>synchronized</strong>代码块的<strong>嵌套</strong>）】；</li><li>不可以中断【等待获取锁的时候不可中断，拿到锁之后可中断；没获取到锁的情况下，中断操作一直不会生效直到<strong>获取锁之后中断发生</strong>】；</li><li>非公平；</li></ul><h4 id="使用步骤-4"><a href="#使用步骤-4" class="headerlink" title="使用步骤"></a>使用步骤</h4><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">synchronized</span>(监视类){</span><br><span class="line">    同步代码块（每次仅允许一个线程进入）</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyThread</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>{</span><br><span class="line">    Object object = <span class="keyword">new</span> Object();</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> ticket = <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) {</span><br><span class="line">            <span class="keyword">synchronized</span> (object) {</span><br><span class="line">                <span class="keyword">if</span> (ticket &gt; <span class="number">0</span>) {</span><br><span class="line">                    <span class="keyword">try</span> {</span><br><span class="line">                        Thread.sleep(<span class="number">100</span>);</span><br><span class="line">                    } <span class="keyword">catch</span> (InterruptedException e) {</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    }</span><br><span class="line"></span><br><span class="line">                    System.out.println(Thread.currentThread().getName() + <span class="string">" : "</span> + ticket);</span><br><span class="line">                    ticket--;</span><br><span class="line">                } <span class="keyword">else</span> {</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="同步方法"><a href="#同步方法" class="headerlink" title="同步方法"></a>同步方法</h3><h4 id="使用步骤【synchronized】"><a href="#使用步骤【synchronized】" class="headerlink" title="使用步骤【synchronized】"></a>使用步骤【synchronized】</h4><p>在<strong>方法声明</strong>前面添加<strong>synchronized</strong>关键字。</p><ul><li>实现<strong>Runnable</strong>接口方式：直接添加关键字；</li><li>继承<strong>Thread</strong>方式：需要设置该方法为<strong>静态方法</strong>；</li></ul><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyThreadMethod</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>{</span><br><span class="line">    Object object = <span class="keyword">new</span> Object();</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> ticket = <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) {</span><br><span class="line">            <span class="keyword">if</span> (!getTicket()) {</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">boolean</span> <span class="title">getTicket</span> <span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">if</span> (ticket &gt; <span class="number">0</span>) {</span><br><span class="line">            <span class="keyword">try</span> {</span><br><span class="line">                Thread.sleep(<span class="number">100</span>);</span><br><span class="line">            } <span class="keyword">catch</span> (InterruptedException e) {</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            }</span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">" : "</span> + ticket);</span><br><span class="line">            ticket--;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        } <span class="keyword">else</span> {</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="Lock锁🔒"><a href="#Lock锁🔒" class="headerlink" title="Lock锁🔒"></a>Lock锁🔒</h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LockTicket</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> ticket = <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> ReentrantLock lock = <span class="keyword">new</span> ReentrantLock();</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) {</span><br><span class="line">            <span class="comment">// 调用lock方法</span></span><br><span class="line">            lock.lock();</span><br><span class="line">            <span class="keyword">try</span> {                </span><br><span class="line">                <span class="keyword">if</span> (ticket &gt; <span class="number">0</span>) {</span><br><span class="line">                    <span class="keyword">try</span> {</span><br><span class="line">                        Thread.sleep(<span class="number">100</span>);</span><br><span class="line">                    } <span class="keyword">catch</span> (InterruptedException e) {</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    }</span><br><span class="line">                    System.out.println(Thread.currentThread().getName() + <span class="string">":"</span> + ticket);</span><br><span class="line">                    ticket--;</span><br><span class="line">                } <span class="keyword">else</span> {</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                }</span><br><span class="line">            } <span class="keyword">finally</span> {</span><br><span class="line">                <span class="comment">// 调用unlock</span></span><br><span class="line">                lock.unlock();</span><br><span class="line">            }</span><br><span class="line"></span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h4 id="注意事项-1"><a href="#注意事项-1" class="headerlink" title="注意事项"></a>注意事项</h4><h4 id="Synchronized-和-Lock-区别"><a href="#Synchronized-和-Lock-区别" class="headerlink" title="Synchronized 和 Lock 区别"></a>Synchronized 和 Lock 区别</h4><ul><li><p><strong>Synchronized</strong>是内置的<strong>Java关键字</strong>，<strong>Lock</strong>是<strong>Java类</strong>；</p></li><li><p><strong>Synchronized</strong>无法判断<strong>锁的状态</strong>，<strong>Lock</strong>可以判断<strong>是否获取到了锁</strong>；</p></li><li><p><strong>Synchronized</strong>可以<strong>自动释放锁</strong>，<strong>Lock</strong>必须<strong>手动释放</strong>；</p></li></ul><h2 id="线程通信"><a href="#线程通信" class="headerlink" title="线程通信"></a>线程通信</h2><h3 id="普通方法"><a href="#普通方法" class="headerlink" title="普通方法"></a>普通方法</h3><p>该三个方法必须在<strong>同步代码块</strong>中使用；三个方法的调用者必须是<strong>同步代码块</strong>或者<strong>同步方法</strong>中的<strong>同步监视器</strong>。</p><ul><li><strong>wait()</strong>：该方法可以使线程进入阻塞状态；</li><li><strong>notify()</strong>：唤醒一个进程；</li><li><strong>notifyAll()</strong>：唤醒所有进程；</li></ul><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Number</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>{</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> number = <span class="number">1</span>;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">while</span>(<span class="keyword">true</span>) {</span><br><span class="line">            <span class="keyword">synchronized</span> (<span class="keyword">this</span>) {</span><br><span class="line">                <span class="keyword">if</span> (number &lt;= <span class="number">100</span>) {</span><br><span class="line">                    System.out.println(Thread.currentThread().getName() + <span class="string">":"</span> + number);</span><br><span class="line">                    number++;</span><br><span class="line">                    notify();</span><br><span class="line">                    <span class="keyword">try</span> {</span><br><span class="line">                        wait();</span><br><span class="line">                    } <span class="keyword">catch</span> (InterruptedException e) {</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    }</span><br><span class="line"></span><br><span class="line">                } <span class="keyword">else</span> {</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="JUC方法"><a href="#JUC方法" class="headerlink" title="JUC方法"></a>JUC方法</h3><ul><li><strong>Condition.await()</strong>：该方法可以使线程进入阻塞状态；</li><li><strong>Condition.signalAll()</strong>：唤醒所有进程；</li></ul><h4 id="代码示例"><a href="#代码示例" class="headerlink" title="代码示例"></a>代码示例</h4><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Data</span></span>{</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> number = <span class="number">0</span>;</span><br><span class="line">    Lock lock = <span class="keyword">new</span> ReentrantLock();</span><br><span class="line">    Condition condition = lock.newCondition();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">increment</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>{</span><br><span class="line">        lock.lock();</span><br><span class="line">        <span class="keyword">try</span> {</span><br><span class="line">            <span class="keyword">while</span> (number != <span class="number">0</span>) {</span><br><span class="line">                condition.await();</span><br><span class="line">            }</span><br><span class="line">            number++;</span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">"=&gt;"</span> + number);</span><br><span class="line">            condition.signalAll();</span><br><span class="line">        } <span class="keyword">catch</span> (Exception e) {</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        } <span class="keyword">finally</span> {</span><br><span class="line">            lock.unlock();</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">decrement</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>{</span><br><span class="line">        lock.lock();</span><br><span class="line">        <span class="keyword">try</span> {</span><br><span class="line">            <span class="keyword">while</span> (number == <span class="number">0</span>) {</span><br><span class="line">                condition.await();</span><br><span class="line">            }</span><br><span class="line">            number--;</span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">"=&gt;"</span> + number);</span><br><span class="line">            condition.signalAll();</span><br><span class="line">        } <span class="keyword">catch</span> (Exception e) {</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        } <span class="keyword">finally</span> {</span><br><span class="line">            lock.unlock();</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="注意事项-2"><a href="#注意事项-2" class="headerlink" title="注意事项"></a>注意事项</h3><h4 id="虚假唤醒问题"><a href="#虚假唤醒问题" class="headerlink" title="虚假唤醒问题"></a>虚假唤醒问题</h4><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (number == <span class="number">0</span>) {</span><br><span class="line">    wait();</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>如果使用<strong>if</strong>，有可能<strong>唤醒</strong>的线程任不满足条件，所以最好使用<strong>while</strong>；</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> (number == <span class="number">0</span>) {</span><br><span class="line">    wait();</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="JUC常用辅助类"><a href="#JUC常用辅助类" class="headerlink" title="JUC常用辅助类"></a>JUC常用辅助类</h2><h3 id="CountDownLatch"><a href="#CountDownLatch" class="headerlink" title="CountDownLatch"></a>CountDownLatch</h3><p>等待<strong>计算器</strong>归零再执行。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JUCCountDownLatch</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>{</span><br><span class="line">        CountDownLatch countDownLatch = <span class="keyword">new</span> CountDownLatch(<span class="number">6</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">6</span>; i++) {</span><br><span class="line">            <span class="keyword">new</span> Thread(()-&gt;{</span><br><span class="line">                System.out.println(Thread.currentThread().getName() + <span class="string">" Go out"</span>);</span><br><span class="line">                countDownLatch.countDown();</span><br><span class="line">            }, String.valueOf(i)).start();</span><br><span class="line">        }</span><br><span class="line">        countDownLatch.await();</span><br><span class="line">        System.out.println(<span class="string">"Close Door"</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="CyclicBarrier"><a href="#CyclicBarrier" class="headerlink" title="CyclicBarrier"></a>CyclicBarrier</h3><p>等待指定个数个线程结束，指定执行某个线程。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">    CyclicBarrier cyclicBarrier = <span class="keyword">new</span> CyclicBarrier(<span class="number">7</span>, ()-&gt;{</span><br><span class="line">        System.out.println(<span class="string">"召唤神龙成功"</span>);</span><br><span class="line">    });</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">7</span>; i++) {</span><br><span class="line">        <span class="keyword">new</span> Thread(()-&gt;{</span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">" Get"</span>);</span><br><span class="line">            <span class="keyword">try</span> {</span><br><span class="line">                cyclicBarrier.await();</span><br><span class="line">            } <span class="keyword">catch</span> (InterruptedException e) {</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            } <span class="keyword">catch</span> (BrokenBarrierException e) {</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            }</span><br><span class="line">        }, String.valueOf(i)).start();</span><br><span class="line">    }</span><br><span class="line">    System.out.println(<span class="string">"Close Door"</span>);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="Semaphore"><a href="#Semaphore" class="headerlink" title="Semaphore"></a>Semaphore</h3><p>信号量。</p><ul><li><strong>Semaphore.acquire()</strong>：获得信号量，如果满了就等待；</li><li><strong>Semaphore.release()</strong>：释放信号量，会将当前信号量加一，然后唤醒等待线程；</li></ul><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">    <span class="comment">// 线程数量</span></span><br><span class="line">    Semaphore semaphore = <span class="keyword">new</span> Semaphore(<span class="number">3</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">6</span>; i++) {</span><br><span class="line">        <span class="keyword">new</span> Thread(()-&gt;{</span><br><span class="line">            <span class="keyword">try</span> {</span><br><span class="line">                semaphore.acquire();</span><br><span class="line">                System.out.println(Thread.currentThread().getName() + <span class="string">"抢到车位"</span>);</span><br><span class="line">                TimeUnit.SECONDS.sleep(<span class="number">2</span>);</span><br><span class="line">                System.out.println(Thread.currentThread().getName() + <span class="string">"离开车位"</span>);</span><br><span class="line">            } <span class="keyword">catch</span> (InterruptedException e) {</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            } <span class="keyword">finally</span> {</span><br><span class="line">                semaphore.release();</span><br><span class="line">            }</span><br><span class="line">        }, String.valueOf(i)).start();</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="JUC常用锁"><a href="#JUC常用锁" class="headerlink" title="JUC常用锁"></a>JUC常用锁</h2><h2 id="线程安全"><a href="#线程安全" class="headerlink" title="线程安全"></a>线程安全</h2><h3 id="线程安全的List"><a href="#线程安全的List" class="headerlink" title="线程安全的List"></a>线程安全的List</h3><h4 id="java-util-Vector"><a href="#java-util-Vector" class="headerlink" title="java.util.Vector"></a>java.util.Vector</h4><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Vector&lt;Integer&gt; list = <span class="keyword">new</span> Vector&lt;&gt;();</span><br></pre></td></tr></tbody></table></figure><h4 id="java-util-concurrent-CopyOnWriteArrayList"><a href="#java-util-concurrent-CopyOnWriteArrayList" class="headerlink" title="java.util.concurrent.CopyOnWriteArrayList"></a>java.util.concurrent.CopyOnWriteArrayList</h4><p><strong>写入时复制</strong></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CopyOnWriteArrayList&lt;Integer&gt; list = <span class="keyword">new</span> CopyOnWriteArrayList&lt;&gt;();</span><br></pre></td></tr></tbody></table></figure><h4 id="java-util-Collections-synchronizedList"><a href="#java-util-Collections-synchronizedList" class="headerlink" title="java.util.Collections.synchronizedList()"></a>java.util.Collections.synchronizedList()</h4><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">List&lt;Integer&gt; list = Collections.synchronizedList(<span class="keyword">new</span> ArrayList&lt;&gt;());</span><br></pre></td></tr></tbody></table></figure><h2 id="阻塞队列"><a href="#阻塞队列" class="headerlink" title="阻塞队列"></a>阻塞队列</h2><h3 id="API"><a href="#API" class="headerlink" title="API"></a>API</h3><div class="table-container"><table><thead><tr><th>方式</th><th>抛出异常</th><th>有返回值，不抛异常</th><th>阻塞等待</th><th>超时等待</th></tr></thead><tbody><tr><td><strong>添加</strong></td><td>add()</td><td>offer()</td><td>put()</td><td>offer()</td></tr><tr><td><strong>删除</strong></td><td>remove()</td><td>poll()</td><td>take()</td><td>poll()</td></tr><tr><td><strong>返回队首元素</strong></td><td>element()</td><td>peek()</td><td>-</td><td>-</td></tr></tbody></table></div><h3 id="SynchronousQueue"><a href="#SynchronousQueue" class="headerlink" title="SynchronousQueue"></a>SynchronousQueue</h3><p>只存储一个元素。</p><h2 id="注意事项-3"><a href="#注意事项-3" class="headerlink" title="注意事项"></a>注意事项</h2><h3 id="sleep-和wait"><a href="#sleep-和wait" class="headerlink" title="sleep()和wait()"></a>sleep()和wait()</h3><ul><li><p><strong>相同点</strong>：执行方法，都可以使得当前进程进入<strong>阻塞</strong>状态；</p></li><li><p><strong>不同点</strong>：</p><ul><li>两个方法声明位置不同：<strong>sleep()</strong>声明在<strong>Thread</strong>类中；<strong>wait()</strong>声明在<strong>Object</strong>类中；</li><li>调用要求不同：<strong>sleep()</strong>可以在任何时候调用；<strong>wait()</strong>必须在<strong>同步代码块</strong>或<strong>同步方法</strong>中调用；</li><li>是否释放<strong>同步监视器</strong>：如果两个方法都使用在<strong>同步代码块</strong>或者<strong>同步方法</strong>中，<strong>sleep()</strong>不会释放锁；<strong>wait()</strong>会释放锁；</li></ul></li></ul>]]></content>
    
    
    <summary type="html">Java多线程的使用方法。</summary>
    
    
    
    <category term="Java" scheme="https://1.15.86.100/categories/Java/"/>
    
    
    <category term="多线程" scheme="https://1.15.86.100/tags/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>java.util.ArrayList详解</title>
    <link href="https://1.15.86.100/2021/11/01/java-util-ArrayList%E8%AF%A6%E8%A7%A3/"/>
    <id>https://1.15.86.100/2021/11/01/java-util-ArrayList%E8%AF%A6%E8%A7%A3/</id>
    <published>2021-11-01T07:52:16.000Z</published>
    <updated>2021-11-01T09:00:33.492Z</updated>
    
    <content type="html"><![CDATA[<h1 id="java-util-ArrayList"><a href="#java-util-ArrayList" class="headerlink" title="java.util.ArrayList"></a>java.util.ArrayList</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p><strong>可变长度</strong>的数组<strong>ArrayList</strong>，继承了<strong>AbstractList</strong>类，实现了<strong>List\<e\></e\></strong>，<strong>RandomAccess</strong>，<strong>Cloneable</strong>，j<strong>ava.io.Serializable</strong>等接口。</p><p>其方法<strong>size</strong>，<strong>isEmpty</strong>，<strong>get</strong>，<strong>set</strong>，<strong>iterator</strong>，和<strong>listIterator</strong>需要 <script type="math/tex">O(1)</script> 时间，其方法<strong>add</strong>消耗<strong>摊还常量时间（amortized constant time）</strong>，其他所有操作需要 <script type="math/tex">O(n)</script> 时间。</p><h2 id="详解"><a href="#详解" class="headerlink" title="详解"></a>详解</h2><h3 id="grow"><a href="#grow" class="headerlink" title="grow"></a>grow</h3><p>该函数主要用户扩展<strong>ArrayList</strong>的容量，使其至少能容纳<strong>minCapacity</strong>个数据。其代码如下：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> Object[] grow(<span class="keyword">int</span> minCapacity) {</span><br><span class="line">    <span class="keyword">int</span> oldCapacity = elementData.length;</span><br><span class="line">    <span class="keyword">if</span> (oldCapacity &gt; <span class="number">0</span> || elementData != DEFAULTCAPACITY_EMPTY_ELEMENTDATA)</span><br><span class="line">        <span class="comment">// 如果elementData已初始化且包含数据，则重新创建数据并拷贝原数据。</span></span><br><span class="line">        <span class="keyword">int</span> newCapacity = ArraysSupport.newLength(oldCapacity,</span><br><span class="line">                                                  minCapacity - oldCapacity, <span class="comment">/* minimum growth */</span></span><br><span class="line">                                                  oldCapacity &gt;&gt; <span class="number">1</span>           <span class="comment">/* preferred growth */</span>);</span><br><span class="line">    <span class="comment">// 新的数组长度为 max(minCapacity, oldCapacity + oldCapacity &gt;&gt; 1)</span></span><br><span class="line">    <span class="comment">// 如果新的数组长度超过 ArraysSupport.MAX_ARRAY_LENGTH(Integer.MAX_VALUE - 8)</span></span><br><span class="line">    <span class="comment">// 则直接返回 ArraysSupport.MAX_ARRAY_LENGTH</span></span><br><span class="line">    </span><br><span class="line">        <span class="keyword">return</span> elementData = Arrays.copyOf(elementData, newCapacity);</span><br><span class="line">    <span class="comment">// 先创建长度为 newCapacity 的数组</span></span><br><span class="line">    <span class="comment">// 如果 elementData 中元素为Object，则直接 new Object[newCapacity] 生成新的数组；</span></span><br><span class="line">    <span class="comment">// 否则 调用 Arrays.newArray （该函数实现使用了高效的底层指令）创建数组元素</span></span><br><span class="line">    <span class="comment">// 然后调用 java.lang.System.arraycopy（该函数实现使用了高效的底层指令）将数据从原数字拷贝至新的数据</span></span><br><span class="line">    } <span class="keyword">else</span> {</span><br><span class="line">    <span class="comment">// 如果elementData未初始化或者为空，则直接重新创建数组。</span></span><br><span class="line">        <span class="keyword">return</span> elementData = <span class="keyword">new</span> Object[Math.max(DEFAULT_CAPACITY, minCapacity)];</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="ensureCapacity"><a href="#ensureCapacity" class="headerlink" title="ensureCapacity"></a>ensureCapacity</h3><p>公开方法，具体调用<strong>grow</strong>实现。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ensureCapacity</span><span class="params">(<span class="keyword">int</span> minCapacity)</span> </span>{</span><br><span class="line">    <span class="keyword">if</span> (minCapacity &gt; elementData.length</span><br><span class="line">        &amp;&amp; !(elementData == DEFAULTCAPACITY_EMPTY_ELEMENTDATA</span><br><span class="line">             &amp;&amp; minCapacity &lt;= DEFAULT_CAPACITY)) {</span><br><span class="line">        modCount++;<span class="comment">// 容量修改计数</span></span><br><span class="line">        grow(minCapacity);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="contains"><a href="#contains" class="headerlink" title="contains"></a>contains</h3><p>调用<strong>indexOf</strong>实现，<strong>遍历查找</strong>，代码如下：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">contains</span><span class="params">(Object o)</span> </span>{</span><br><span class="line">    <span class="keyword">return</span> indexOf(o) &gt;= <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="indexOf"><a href="#indexOf" class="headerlink" title="indexOf"></a>indexOf</h3><p>调用<strong>indexOfRange</strong>实现。</p><h3 id="indexOfRange"><a href="#indexOfRange" class="headerlink" title="indexOfRange"></a>indexOfRange</h3><p>从<strong>start</strong>到<strong>end（不包括）</strong>，查找<strong>o</strong>元素，并返回<strong>index</strong>。源代码直接<strong>遍历查找</strong>，代码如下：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">indexOfRange</span><span class="params">(Object o, <span class="keyword">int</span> start, <span class="keyword">int</span> end)</span> </span>{</span><br><span class="line">    Object[] es = elementData;</span><br><span class="line">    <span class="keyword">if</span> (o == <span class="keyword">null</span>) {</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = start; i &lt; end; i++) {</span><br><span class="line">            <span class="keyword">if</span> (es[i] == <span class="keyword">null</span>) {</span><br><span class="line">                <span class="keyword">return</span> i;</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    } <span class="keyword">else</span> {</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = start; i &lt; end; i++) {</span><br><span class="line">            <span class="keyword">if</span> (o.equals(es[i])) {</span><br><span class="line">                <span class="keyword">return</span> i;</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="lastIndexOfRange"><a href="#lastIndexOfRange" class="headerlink" title="lastIndexOfRange"></a>lastIndexOfRange</h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">lastIndexOfRange</span><span class="params">(Object o, <span class="keyword">int</span> start, <span class="keyword">int</span> end)</span> </span>{</span><br><span class="line">    Object[] es = elementData;</span><br><span class="line">    <span class="keyword">if</span> (o == <span class="keyword">null</span>) {</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = end - <span class="number">1</span>; i &gt;= start; i--) {</span><br><span class="line">            <span class="keyword">if</span> (es[i] == <span class="keyword">null</span>) {</span><br><span class="line">                <span class="keyword">return</span> i;</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    } <span class="keyword">else</span> {</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = end - <span class="number">1</span>; i &gt;= start; i--) {</span><br><span class="line">            <span class="keyword">if</span> (o.equals(es[i])) {</span><br><span class="line">                <span class="keyword">return</span> i;</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="lastIndexOf"><a href="#lastIndexOf" class="headerlink" title="lastIndexOf"></a>lastIndexOf</h3><p>调用<strong>lastIndexOfRange</strong>。</p><h3 id="lastIndexOfRange-1"><a href="#lastIndexOfRange-1" class="headerlink" title="lastIndexOfRange"></a>lastIndexOfRange</h3><p>基本同<strong>indexOfRange</strong>，从后往前遍历。</p><h3 id="clone"><a href="#clone" class="headerlink" title="clone"></a>clone</h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">clone</span><span class="params">()</span> </span>{</span><br><span class="line">    <span class="keyword">try</span> {</span><br><span class="line">        ArrayList&lt;?&gt; v = (ArrayList&lt;?&gt;) <span class="keyword">super</span>.clone();</span><br><span class="line">        <span class="comment">// super.clone() （该函数实现使用了高效的底层指令）,克隆类的信息</span></span><br><span class="line">        v.elementData = Arrays.copyOf(elementData, size);</span><br><span class="line">        <span class="comment">// 创建已经存储数据数量的数组，并拷贝数据</span></span><br><span class="line">        v.modCount = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">return</span> v;</span><br><span class="line">    } <span class="keyword">catch</span> (CloneNotSupportedException e) {</span><br><span class="line">        <span class="comment">// this shouldn't happen, since we are Cloneable</span></span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> InternalError(e);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="toArray"><a href="#toArray" class="headerlink" title="toArray"></a>toArray</h3><p>生成并拷贝新的数组（修改不对原数据产生影响）。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> Object[] toArray() {</span><br><span class="line">    <span class="keyword">return</span> Arrays.copyOf(elementData, size);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>]]></content>
    
    
    <summary type="html">java.util.ArrayList类的源码详解。</summary>
    
    
    
    <category term="java" scheme="https://1.15.86.100/categories/java/"/>
    
    
  </entry>
  
  <entry>
    <title>用NumPy搭建简单神经网络</title>
    <link href="https://1.15.86.100/2021/11/01/%E7%94%A8NumPy%E6%90%AD%E5%BB%BA%E7%AE%80%E5%8D%95%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/"/>
    <id>https://1.15.86.100/2021/11/01/%E7%94%A8NumPy%E6%90%AD%E5%BB%BA%E7%AE%80%E5%8D%95%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/</id>
    <published>2021-11-01T04:59:34.000Z</published>
    <updated>2021-11-01T05:44:26.324Z</updated>
    
    <content type="html"><![CDATA[<h1 id="用NumPy搭建简单神经网络"><a href="#用NumPy搭建简单神经网络" class="headerlink" title="用NumPy搭建简单神经网络"></a>用NumPy搭建简单神经网络</h1><h2 id="模型代码"><a href="#模型代码" class="headerlink" title="模型代码"></a>模型代码</h2><h3 id="公共父类"><a href="#公共父类" class="headerlink" title="公共父类"></a>公共父类</h3><p>后面所有类都需要继承该类，并实现其方法。</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> abc <span class="keyword">import</span> abstractmethod</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Module</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>) -&gt; <span class="literal">None</span>:</span></span><br><span class="line">        <span class="built_in">super</span>(Module, self).__init__()</span><br><span class="line">    </span><br><span class="line"><span class="meta">    @abstractmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">forward</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__call__</span>(<span class="params">self, *args, **kwds</span>):</span></span><br><span class="line">        <span class="keyword">return</span> self.forward(*args, **kwds)</span><br></pre></td></tr></tbody></table></figure><h3 id="全链接层"><a href="#全链接层" class="headerlink" title="全链接层"></a>全链接层</h3><h4 id="数学推导："><a href="#数学推导：" class="headerlink" title="数学推导："></a>数学推导：</h4><ul><li><p><strong>前向传播</strong>公式：</p><script type="math/tex; mode=display">Y_{n\times q}=X_{n\times p} \cdot W_{p\times q} + b_{1\times q}</script></li><li><p><strong>反向传播</strong>公式：</p><script type="math/tex; mode=display">\frac{\partial Y}{\partial X_{n\times p}}=Y\cdot W^T</script><script type="math/tex; mode=display">\frac{\partial Y}{\partial W_{p\times q}}=X^T\cdot Y</script><script type="math/tex; mode=display">\frac{\partial Y}{\partial b_{1\times q}}=1_{1\times q}</script></li></ul><h4 id="代码实现："><a href="#代码实现：" class="headerlink" title="代码实现："></a>代码实现：</h4><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Linear</span>(<span class="params">Module</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, in_features, out_features, bias=<span class="literal">False</span></span>) -&gt; <span class="literal">None</span>:</span></span><br><span class="line">        <span class="built_in">super</span>(Linear, self).__init__()</span><br><span class="line">        self.W = np.random.normal(size=(in_features, out_features))</span><br><span class="line">        self.X = <span class="literal">None</span></span><br><span class="line">        self.bias = <span class="literal">None</span></span><br><span class="line">        <span class="keyword">if</span> bias:</span><br><span class="line">            self.bias = np.random.normal(size=(out_features))</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">forward</span>(<span class="params">self, X</span>):</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        X: (batch_size, hidden_size)</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        self.X = X</span><br><span class="line">        Y = np.dot(X, self.W)</span><br><span class="line">        <span class="keyword">if</span> self.bias <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">            Y = Y + self.bias</span><br><span class="line">        <span class="keyword">return</span> Y</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">backward</span>(<span class="params">self, delta_Y, lr</span>):</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        delta_Y: (batch_size, output_size)</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        delta_Y_ = np.dot(delta_Y, self.W.transpose())</span><br><span class="line">        self.W = self.W - np.dot(self.X.transpose(), delta_Y) * lr</span><br><span class="line">        <span class="keyword">if</span> self.bias <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">            self.bias -= np.average(delta_Y, axis=<span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> delta_Y_</span><br></pre></td></tr></tbody></table></figure><h3 id="tanh激活函数层"><a href="#tanh激活函数层" class="headerlink" title="tanh激活函数层"></a>tanh激活函数层</h3><h4 id="数学推导：-1"><a href="#数学推导：-1" class="headerlink" title="数学推导："></a>数学推导：</h4><ul><li><p><strong>前向传播</strong>公式：</p><script type="math/tex; mode=display">Y_{n\times m}=\frac{e^{X_{n\times m}}-e^{-X_{n\times m}}}{e^{X_{n\times m}}+e^{-X_{n\times m}}}</script></li><li><p><strong>反向传播</strong>公式：</p><script type="math/tex; mode=display">\frac{\partial Y}{\partial X_{n\times m}}=1-\mathrm{tanh}(X_{n\times m})^2</script></li></ul><h4 id="代码实现：-1"><a href="#代码实现：-1" class="headerlink" title="代码实现："></a>代码实现：</h4><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Tanh</span>(<span class="params">Module</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>) -&gt; <span class="literal">None</span>:</span></span><br><span class="line">        <span class="built_in">super</span>(Tanh, self).__init__()</span><br><span class="line">        self.Y = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">forward</span>(<span class="params">self, X</span>):</span></span><br><span class="line">        self.Y = np.tanh(X)</span><br><span class="line">        <span class="keyword">return</span> self.Y</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">backward</span>(<span class="params">self, delta_Y</span>):</span></span><br><span class="line">        <span class="keyword">return</span> np.multiply((<span class="number">1</span> - self.Y ** <span class="number">2</span>), delta_Y)</span><br></pre></td></tr></tbody></table></figure><h3 id="Softmax层"><a href="#Softmax层" class="headerlink" title="Softmax层"></a>Softmax层</h3><h4 id="数学推导：-2"><a href="#数学推导：-2" class="headerlink" title="数学推导："></a>数学推导：</h4><ul><li><p><strong>前向传播</strong>公式：</p><script type="math/tex; mode=display">Y_{i,j}=\frac{e^{X_{i,j}}}{\sum_{j=1}^m e^{X_{i,j}}}</script></li><li><p><strong>反向传播</strong>公式：</p><script type="math/tex; mode=display">\frac{\partial Y}{\partial X_{i,j}}=\sum_{k\ne j}-Y_{i,k}\cdot Y_{i,j}+Y_{i,j}\cdot(1-Y_{i,j})</script></li></ul><h4 id="代码实现：-2"><a href="#代码实现：-2" class="headerlink" title="代码实现："></a>代码实现：</h4><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Softmax</span>(<span class="params">Module</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>) -&gt; <span class="literal">None</span>:</span></span><br><span class="line">        <span class="built_in">super</span>(Softmax, self).__init__()</span><br><span class="line">        self.exps = <span class="literal">None</span></span><br><span class="line">        self.exps_sum = <span class="literal">None</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">forward</span>(<span class="params">self, X</span>):</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        X: (batch_size, features)</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        C = np.<span class="built_in">max</span>(X)</span><br><span class="line">        self.exps = np.exp(X - C)</span><br><span class="line">        self.exps_sum = np.<span class="built_in">sum</span>(self.exps, axis=<span class="number">1</span>).reshape((-<span class="number">1</span>, <span class="number">1</span>))</span><br><span class="line">        <span class="keyword">return</span> np.divide(self.exps, self.exps_sum)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">backward</span>(<span class="params">self, delta_Y</span>):</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        delta_Y: (batch_size, features)</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        exps_sum_square = self.exps_sum ** <span class="number">2</span></span><br><span class="line">        ii_matrix = np.multiply(self.exps, self.exps_sum) / exps_sum_square <span class="comment"># (batch_size, features)</span></span><br><span class="line">        ij_matrix = - np.matmul(self.exps[:, :, np.newaxis], self.exps[:, np.newaxis, :]) / exps_sum_square[:, :, np.newaxis] <span class="comment"># (batch_size, features, features)</span></span><br><span class="line">        ij_Y = np.multiply(delta_Y[:, :, np.newaxis], ij_matrix).<span class="built_in">sum</span>(axis=<span class="number">1</span>) <span class="comment"># (batch_size, features)</span></span><br><span class="line">        delta_Y = ij_Y + np.multiply(delta_Y, ii_matrix) <span class="comment"># (batch_size, features)</span></span><br><span class="line">        <span class="keyword">return</span> delta_Y</span><br></pre></td></tr></tbody></table></figure><h3 id="Log对数函数层"><a href="#Log对数函数层" class="headerlink" title="Log对数函数层"></a>Log对数函数层</h3><h4 id="数学推导：-3"><a href="#数学推导：-3" class="headerlink" title="数学推导："></a>数学推导：</h4><ul><li><p><strong>前向传播</strong>公式：</p><script type="math/tex; mode=display">Y_{i,j}=\ln(X_{i,j})</script></li><li><p><strong>反向传播</strong>公式：</p><script type="math/tex; mode=display">\frac{\partial Y}{\partial X_{i,j}}=\frac{1}{X_{i,j}}</script></li></ul><h4 id="代码实现：-3"><a href="#代码实现：-3" class="headerlink" title="代码实现："></a>代码实现：</h4><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Log</span>(<span class="params">Module</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>) -&gt; <span class="literal">None</span>:</span></span><br><span class="line">        <span class="built_in">super</span>(Log, self).__init__()</span><br><span class="line">        self.inf = <span class="number">1e-10</span></span><br><span class="line">        self.X = <span class="literal">None</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">forward</span>(<span class="params">self, X</span>):</span></span><br><span class="line">        self.X = X</span><br><span class="line">        <span class="keyword">return</span> np.log(X + self.inf)</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">backward</span>(<span class="params">self, delta_Y</span>):</span></span><br><span class="line">        <span class="keyword">return</span> np.multiply(<span class="number">1</span> / (self.X + self.inf), delta_Y)</span><br></pre></td></tr></tbody></table></figure><h3 id="损失函数层"><a href="#损失函数层" class="headerlink" title="损失函数层"></a>损失函数层</h3><h4 id="数学推导：-4"><a href="#数学推导：-4" class="headerlink" title="数学推导："></a>数学推导：</h4><ul><li><p><strong>前向传播</strong>公式：</p><script type="math/tex; mode=display">Y=\frac{\sum_{i=1}^n\sum_{j=1}^m-X_{i,j}T_{i,j}}{n}</script><p>  其中：</p><ul><li><script type="math/tex">X_{i,j}</script>：预测的第 <script type="math/tex">i</script> 条数据是标签 <script type="math/tex">j</script> 的概率；</li><li><script type="math/tex">T_{i,j}</script>：实际的第 <script type="math/tex">i</script> 条数据是标签 <script type="math/tex">j</script> 的概率【0，1】；</li></ul></li><li><p><strong>反向传播</strong>公式：</p><script type="math/tex; mode=display">\frac{\partial Y}{\partial X_{i,j}}=-\frac{T_{i,j}}{n}</script></li></ul><h4 id="代码实现：-4"><a href="#代码实现：-4" class="headerlink" title="代码实现："></a>代码实现：</h4><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">NLLloss</span>(<span class="params">Module</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>) -&gt; <span class="literal">None</span>:</span></span><br><span class="line">        <span class="built_in">super</span>(NLLloss, self).__init__()</span><br><span class="line">        self.target = <span class="literal">None</span></span><br><span class="line">        self.loss = <span class="literal">None</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">forward</span>(<span class="params">self, Y, target</span>):</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        Y: (batch_size, features)</span></span><br><span class="line"><span class="string">        target: (batch_size)</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        self.target = np.ones(shape=Y.shape) * <span class="number">1e-6</span></span><br><span class="line">        <span class="keyword">for</span> i, j <span class="keyword">in</span> <span class="built_in">enumerate</span>(target):</span><br><span class="line">            self.target[i, j] = <span class="number">1</span></span><br><span class="line">        self.loss = -np.<span class="built_in">sum</span>(np.multiply(Y, self.target)) / <span class="built_in">len</span>(target)</span><br><span class="line">        <span class="keyword">return</span> self.loss</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">backward</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> - self.target * self.loss</span><br></pre></td></tr></tbody></table></figure><h2 id="神经网络结构"><a href="#神经网络结构" class="headerlink" title="神经网络结构"></a>神经网络结构</h2><h3 id="模型结构"><a href="#模型结构" class="headerlink" title="模型结构"></a>模型结构</h3><p><img src="/2021/11/01/%E7%94%A8NumPy%E6%90%AD%E5%BB%BA%E7%AE%80%E5%8D%95%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/image-20211101133801955.png" alt="image-20211101133801955"></p><h3 id="模型代码："><a href="#模型代码：" class="headerlink" title="模型代码："></a>模型代码：</h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 模型</span></span><br><span class="line">linear1 = Linear(in_features=<span class="number">28</span> * <span class="number">28</span>, out_features=<span class="number">1024</span>, bias=<span class="literal">True</span>)</span><br><span class="line">tanh1 = Tanh()</span><br><span class="line">linear2 = Linear(in_features=<span class="number">1024</span>, out_features=<span class="number">10</span>, bias=<span class="literal">True</span>)</span><br><span class="line">softmax = Softmax()</span><br><span class="line">log = Log()</span><br><span class="line">nllloss = NLLloss()</span><br></pre></td></tr></tbody></table></figure><h2 id="模型实验"><a href="#模型实验" class="headerlink" title="模型实验"></a>模型实验</h2><h3 id="实验代码"><a href="#实验代码" class="headerlink" title="实验代码"></a>实验代码</h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 训练参数</span></span><br><span class="line">epochs = <span class="number">30</span></span><br><span class="line">batch_size_train = <span class="number">64</span></span><br><span class="line">batch_size_test = <span class="number">1000</span></span><br><span class="line">lr = <span class="number">0.0003</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 模型</span></span><br><span class="line">linear1 = Linear(in_features=<span class="number">28</span> * <span class="number">28</span>, out_features=<span class="number">1024</span>, bias=<span class="literal">True</span>)</span><br><span class="line">tanh1 = Tanh()</span><br><span class="line">linear2 = Linear(in_features=<span class="number">1024</span>, out_features=<span class="number">10</span>, bias=<span class="literal">True</span>)</span><br><span class="line">softmax = Softmax()</span><br><span class="line">log = Log()</span><br><span class="line">nllloss = NLLloss()</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> epoch <span class="keyword">in</span> <span class="built_in">range</span>(epochs):</span><br><span class="line">    <span class="string">""" train """</span></span><br><span class="line">    process_bar = tqdm(<span class="built_in">range</span>(<span class="built_in">len</span>(X_train) // batch_size_train), ncols=<span class="number">150</span>)</span><br><span class="line">    <span class="keyword">for</span> itor <span class="keyword">in</span> process_bar:</span><br><span class="line">        X = X_train[itor * batch_size_train: itor * batch_size_train + batch_size_train]</span><br><span class="line">        y = y_train[itor * batch_size_train: itor * batch_size_train + batch_size_train]</span><br><span class="line">        <span class="string">""" 前向传播 """</span></span><br><span class="line">        tmp = X.reshape((batch_size_train, -<span class="number">1</span>))</span><br><span class="line">        tmp = linear1(tmp)</span><br><span class="line">        tmp = tanh1(tmp)</span><br><span class="line">        tmp = linear2(tmp)</span><br><span class="line">        tmp = softmax(tmp)</span><br><span class="line">        pre = np.argmax(tmp, axis=<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">        train_acc = np.<span class="built_in">sum</span>(y == pre)</span><br><span class="line">        train_total = <span class="built_in">len</span>(y)</span><br><span class="line">        </span><br><span class="line">        tmp = log(tmp)</span><br><span class="line">        loss = nllloss(tmp, y)</span><br><span class="line">        <span class="string">""" 反向传播 """</span></span><br><span class="line">        Y = nllloss.backward()</span><br><span class="line">        Y = log.backward(Y)</span><br><span class="line">        Y = softmax.backward(Y)</span><br><span class="line">        Y = linear2.backward(Y, lr)</span><br><span class="line">        Y = tanh1.backward(Y)</span><br><span class="line">        Y = linear1.backward(Y, lr)</span><br><span class="line"></span><br><span class="line">        process_bar.set_description(<span class="string">'Train epoch:{} '</span>.<span class="built_in">format</span>(epoch + <span class="number">1</span>))</span><br><span class="line">        process_bar.set_postfix_str(<span class="string">'loss: {:.4f}  Acc:{:.2f}%'</span>.<span class="built_in">format</span>(</span><br><span class="line">                                    loss, <span class="number">100.</span> * train_acc / train_total))</span><br><span class="line">    </span><br><span class="line">    <span class="string">""" test """</span></span><br><span class="line">    test_total = <span class="number">0</span></span><br><span class="line">    test_acc = <span class="number">0</span></span><br><span class="line">    test_process_bar = tqdm(<span class="built_in">range</span>(<span class="built_in">len</span>(X_test) // batch_size_test), ncols=<span class="number">150</span>)</span><br><span class="line">    <span class="keyword">for</span> itor <span class="keyword">in</span> test_process_bar:</span><br><span class="line">        X = X_test[itor * batch_size_test: itor * batch_size_test + batch_size_test]</span><br><span class="line">        y = y_test[itor * batch_size_test: itor * batch_size_test + batch_size_test]</span><br><span class="line"></span><br><span class="line">        tmp = X.reshape((batch_size_test, -<span class="number">1</span>))</span><br><span class="line">        tmp = linear1(tmp)</span><br><span class="line">        tmp = tanh1(tmp)</span><br><span class="line">        tmp = linear2(tmp)</span><br><span class="line">        Y = softmax(tmp)</span><br><span class="line">        Y = np.argmax(Y, axis=<span class="number">1</span>)</span><br><span class="line">        test_total += <span class="built_in">len</span>(y)</span><br><span class="line">        test_acc += np.<span class="built_in">sum</span>(y == Y)</span><br><span class="line">        test_process_bar.set_description(<span class="string">'Test epoch:{} '</span>.<span class="built_in">format</span>(epoch + <span class="number">1</span>))</span><br><span class="line">        test_process_bar.set_postfix_str(<span class="string">'Acc [{}/{} ({:.2f}%)]'</span>.<span class="built_in">format</span>(</span><br><span class="line">                                        test_acc, test_total, <span class="number">100.</span> * test_acc/test_total))</span><br></pre></td></tr></tbody></table></figure><h3 id="实验结果"><a href="#实验结果" class="headerlink" title="实验结果"></a>实验结果</h3><p><img src="/2021/11/01/%E7%94%A8NumPy%E6%90%AD%E5%BB%BA%E7%AE%80%E5%8D%95%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/image-20211101134409662.png" alt="image-20211101134409662"></p>]]></content>
    
    
    <summary type="html">用NumPy搭建两层神经网络（包括全连接层和Softmax以及tanh激活函数），实现反向传播，并处理MNIST数据集。</summary>
    
    
    
    <category term="深度学习" scheme="https://1.15.86.100/categories/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="numpy" scheme="https://1.15.86.100/tags/numpy/"/>
    
  </entry>
  
  <entry>
    <title>K-NNMC</title>
    <link href="https://1.15.86.100/2021/10/31/K-NNMC/"/>
    <id>https://1.15.86.100/2021/10/31/K-NNMC/</id>
    <published>2021-10-31T03:20:20.000Z</published>
    <updated>2021-10-31T04:00:27.557Z</updated>
    
    <content type="html"><![CDATA[<h1 id="K-NNMC-1"><a href="#K-NNMC-1" class="headerlink" title="K-NNMC[1]"></a>K-NNMC<a href="#refer-anchor-1"><sup>[1]</sup></a></h1><h2 id="K-NNMC简介"><a href="#K-NNMC简介" class="headerlink" title="K-NNMC简介"></a>K-NNMC简介</h2><p><strong>K-NNMC模型</strong>（k-Nearest Neighbor Mean Classifier）是<em>P. Viswanath</em>和<em>T. Hitendra Sarma</em>于2011年提出的对<strong>KNN</strong>（详见<a href="http://1.15.86.100/2021/05/15/KNN/">KNN | BaoWJ’s Blog</a>）的一种改进方法。</p><p>该方法的主要思路是对KNN中<strong>“选择K个最近邻”</strong>进行了改进。该方法针对<strong>每个类别的数据</strong>都选择<strong>K个最近邻</strong>，然后计算<strong>每个类别的K个最近邻的距离平均值</strong>，并选择<strong>距离平均值最小的类别为预测类别</strong>。</p><h2 id="K-NNMC代码"><a href="#K-NNMC代码" class="headerlink" title="K-NNMC代码"></a>K-NNMC代码</h2><p>因为<strong>sklearn</strong>没有提供<strong>K-NNMC</strong>模型的库函数，所以这里我基于<strong>sklearn</strong>的<strong>KNeighborsClassifier</strong>类构造<strong>WK_NNR</strong>模型。</p><p>因为<strong>K-NNMC</strong>模型需要分别计算每个类别数据对于待预测数据的K个最近邻，所以我用<strong>n</strong>（n表示数据类别总数）个<strong>KNeighborsClassifier</strong>分别处理每类数据，构造了<strong>KNeighborsMeanClassifier</strong>类，代码如下：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">KNeighborsMeanClassifier</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, n_neighbors=<span class="number">5</span></span>) -&gt; <span class="literal">None</span>:</span></span><br><span class="line">        self.labels = <span class="literal">None</span></span><br><span class="line">        self.classifiers = <span class="built_in">dict</span>()</span><br><span class="line">        self.n_neighbors = n_neighbors</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">fit</span>(<span class="params">self, X, y</span>):</span></span><br><span class="line">        self.labels = np.array(<span class="built_in">list</span>(<span class="built_in">set</span>(y)))</span><br><span class="line">        <span class="keyword">for</span> label <span class="keyword">in</span> self.labels:</span><br><span class="line">            model = KNeighborsClassifier()</span><br><span class="line">            model.fit(X[y == label], y[y == label])</span><br><span class="line">            self.classifiers[label] = model</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">predict</span>(<span class="params">self, X</span>):</span></span><br><span class="line">        tmp = []</span><br><span class="line">        <span class="keyword">for</span> label <span class="keyword">in</span> self.labels:</span><br><span class="line">            classifier = self.classifiers[label]</span><br><span class="line">            mean_dis = classifier.kneighbors(X, n_neighbors=self.n_neighbors)[<span class="number">0</span>]</span><br><span class="line">            mean_dis = np.mean(mean_dis, axis=<span class="number">1</span>)</span><br><span class="line">            tmp.append(mean_dis)</span><br><span class="line">        tmp = np.stack(tmp)</span><br><span class="line">        <span class="built_in">print</span>(tmp.shape)</span><br><span class="line">        index = self.labels[np.argmin(tmp, axis=<span class="number">0</span>)]</span><br><span class="line">        <span class="built_in">print</span>(index.shape)</span><br><span class="line">        <span class="keyword">return</span> index</span><br></pre></td></tr></tbody></table></figure><h2 id="K-NNMC实验"><a href="#K-NNMC实验" class="headerlink" title="K-NNMC实验"></a>K-NNMC实验</h2><p><strong>实验数据</strong>和<strong>实验代码</strong>基本同<strong>WK_NNC实验</strong>（<a href="http://1.15.86.100/2021/10/31/WK-NNC/">WK-NNC| BaoWJ’s Blog</a>）</p><h4 id="实验结果"><a href="#实验结果" class="headerlink" title="实验结果"></a>实验结果</h4><p><img src="/2021/10/31/K-NNMC/image-20211031115424008.png" alt="image-20211031115424008"></p><p>结果发现<strong>效果一般</strong>，同时我实现的代码<strong>速度较慢</strong>。</p><h2 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h2><ul><li><a href="http://1.15.86.100/2021/05/15/KNN/">KNN | BaoWJ’s Blog</a></li><li><a href="http://1.15.86.100/2021/10/31/WK-NNC/">WK-NNC| BaoWJ’s Blog</a></li></ul><h2 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h2><p></p><div id="refer-anchor-1"></div> [1] P. Viswanath and T. Hitendra Sarma, “An improvement to k-nearest neighbor classifier,” 2011 IEEE Recent Advances in Intelligent Computational Systems, 2011, pp. 227-231, doi: 10.1109/RAICS.2011.6069307.<p></p>]]></content>
    
    
    <summary type="html">介绍K-NNMC，以及利用sklearn实现模型代码。</summary>
    
    
    
    <category term="Machine Learning" scheme="https://1.15.86.100/categories/Machine-Learning/"/>
    
    
    <category term="KNN" scheme="https://1.15.86.100/tags/KNN/"/>
    
    <category term="sklearn" scheme="https://1.15.86.100/tags/sklearn/"/>
    
  </entry>
  
  <entry>
    <title>WK_NNC</title>
    <link href="https://1.15.86.100/2021/10/31/WK-NNC/"/>
    <id>https://1.15.86.100/2021/10/31/WK-NNC/</id>
    <published>2021-10-31T03:19:51.000Z</published>
    <updated>2021-10-31T03:59:20.783Z</updated>
    
    <content type="html"><![CDATA[<h1 id="WK-NNC-1"><a href="#WK-NNC-1" class="headerlink" title="WK_NNC[1]"></a>WK_NNC<a href="#refer-anchor-1"><sup>[1]</sup></a></h1><h2 id="WK-NNC简介"><a href="#WK-NNC简介" class="headerlink" title="WK_NNC简介"></a>WK_NNC简介</h2><p><strong>WK_NNR模型</strong>（Distance-Weighted k-Nearest-Neighbor Rule）是<em>Sahibsingh A. Dudani</em>于1976年提出的对<strong>KNN</strong>（详见<a href="http://1.15.86.100/2021/05/15/KNN/">KNN | BaoWJ’s Blog</a>）的一种改进方法。</p><p>该方法的主要思路是对<strong>KNN</strong>中的距离进行<strong>加权</strong>。</p><p>基础<strong>KNN</strong>是：直接取距离<strong>待预测数据点</strong> <script type="math/tex">\alpha</script> 最近的<strong>K</strong>个点，并预测该数据类别为这K个数据中<strong>占比最大</strong>的数据的类别。<strong>KNN</strong>可以看成<strong>WK__NNC</strong>的一个特例，这相当于对K个数据点中，设置权重都为<strong>1</strong>。</p><p><strong>WK_NNR</strong>的思路是根据这K个点距离 <script type="math/tex">\alpha</script> 的距离不同赋予不同的<strong>权重</strong>，最后依据<strong>权重之和</strong>最大的类别来预测。</p><p>对于<strong>待预测数据点</strong> <script type="math/tex">\alpha</script> 的<strong>K个“最近邻”</strong>  <script type="math/tex">\alpha_i,1\le i \le K</script>，其中 <script type="math/tex">\alpha_i</script> 距离 <script type="math/tex">\alpha</script> 点的距离为 <script type="math/tex">d_i</script>，且 <script type="math/tex">d_1\le d_2 \le \cdots \le d_K</script>。则，其每个点的<strong>权重</strong>定义如下：</p><script type="math/tex; mode=display">w_i=\left\{\begin{aligned} \frac{d_k-d_i}{d_k-d_1}\quad & d_k \ne d_1\\ 1\quad &d_k=d_1\end{aligned}\right.</script><p>最终 <script type="math/tex">\alpha</script> 的<strong>预测类别</strong>为<strong>权重加和值最大</strong>的数据的类别。</p><h2 id="WK-NNC代码"><a href="#WK-NNC代码" class="headerlink" title="WK_NNC代码"></a>WK_NNC代码</h2><p>因为<strong>sklearn</strong>没有提供<strong>WK_NNR</strong>模型的库函数，所以这里我基于<strong>sklearn</strong>的<strong>KNeighborsClassifier</strong>类构造<strong>WK_NNR</strong>模型。</p><p><strong>KNeighborsClassifier</strong>提供了一个<strong>weights</strong>参数接口，用户可以通过自定义函数来自定义距离权重，所以我写了一个基于<strong>WK_NNR</strong>权重的自定义函数<strong>kw_nnc</strong>，代码如下：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">kw_nnc</span>(<span class="params">distances</span>):</span></span><br><span class="line">    <span class="keyword">return</span> ((distances[:, -<span class="number">1</span>][:, np.newaxis] - distances) + <span class="number">1e-6</span>) / ((distances[:, -<span class="number">1</span>] - distances[:, <span class="number">0</span>])[:, np.newaxis] + <span class="number">1e-6</span>) <span class="comment"># 1e-6为了防止除0发生</span></span><br><span class="line"></span><br><span class="line">wk_nnc_model = KNeighborsClassifier(weights=kw_nnc)</span><br></pre></td></tr></tbody></table></figure><h2 id="WK-NNC实验"><a href="#WK-NNC实验" class="headerlink" title="WK_NNC实验"></a>WK_NNC实验</h2><h3 id="实验数据"><a href="#实验数据" class="headerlink" title="实验数据"></a>实验数据</h3><ul><li><p>数据来源：<a href="http://www.cad.zju.edu.cn/home/dengcai/Data/TDT2/TDT2.mat">http://www.cad.zju.edu.cn/home/dengcai/Data/TDT2/TDT2.mat</a></p></li><li><p>数据简介：该数据是新闻文本数据，数据的作者从新闻文本中提取出的<strong>词频</strong>数据。。</p></li><li><p>数据维度：36771；</p></li><li><p>类别数：30；</p></li><li><p>数据条数：9394；</p></li></ul><h3 id="实验代码"><a href="#实验代码" class="headerlink" title="实验代码"></a>实验代码</h3><h4 id="导入依赖包"><a href="#导入依赖包" class="headerlink" title="导入依赖包"></a>导入依赖包</h4><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> scipy.io <span class="keyword">as</span> scio</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">from</span> sklearn.neighbors <span class="keyword">import</span> KNeighborsClassifier</span><br><span class="line"><span class="keyword">from</span> sklearn.model_selection  <span class="keyword">import</span> cross_val_score</span><br><span class="line"><span class="keyword">from</span> sklearn.metrics <span class="keyword">import</span> confusion_matrix, accuracy_score</span><br><span class="line"><span class="keyword">from</span> sklearn.model_selection <span class="keyword">import</span> train_test_split</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h4 id="加载数据"><a href="#加载数据" class="headerlink" title="加载数据"></a>加载数据</h4><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">dataFile = <span class="string">'./TDT2.mat'</span></span><br><span class="line">data = scio.loadmat(dataFile)</span><br><span class="line">Y = data[<span class="string">'gnd'</span>].ravel()</span><br><span class="line">X = data[<span class="string">'fea'</span>].A</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">'X shape:'</span>, X.shape)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">'Y shape:'</span>, Y.shape)</span><br></pre></td></tr></tbody></table></figure><h4 id="TF-IDF"><a href="#TF-IDF" class="headerlink" title="TF-IDF"></a>TF-IDF</h4><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.feature_extraction.text <span class="keyword">import</span> TfidfTransformer</span><br><span class="line"></span><br><span class="line">tfidf = TfidfTransformer()</span><br><span class="line">X = tfidf.fit_transform(X).A</span><br></pre></td></tr></tbody></table></figure><h4 id="寻找最优K值"><a href="#寻找最优K值" class="headerlink" title="寻找最优K值"></a>寻找最优K值</h4><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_best_k_acc</span>(<span class="params">X_train, Y_train, X_test, Y_test</span>):</span></span><br><span class="line">    acc_list = []</span><br><span class="line">    k_list = []</span><br><span class="line">    model = KNeighborsClassifier(weights=kw_nnc)</span><br><span class="line">    <span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>, <span class="number">16</span>, <span class="number">1</span>):</span><br><span class="line">        model.n_neighbors = k</span><br><span class="line">        model.fit(X_train, Y_train)</span><br><span class="line">        Y_pred = model.predict(X_test)</span><br><span class="line">        acc = accuracy_score(Y_test, Y_pred)</span><br><span class="line">        k_list.append(k)</span><br><span class="line">        acc_list.append(acc)</span><br><span class="line"></span><br><span class="line">    plt.plot(k_list, acc_list)</span><br><span class="line">    plt.ylabel(<span class="string">'Accuracy'</span>)</span><br><span class="line">    plt.title(<span class="string">'Accuracy with K'</span>)</span><br><span class="line">    plt.xlabel(<span class="string">'K'</span>)</span><br><span class="line">    plt.show()</span><br><span class="line">    <span class="comment"># 计算最优K</span></span><br><span class="line">    best_acc = np.<span class="built_in">max</span>(acc_list)</span><br><span class="line">    best_k = k_list[np.argmax(acc_list)]</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">'最优k值为: {}, value为: {}'</span>.<span class="built_in">format</span>(best_k, best_acc))</span><br><span class="line">    <span class="keyword">return</span> (best_k, best_acc)</span><br></pre></td></tr></tbody></table></figure><h4 id="寻找最优降维维度"><a href="#寻找最优降维维度" class="headerlink" title="寻找最优降维维度"></a>寻找最优降维维度</h4><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.decomposition <span class="keyword">import</span> PCA</span><br><span class="line">acc_list = []</span><br><span class="line">k_list = []</span><br><span class="line">n_list = []</span><br><span class="line">pca_model = PCA()</span><br><span class="line"><span class="keyword">for</span> n <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">11</span>, <span class="number">1</span>):</span><br><span class="line">    <span class="comment"># 降维</span></span><br><span class="line">    n = n * <span class="number">10</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">'-'</span> * <span class="number">15</span> + <span class="string">'维度为'</span> + <span class="built_in">str</span>(n) + <span class="string">'-'</span> * <span class="number">15</span>)</span><br><span class="line">    pca_model.n_components = n</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">'-'</span> * <span class="number">15</span> + <span class="string">'开始降维'</span> + <span class="string">'-'</span> * <span class="number">15</span>)</span><br><span class="line">    pca_X = pca_model.fit_transform(X)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">'降维后形状:'</span>, pca_X.shape)</span><br><span class="line">    <span class="comment"># 划分数据集</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">'-'</span> * <span class="number">15</span> + <span class="string">'开始切分数据'</span> + <span class="string">'-'</span> * <span class="number">15</span>)</span><br><span class="line">    X_train, X_test, Y_train, Y_test = train_test_split(pca_X, Y, test_size=<span class="number">0.25</span>, random_state=<span class="number">21</span>, shuffle=<span class="literal">True</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">'训练数据:'</span>, X_train.shape)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">'训练label:'</span>, Y_train.shape)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">'测试数据:'</span>, X_test.shape)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">'测试label'</span>, Y_test.shape)</span><br><span class="line">    k, acc = get_best_k_acc(X_train, Y_train, X_test, Y_test)</span><br><span class="line">    k_list.append(k)</span><br><span class="line">    acc_list.append(acc)</span><br><span class="line">    n_list.append(n)</span><br></pre></td></tr></tbody></table></figure><h4 id="绘图"><a href="#绘图" class="headerlink" title="绘图"></a>绘图</h4><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line">plt.title(<span class="string">'K-NNMC'</span>)</span><br><span class="line">plt.subplot(<span class="number">2</span>, <span class="number">1</span>, <span class="number">1</span>)</span><br><span class="line">plt.xlim(<span class="number">0</span>, <span class="number">105</span>)</span><br><span class="line">plt.ylim(<span class="number">0.96</span>, <span class="number">0.98</span>)</span><br><span class="line">plt.scatter(n_list, acc_list)</span><br><span class="line">plt.plot(n_list, acc_list)</span><br><span class="line"><span class="keyword">for</span> x, y <span class="keyword">in</span> <span class="built_in">zip</span>(n_list, acc_list):</span><br><span class="line">    plt.text(x, y + <span class="number">0.001</span>, <span class="string">"%.3f"</span>%y)</span><br><span class="line">plt.ylabel(<span class="string">'Accuracy'</span>)</span><br><span class="line">plt.grid()</span><br><span class="line">plt.title(<span class="string">'Best_Accuracy with Dim'</span>)</span><br><span class="line">plt.xlabel(<span class="string">'Dim'</span>)</span><br><span class="line"></span><br><span class="line">plt.subplot(<span class="number">2</span>, <span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line">plt.scatter(n_list, k_list)</span><br><span class="line">plt.plot(n_list, k_list)</span><br><span class="line"><span class="keyword">for</span> x, y <span class="keyword">in</span> <span class="built_in">zip</span>(n_list, k_list):</span><br><span class="line">    plt.text(x, y + <span class="number">0.1</span>, <span class="string">"%d"</span>%y)</span><br><span class="line">plt.ylabel(<span class="string">'K'</span>)</span><br><span class="line">plt.grid()</span><br><span class="line">plt.title(<span class="string">'Best_K with Dim'</span>)</span><br><span class="line">plt.xlabel(<span class="string">'Dim'</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></tbody></table></figure><h4 id="实验结果"><a href="#实验结果" class="headerlink" title="实验结果"></a>实验结果</h4><p><img src="/2021/10/31/WK-NNC/image-20211031114639261.png" alt="image-20211031114639261"></p><p>结果发现，<strong>WK_NNC</strong>模型取的最优值的地方<strong>K</strong>值都比较大（在10附近），说明<strong>WK_NNC</strong>模型<strong>泛化性</strong>比较好。</p><h2 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h2><ul><li><a href="http://1.15.86.100/2021/05/15/KNN/">KNN | BaoWJ’s Blog</a></li><li><a href="http://1.15.86.100/2021/10/31/K-NNMC/">K-NNMC | BaoWJ’s Blog</a></li></ul><h2 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h2><p></p><div id="refer-anchor-1"></div> [1] S. A. Dudani, “The Distance-Weighted k-Nearest-Neighbor Rule,” in IEEE Transactions on Systems, Man, and Cybernetics, vol. SMC-6, no. 4, pp. 325-327, April 1976, doi: 10.1109/TSMC.1976.5408784.<p></p>]]></content>
    
    
    <summary type="html">介绍WK_NNC，以及利用sklearn实现模型代码。</summary>
    
    
    
    <category term="Machine Learning" scheme="https://1.15.86.100/categories/Machine-Learning/"/>
    
    
    <category term="KNN" scheme="https://1.15.86.100/tags/KNN/"/>
    
    <category term="sklearn" scheme="https://1.15.86.100/tags/sklearn/"/>
    
  </entry>
  
  <entry>
    <title>Linux设置虚拟内存</title>
    <link href="https://1.15.86.100/2021/10/31/Linux%E8%AE%BE%E7%BD%AE%E8%99%9A%E6%8B%9F%E5%86%85%E5%AD%98/"/>
    <id>https://1.15.86.100/2021/10/31/Linux%E8%AE%BE%E7%BD%AE%E8%99%9A%E6%8B%9F%E5%86%85%E5%AD%98/</id>
    <published>2021-10-31T01:56:30.000Z</published>
    <updated>2021-10-31T02:16:19.702Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Linux设置虚拟内存"><a href="#Linux设置虚拟内存" class="headerlink" title="Linux设置虚拟内存"></a>Linux设置虚拟内存</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p><strong>虚拟内存</strong>是指将部分<strong>硬盘存储</strong>通过<strong>虚拟化</strong>转变成<strong>内存</strong>，以缓解内存不足的问题。</p><h2 id="设置方法"><a href="#设置方法" class="headerlink" title="设置方法"></a>设置方法</h2><h3 id="查看本地虚拟内存情况"><a href="#查看本地虚拟内存情况" class="headerlink" title="查看本地虚拟内存情况"></a>查看本地虚拟内存情况</h3><p>命令：<code>free -m</code></p><p><img src="/2021/10/31/Linux%E8%AE%BE%E7%BD%AE%E8%99%9A%E6%8B%9F%E5%86%85%E5%AD%98/image-20211031100002940.png" alt="image-20211031100002940"></p><h3 id="创建swapfile文件"><a href="#创建swapfile文件" class="headerlink" title="创建swapfile文件"></a>创建swapfile文件</h3><ul><li>进入<code>/usr</code>目录；</li><li>创建<code>swap</code>文件夹，并进入该文件夹；</li><li>创建<code>swapfile</code>文件：<code>dd if=/dev/zero of=/usr/swap/swapfile bs=1M count=4096</code></li></ul><p><img src="/2021/10/31/Linux%E8%AE%BE%E7%BD%AE%E8%99%9A%E6%8B%9F%E5%86%85%E5%AD%98/image-20211031100237307.png" alt="image-20211031100237307"></p><h3 id="将swapfile设置为swap分区文件"><a href="#将swapfile设置为swap分区文件" class="headerlink" title="将swapfile设置为swap分区文件"></a>将swapfile设置为swap分区文件</h3><p>命令：<code>mkswap /usr/swap/swapfile</code></p><p><img src="/2021/10/31/Linux%E8%AE%BE%E7%BD%AE%E8%99%9A%E6%8B%9F%E5%86%85%E5%AD%98/image-20211031100411392.png" alt="image-20211031100411392"></p><h3 id="激活swap分区"><a href="#激活swap分区" class="headerlink" title="激活swap分区"></a>激活swap分区</h3><p>命令：<code>swapon /usr/swap/swapfile</code></p><p><img src="/2021/10/31/Linux%E8%AE%BE%E7%BD%AE%E8%99%9A%E6%8B%9F%E5%86%85%E5%AD%98/image-20211031100524446.png" alt="image-20211031100524446"></p><h3 id="查看结果"><a href="#查看结果" class="headerlink" title="查看结果"></a>查看结果</h3><p>命令：<code>free -m</code></p><p><img src="/2021/10/31/Linux%E8%AE%BE%E7%BD%AE%E8%99%9A%E6%8B%9F%E5%86%85%E5%AD%98/image-20211031100613907.png" alt="image-20211031100613907"></p><h3 id="设置开机自启动虚拟内存"><a href="#设置开机自启动虚拟内存" class="headerlink" title="设置开机自启动虚拟内存"></a>设置开机自启动虚拟内存</h3><ul><li><p>打开<code>/etc/fstab</code>文件；</p></li><li><p>添加下面内容：</p>  <figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/swap/swapfile swap swap defaults 0 0</span><br></pre></td></tr></tbody></table></figure></li></ul><h3 id="关闭虚拟内存"><a href="#关闭虚拟内存" class="headerlink" title="关闭虚拟内存"></a>关闭虚拟内存</h3><p>如果不需要了，可以通过下面命令关闭虚拟内存：</p><p><code>swapoff -v [path]</code></p>]]></content>
    
    
    <summary type="html">给Linux系统设置虚拟内存。</summary>
    
    
    
    <category term="Linux" scheme="https://1.15.86.100/categories/Linux/"/>
    
    
    <category term="虚拟内存" scheme="https://1.15.86.100/tags/%E8%99%9A%E6%8B%9F%E5%86%85%E5%AD%98/"/>
    
  </entry>
  
  <entry>
    <title>OpenGL</title>
    <link href="https://1.15.86.100/2021/10/26/OpenGL/"/>
    <id>https://1.15.86.100/2021/10/26/OpenGL/</id>
    <published>2021-10-26T06:28:40.000Z</published>
    <updated>2021-10-26T07:14:46.754Z</updated>
    
    <content type="html"><![CDATA[<h1 id="OpenGL"><a href="#OpenGL" class="headerlink" title="OpenGL"></a>OpenGL</h1><h2 id="视图（View）和窗口（Window）"><a href="#视图（View）和窗口（Window）" class="headerlink" title="视图（View）和窗口（Window）"></a>视图（View）和窗口（Window）</h2><h3 id="视图（View）"><a href="#视图（View）" class="headerlink" title="视图（View）"></a>视图（View）</h3><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">glViewport</span>(<span class="number">0</span>, <span class="number">0</span>, screen_width, screen_height);</span><br></pre></td></tr></tbody></table></figure><p>是<strong>逻辑</strong>上图像画面投影的窗口；</p><h3 id="窗口（Window）"><a href="#窗口（Window）" class="headerlink" title="窗口（Window）"></a>窗口（Window）</h3><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">glfwCreateWindow</span>(screen_width, screen_height, <span class="string">"Quad"</span>, <span class="literal">nullptr</span>, <span class="literal">nullptr</span>);</span><br></pre></td></tr></tbody></table></figure><p>是<strong>真实</strong>呈现在显示屏上的窗口；</p><h3 id="二者关系"><a href="#二者关系" class="headerlink" title="二者关系"></a>二者关系</h3><p>在<strong>视图</strong>向<strong>窗口</strong>转换时，是直接在<strong>视图</strong>上截取<strong>窗口</strong>大小的图像（不投影）。</p><h2 id="基本函数"><a href="#基本函数" class="headerlink" title="基本函数"></a>基本函数</h2><h3 id="glVertexAttribPointer"><a href="#glVertexAttribPointer" class="headerlink" title="glVertexAttribPointer"></a>glVertexAttribPointer</h3><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">glVertexAttribPointer</span>(<span class="number">0</span>, <span class="number">3</span>, GL_FLOAT, GL_FALSE, <span class="number">3</span> * <span class="built_in"><span class="keyword">sizeof</span></span>(<span class="keyword">float</span>), (<span class="keyword">void</span>*)<span class="number">0</span>);</span><br></pre></td></tr></tbody></table></figure><ul><li>第一个参数：顶点属性的<strong>索引</strong>，方便后面调用该数据；</li><li>第二个参数：一个顶点属性的大小（包含的数据数量）；</li><li>第三个参数：指定数据类型；</li><li>第四个参数：是否希望数据被标准化（投影到【-1，1】区间）；</li><li>第五个参数：步长（属性组之间的间隔）；</li></ul><h3 id="glDrawElements"><a href="#glDrawElements" class="headerlink" title="glDrawElements"></a>glDrawElements</h3><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">glDrawElements</span><span class="params">(GLenum  mode,</span></span></span><br><span class="line"><span class="function"><span class="params">                 GLsizei  count,</span></span></span><br><span class="line"><span class="function"><span class="params"> GLenum  type,</span></span></span><br><span class="line"><span class="function"><span class="params"> <span class="keyword">const</span> GLvoid *  indices)</span></span>;</span><br><span class="line"><span class="built_in">glDrawElements</span>(GL_TRIANGLES, <span class="number">6</span>, GL_UNSIGNED_INT, <span class="number">0</span>);</span><br></pre></td></tr></tbody></table></figure><p>利用顶点数据和索引数据渲染形状。</p><ul><li><strong>mode</strong>：指定渲染的模式；</li><li><strong>count</strong>：指定渲染的元素个数；</li><li><strong>type</strong>：指定渲染的<strong>索引</strong>的数据类型；</li><li><strong>indices</strong>：索引存储位置的指针；</li></ul><h2 id="渲染模式"><a href="#渲染模式" class="headerlink" title="渲染模式"></a>渲染模式</h2><h3 id="GL-TRIANGLES"><a href="#GL-TRIANGLES" class="headerlink" title="GL_TRIANGLES"></a>GL_TRIANGLES</h3><p>每三个顶点绘制一个三角形，如果顶点数量不是3的倍数，则忽略最后一个或两个顶点。</p><p>例如：<strong>1，2，3，4，5，6，7</strong>，使用该模式绘制图形，则生成两个三角形<strong>1，2，3</strong>和<strong>4，5，6</strong>。</p><h3 id="GL-TRIANGLE-STRIP"><a href="#GL-TRIANGLE-STRIP" class="headerlink" title="GL_TRIANGLE_STRIP"></a>GL_TRIANGLE_STRIP</h3><ul><li>当前顶点序号n是<strong>偶数</strong>时，三角形三个顶点的顺序是(n - 2, n - 1, n )；</li><li>当前顶点序号n是<strong>奇数</strong>时，三角形三个顶点的顺序是(n - 1, n - 2, n)；</li></ul><h3 id="GL-TRIANGLE-FAN"><a href="#GL-TRIANGLE-FAN" class="headerlink" title="GL_TRIANGLE_FAN"></a>GL_TRIANGLE_FAN</h3><p>以<strong>第一个点为中心点</strong>，其他顶点为<strong>边缘点</strong>，绘制一系列组成扇形的相邻三角形。</p><p>例如：<strong>1，2，3，4，5</strong>，使用该模式绘制图形，则生成三个三角形<strong>1，2，3</strong>和<strong>1，3，4</strong>和<strong>1，4，5</strong>。</p>]]></content>
    
    
    <summary type="html">计算机图形学</summary>
    
    
    
    <category term="计算机图形学" scheme="https://1.15.86.100/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9B%BE%E5%BD%A2%E5%AD%A6/"/>
    
    
    <category term="OpenGL" scheme="https://1.15.86.100/tags/OpenGL/"/>
    
  </entry>
  
  <entry>
    <title>Linux-C语言</title>
    <link href="https://1.15.86.100/2021/09/06/Linux-C%E8%AF%AD%E8%A8%80/"/>
    <id>https://1.15.86.100/2021/09/06/Linux-C%E8%AF%AD%E8%A8%80/</id>
    <published>2021-09-06T08:57:21.000Z</published>
    <updated>2021-09-07T12:01:15.362Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Linux-C语言"><a href="#Linux-C语言" class="headerlink" title="Linux C语言"></a>Linux C语言</h1><h2 id="GCC"><a href="#GCC" class="headerlink" title="GCC"></a>GCC</h2><h3 id="gcc处理过程"><a href="#gcc处理过程" class="headerlink" title="gcc处理过程"></a>gcc处理过程</h3><ul><li><strong>预处理</strong>：<code>gcc -E</code>，将<code>.c</code>文件<strong>头文件展开，宏替换</strong>生成<code>.i</code>文件；</li><li><strong>编译</strong>：<code>gcc -S</code>，将<code>.i</code>文件编译成<strong>汇编文件</strong>生成<code>.s</code>文件；</li><li><strong>汇编</strong>：<code>gcc -c</code>，将<code>.s</code>文件进行<strong>汇编</strong>生成二进制<code>.o</code>文件；</li><li><strong>链接</strong>：<code>gcc</code>，将<code>.o</code>文件和函数库的文件组合生成目标<strong>可执行文件</strong><code>.out</code>；</li></ul><h3 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h3><h4 id="o"><a href="#o" class="headerlink" title="-o"></a>-o</h4><p>制定目标名称</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gcc -o hello.exe hello.c</span><br></pre></td></tr></tbody></table></figure><h4 id="g"><a href="#g" class="headerlink" title="-g"></a>-g</h4><p>在编译的时候，产生调试信息。</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gcc -o hello.exe hello.c -g</span><br></pre></td></tr></tbody></table></figure><h4 id="I"><a href="#I" class="headerlink" title="-I"></a>-I</h4><p>指定头文件目录</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gcc -o hello.exe hello.c -I /home/c</span><br></pre></td></tr></tbody></table></figure><h2 id="静态库"><a href="#静态库" class="headerlink" title="静态库"></a>静态库</h2><h3 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h3><p>避免源代码泄露</p><h4 id="命名规则"><a href="#命名规则" class="headerlink" title="命名规则"></a>命名规则</h4><p><code>lib + 库名字 + .a</code></p><h3 id="制作过程"><a href="#制作过程" class="headerlink" title="制作过程"></a>制作过程</h3><h4 id="编写源代码"><a href="#编写源代码" class="headerlink" title="编写源代码"></a>编写源代码</h4><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">//tmp/src/add.c</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"head.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="keyword">return</span> a + b;</span><br><span class="line">}</span><br><span class="line"><span class="comment">//tmp/src/sub.c</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"head.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sub</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="keyword">return</span> a - b;</span><br><span class="line">}</span><br><span class="line"><span class="comment">//tmp/src/mul.c</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"head.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">mul</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="keyword">return</span> a * b;</span><br><span class="line">}</span><br><span class="line"><span class="comment">//tmp/src/div.c</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"head.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">div</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="keyword">return</span> a/b;</span><br><span class="line">}</span><br><span class="line"><span class="comment">//tmp/include/head.h</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> _HEAD_H_</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _HEAD_H_</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sub</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">mul</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">div</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 文件结构 */</span></span><br><span class="line">root@VM<span class="number">-0</span><span class="number">-2</span>-ubuntu:~<span class="meta"># tree tmp</span></span><br><span class="line">tmp</span><br><span class="line">├── include</span><br><span class="line">│&nbsp;&nbsp; └── head.h</span><br><span class="line">├── lib</span><br><span class="line">├── main.c</span><br><span class="line">└── src</span><br><span class="line">    ├── add.c</span><br><span class="line">    ├── div.c</span><br><span class="line">    ├── mul.c</span><br><span class="line">    └── sub.c</span><br></pre></td></tr></tbody></table></figure><h4 id="生成-o-文件"><a href="#生成-o-文件" class="headerlink" title="生成.o 文件"></a>生成<code>.o</code> 文件</h4><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">root@VM-0-2-ubuntu:~/tmp/src# gcc -c *.c -I ../include/</span><br><span class="line"></span><br><span class="line">root@VM-0-2-ubuntu:~# tree tmp</span><br><span class="line">tmp</span><br><span class="line">├── include</span><br><span class="line">│&nbsp;&nbsp; └── head.h</span><br><span class="line">├── lib</span><br><span class="line">├── main.c</span><br><span class="line">└── src</span><br><span class="line">    ├── add.c</span><br><span class="line">    ├── add.o</span><br><span class="line">    ├── div.c</span><br><span class="line">    ├── div.o</span><br><span class="line">    ├── mul.c</span><br><span class="line">    ├── mul.o</span><br><span class="line">    ├── sub.c</span><br><span class="line">    └── sub.o</span><br></pre></td></tr></tbody></table></figure><h4 id="打包-o文件"><a href="#打包-o文件" class="headerlink" title="打包.o文件"></a>打包<code>.o</code>文件</h4><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ar rcs [静态库名字] [.o文件]</span><br></pre></td></tr></tbody></table></figure><p><img src="/2021/09/06/Linux-C%E8%AF%AD%E8%A8%80/image-20210906193744531.png" alt="image-20210906193744531"></p><h4 id="发布静态库和头文件"><a href="#发布静态库和头文件" class="headerlink" title="发布静态库和头文件"></a>发布静态库和头文件</h4><p>将<strong>静态库文件<code>.a</code></strong>拷贝到<code>lib</code>目录，头文件存放于<code>include</code>目录即可。</p><p><img src="/2021/09/06/Linux-C%E8%AF%AD%E8%A8%80/image-20210906193949386.png" alt="image-20210906193949386"></p><h4 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h4><p><strong>main.c</strong>文件：</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"head.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="keyword">int</span> a = <span class="number">23</span>, b = <span class="number">7</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"add:%d\n"</span>, add(a, b));</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"sub:%d\n"</span>, sub(a, b));</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"mul:%d\n"</span>, mul(a, b));</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"div:%d\n"</span>, div(a, b));</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><strong>编译</strong>：</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">root@VM-0-2-ubuntu:~/tmp# gcc main.c -o main.out lib/libF.a -I include/</span><br></pre></td></tr></tbody></table></figure><p><strong>运行</strong>：</p><p><img src="/2021/09/06/Linux-C%E8%AF%AD%E8%A8%80/image-20210906194836658.png" alt="image-20210906194836658"></p><h2 id="动态库"><a href="#动态库" class="headerlink" title="动态库"></a>动态库</h2><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><h4 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h4><ul><li>执行程序体积小；</li><li>动态库更新不需要重新编译程序；</li></ul><h4 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h4><ul><li>加载速度吗；</li><li>比较麻烦；</li></ul><h4 id="命名规则-1"><a href="#命名规则-1" class="headerlink" title="命名规则"></a>命名规则</h4><p><code>lib + 库名字 + .so</code></p><h3 id="生成-o文件"><a href="#生成-o文件" class="headerlink" title="生成.o文件"></a>生成<code>.o</code>文件</h3><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">root@VM-0-2-ubuntu:~/tmp/src# gcc -fPIC -c *.c -I ../include/</span><br></pre></td></tr></tbody></table></figure><h3 id="打包-o文件-1"><a href="#打包-o文件-1" class="headerlink" title="打包.o文件"></a>打包<code>.o</code>文件</h3><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">root@VM-0-2-ubuntu:~/tmp/src# gcc -shared -o libMyShared.so *.o -I ../include/</span><br></pre></td></tr></tbody></table></figure><h3 id="使用-1"><a href="#使用-1" class="headerlink" title="使用"></a>使用</h3><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">root@VM-0-2-ubuntu:~/tmp# gcc main.c -o main.out lib/libMyShared.so -I include/</span><br></pre></td></tr></tbody></table></figure><h2 id="makefile"><a href="#makefile" class="headerlink" title="makefile"></a>makefile</h2><h3 id="makefile规则"><a href="#makefile规则" class="headerlink" title="makefile规则"></a>makefile规则</h3><ul><li>生成最终文件的规则必须写在最上面；</li></ul><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">目标:依赖</span><br><span class="line">生成命令</span><br><span class="line"></span><br><span class="line">app:../main.c add.c sub.c mul.c div.c</span><br><span class="line">gcc ../main.c add.c sub.c mul.c div.c -o app -I ../include</span><br></pre></td></tr></tbody></table></figure><h3 id="编译"><a href="#编译" class="headerlink" title="编译"></a>编译</h3><p>使用命令<code>make</code></p>]]></content>
    
    
    <summary type="html">Linux下C语言编译。</summary>
    
    
    
    <category term="Linux" scheme="https://1.15.86.100/categories/Linux/"/>
    
    <category term="C" scheme="https://1.15.86.100/categories/Linux/C/"/>
    
    
    <category term="gcc" scheme="https://1.15.86.100/tags/gcc/"/>
    
    <category term="Makefile" scheme="https://1.15.86.100/tags/Makefile/"/>
    
  </entry>
  
  <entry>
    <title>Linux-服务器搭建</title>
    <link href="https://1.15.86.100/2021/09/06/Linux-%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%90%AD%E5%BB%BA/"/>
    <id>https://1.15.86.100/2021/09/06/Linux-%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%90%AD%E5%BB%BA/</id>
    <published>2021-09-06T07:31:55.000Z</published>
    <updated>2021-09-06T12:38:00.304Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Linux-服务器搭建"><a href="#Linux-服务器搭建" class="headerlink" title="Linux 服务器搭建"></a>Linux 服务器搭建</h1><h2 id="ftp服务器"><a href="#ftp服务器" class="headerlink" title="ftp服务器"></a>ftp服务器</h2><h3 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h3><p>文件的上传和下载。</p><h3 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h3><h4 id="安装-vsftpd"><a href="#安装-vsftpd" class="headerlink" title="安装 vsftpd"></a>安装 <code>vsftpd</code></h4><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt install vsftpd</span><br></pre></td></tr></tbody></table></figure><p><img src="/2021/09/06/Linux-%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%90%AD%E5%BB%BA/image-20210906153652906.png" alt="image-20210906153652906"></p><h4 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h4><p><strong>位置</strong>：<code>/etc/vsftpd.conf</code></p><p><img src="/2021/09/06/Linux-%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%90%AD%E5%BB%BA/image-20210906153912108.png" alt="image-20210906153912108"></p><p><img src="/2021/09/06/Linux-%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%90%AD%E5%BB%BA/image-20210906154127175.png" alt="image-20210906154127175"></p><h4 id="重启服务"><a href="#重启服务" class="headerlink" title="重启服务"></a>重启服务</h4><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">service vsftpd restart</span><br></pre></td></tr></tbody></table></figure><h3 id="ftp使用"><a href="#ftp使用" class="headerlink" title="ftp使用"></a>ftp使用</h3><h4 id="上传文件"><a href="#上传文件" class="headerlink" title="上传文件"></a>上传文件</h4><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">put [本地路径] [远程路径]</span><br></pre></td></tr></tbody></table></figure><h4 id="下载文件"><a href="#下载文件" class="headerlink" title="下载文件"></a>下载文件</h4><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">get [远程路径] [本地路径]</span><br></pre></td></tr></tbody></table></figure><h2 id="nfs服务器"><a href="#nfs服务器" class="headerlink" title="nfs服务器"></a>nfs服务器</h2><h3 id="功能-1"><a href="#功能-1" class="headerlink" title="功能"></a>功能</h3><p><strong>网络文件系统（net file system）</strong>，它可以允许网络中的计算机共享资源。</p><h3 id="步骤-1"><a href="#步骤-1" class="headerlink" title="步骤"></a>步骤</h3><h4 id="安装-nfs-kernel-server"><a href="#安装-nfs-kernel-server" class="headerlink" title="安装 nfs-kernel server"></a>安装 <code>nfs-kernel server</code></h4><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt install nfs-kernel-server</span><br></pre></td></tr></tbody></table></figure><h4 id="配置文件-1"><a href="#配置文件-1" class="headerlink" title="配置文件"></a>配置文件</h4><p><strong>位置</strong>：<code>/etc/exports</code></p><p><img src="/2021/09/06/Linux-%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%90%AD%E5%BB%BA/image-20210906162812642.png" alt="image-20210906162812642"></p><h4 id="重启服务-1"><a href="#重启服务-1" class="headerlink" title="重启服务"></a>重启服务</h4><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">service nfs-kernel-server restart</span><br></pre></td></tr></tbody></table></figure><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><h4 id="本地挂载"><a href="#本地挂载" class="headerlink" title="本地挂载"></a>本地挂载</h4><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mount [服务器ip:共享目录] [本地位置]</span><br></pre></td></tr></tbody></table></figure>]]></content>
    
    
    <summary type="html">ftp文件服务器，ssh服务器，nfs服务器搭建方法。</summary>
    
    
    
    <category term="Linux" scheme="https://1.15.86.100/categories/Linux/"/>
    
    
    <category term="ftp" scheme="https://1.15.86.100/tags/ftp/"/>
    
    <category term="ssh" scheme="https://1.15.86.100/tags/ssh/"/>
    
    <category term="nfs" scheme="https://1.15.86.100/tags/nfs/"/>
    
  </entry>
  
  <entry>
    <title>KMP算法</title>
    <link href="https://1.15.86.100/2021/08/19/KMP%E7%AE%97%E6%B3%95/"/>
    <id>https://1.15.86.100/2021/08/19/KMP%E7%AE%97%E6%B3%95/</id>
    <published>2021-08-19T07:25:18.000Z</published>
    <updated>2021-08-19T13:54:32.850Z</updated>
    
    <content type="html"><![CDATA[<h1 id="KMP"><a href="#KMP" class="headerlink" title="KMP"></a>KMP</h1><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p><strong>KMP(Knuth–Morris–Pratt string-searching algorithm)</strong>，由 <a href="https://en.wikipedia.org/wiki/James_H._Morris">James H. Morris</a> 、<a href="https://en.wikipedia.org/wiki/Donald_Knuth">Donald Knuth</a>、<a href="https://en.wikipedia.org/wiki/Vaughan_Pratt">Vaughan Pratt</a> 共同发明。主要用来查找字符串 <code>S</code> 中是否出现过字符串 <code>W</code>。其时间复杂度为 <script type="math/tex">Θ(m+n)</script>。</p><h2 id="算法"><a href="#算法" class="headerlink" title="算法"></a>算法</h2><h3 id="算法分析"><a href="#算法分析" class="headerlink" title="算法分析"></a>算法分析</h3><p>如下所示</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">m: 01234567890123456789012</span><br><span class="line">S: ABC ABCDAB ABCDABCDABDE</span><br><span class="line">W:     ABCDABD</span><br><span class="line">i:     0123456</span><br></pre></td></tr></tbody></table></figure><p><strong>ABCDAB</strong>已经匹配成功，且其<strong>最长后缀</strong>，<strong>AB</strong>和<strong>W</strong>（<strong>ABCDABD</strong>）的对应前缀<strong>AB</strong>匹配。</p><p>因此后续步骤中不需要重新匹配<strong>AB</strong>，可以直接从<strong>W[2]</strong>开始匹配，如下图：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">m: 01234567890123456789012</span><br><span class="line">S: ABC ABCDAB ABCDABCDABDE</span><br><span class="line">W:         ABCDABD</span><br><span class="line">i:         0123456</span><br></pre></td></tr></tbody></table></figure><p>所以，假设 <strong>S[i]</strong> 和 <strong>W[j]</strong> 不匹配（之前都匹配），<strong>len</strong>表示 <strong>W[0 : j-1]</strong> 的<strong>最长后缀</strong>和 <strong>W</strong> 匹配的长度；</p><p>则下一次其跳转的匹配位置为：<strong>S[i+1]</strong> 和 <strong>W[len + 1]</strong>。</p><h4 id="Next数组计算"><a href="#Next数组计算" class="headerlink" title="Next数组计算"></a>Next数组计算</h4><ul><li><p>Next[0] = 0；</p></li><li><p>对于第 <strong>i + 1</strong> 位置的Next值：</p><ul><li><p>如果 <strong>W[Next[i]] = W[i]</strong>，则 <strong>Next[i + 1] = Next[i] +1</strong>；【待证明1】</p></li><li><p>否则，如果 <strong>W[Next[Next[i]]] = W[Next[i]]</strong>，则 <strong>Next[i + 1] = Next[Next[i]] + 1</strong>；【待证明2】</p></li><li><h6 id="…………"><a href="#…………" class="headerlink" title="…………"></a>…………</h6></li><li><p>否则，<strong>Next[i + 1] = 0</strong>；</p></li></ul></li></ul><h5 id="证明1"><a href="#证明1" class="headerlink" title="证明1"></a>证明1</h5><p>对于数组<strong>W</strong>，设 <strong>Next[i] = k</strong>；</p><p>有：W[0 : k-1] = W[i-k : i-1]；</p><p>又因为 <strong>W[Next[i]] = W[i]</strong>，即 <strong>W[k] = W[i]</strong>，所以有：W[0 : k] = W[i + k : i]；</p><p>所以：<strong>Next[i + 1] = Next[i] +1</strong>；</p><h5 id="证明2"><a href="#证明2" class="headerlink" title="证明2"></a>证明2</h5><p>对于数组<strong>W</strong>，设 <strong>Next[i] = k</strong>，有：W[0 : k-1] = W[i-k : i-1]；</p><p>对于 <strong>Next[Next[i]]</strong> 即 <strong>Next[k]</strong>，令<strong>t = Next[k]</strong>，且 <strong>t &lt; k</strong>有：W[0 : t-1] = W[k-t : k-1]；</p><p>所以：W[0 : t-1] = W[k-t : k-1] = W[i-t : i-1]；</p><p>又因为：<strong>W[Next[Next[i]]] = W[Next[i]]</strong>，即 <strong>W[t] = W[k]</strong>；</p><p>所以：<strong>W[0 : t] = W[i-t : i]</strong>，所以，<strong>Next[i + 1] = t +1</strong>；</p><h3 id="伪代码"><a href="#伪代码" class="headerlink" title="伪代码"></a>伪代码</h3><h4 id="主程序"><a href="#主程序" class="headerlink" title="主程序"></a>主程序</h4><blockquote><ul><li>输入：字符串<strong>S</strong>，字符串<strong>W</strong>（被查找）；</li><li>输出：整数<strong>P</strong>（字符串<strong>W</strong>在<strong>S</strong>中的位置）</li><li>令<strong>j=1，k=1</strong>；</li><li>计算<strong>T</strong>数组</li><li><strong>while</strong> j &lt; len(S) <strong>do</strong>：<ul><li><strong>if</strong> W[k] = S[j] <strong>then</strong>：<ul><li>j = j + 1；</li><li>k = k + 1；</li><li><strong>if</strong> k = len(W) <strong>then</strong>：<ul><li>P = j - k；</li><li><strong>return</strong> P；</li></ul></li></ul></li><li><strong>else</strong>：<ul><li>k = T[k]；</li><li>j = j + 1；</li></ul></li></ul></li></ul></blockquote><h4 id="计算T数组子程序"><a href="#计算T数组子程序" class="headerlink" title="计算T数组子程序"></a>计算T数组子程序</h4><blockquote><ul><li>输入：字符串<strong>W</strong>（被查找）；</li><li>输出：数组<strong>Next</strong>；</li><li>令：<ul><li>pos = 1：Next中当前计算的位置；</li><li>cnd = 0;</li></ul></li><li>Next[0] = 0；</li><li><strong>while</strong> pos &lt; len(W) <strong>do</strong>：<ul><li><strong>if</strong> cnd &gt; 1 <strong>and</strong> W[pos - 1] = W[cnd] <strong>then</strong>：<ul><li>Next[pos] = Next[cnd] + 1；</li><li>pos = pos + 1；</li><li>cnd = cnd +1；</li></ul></li><li><strong>else if</strong> cnd = 0：<ul><li>Next[pos] = 0；</li><li>cnd = cnd + 1；</li></ul></li><li><strong>else</strong>：<ul><li>cnd = Next[cnd]；</li></ul></li></ul></li></ul></blockquote><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXN 10000</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> W[MAXN];</span><br><span class="line"><span class="keyword">char</span> S[MAXN];</span><br><span class="line"><span class="keyword">int</span> Next[MAXN];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">KMP</span><span class="params">(<span class="keyword">char</span> s[], <span class="keyword">char</span> w[], <span class="keyword">int</span> s_len, <span class="keyword">int</span> w_len)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">get_next</span><span class="params">(<span class="keyword">char</span> w[], <span class="keyword">int</span> w_len, <span class="keyword">int</span> next[])</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Input S:\n"</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%s"</span>, S);</span><br><span class="line">    <span class="keyword">int</span> s_len = <span class="built_in">strlen</span>(S);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Input W:\n"</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%s"</span>, W);</span><br><span class="line">    <span class="keyword">int</span> w_len = <span class="built_in">strlen</span>(W);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, <span class="built_in">KMP</span>(S, W, s_len, w_len));</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">get_next</span><span class="params">(<span class="keyword">char</span> w[], <span class="keyword">int</span> w_len, <span class="keyword">int</span> next[])</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    next[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">1</span>, j = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(i &lt; w_len)</span><br><span class="line">    {</span><br><span class="line">        <span class="keyword">if</span>(i &gt; <span class="number">1</span> &amp;&amp; w[i - <span class="number">1</span>] == w[j])</span><br><span class="line">            next[i++] = next[j++] + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(j == <span class="number">0</span>)</span><br><span class="line">            next[i++] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            j = next[j];</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">KMP</span><span class="params">(<span class="keyword">char</span> s[], <span class="keyword">char</span> w[], <span class="keyword">int</span> s_len, <span class="keyword">int</span> w_len)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="built_in">get_next</span>(w, w_len, Next);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>, j = <span class="number">0</span>; i &lt; s_len;)</span><br><span class="line">    {</span><br><span class="line">        <span class="keyword">if</span>(s[i] == w[j])</span><br><span class="line">        {</span><br><span class="line">            i++;</span><br><span class="line">            j++;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        {</span><br><span class="line">            j = Next[j];</span><br><span class="line">            i++;</span><br><span class="line">        } </span><br><span class="line">        <span class="keyword">if</span>(j == w_len)</span><br><span class="line">            <span class="keyword">return</span> i - w_len + <span class="number">1</span>;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><a href="https://github.com/baowj-678/Cpp/tree/master/Algorithm/KMP">Code</a></p>]]></content>
    
    
    <summary type="html">对字符串匹配算法KMP的介绍。</summary>
    
    
    
    <category term="算法" scheme="https://1.15.86.100/categories/%E7%AE%97%E6%B3%95/"/>
    
    
  </entry>
  
  <entry>
    <title>Linux-系统管理</title>
    <link href="https://1.15.86.100/2021/08/18/Linux-%E7%B3%BB%E7%BB%9F%E7%AE%A1%E7%90%86/"/>
    <id>https://1.15.86.100/2021/08/18/Linux-%E7%B3%BB%E7%BB%9F%E7%AE%A1%E7%90%86/</id>
    <published>2021-08-18T12:48:21.000Z</published>
    <updated>2021-09-09T02:54:15.388Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Linux系统管理"><a href="#Linux系统管理" class="headerlink" title="Linux系统管理"></a>Linux系统管理</h1><h2 id="软件管理"><a href="#软件管理" class="headerlink" title="软件管理"></a>软件管理</h2><h4 id="软件安装"><a href="#软件安装" class="headerlink" title="软件安装"></a>软件安装</h4><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt install 软件名</span><br></pre></td></tr></tbody></table></figure><h4 id="软件卸载"><a href="#软件卸载" class="headerlink" title="软件卸载"></a>软件卸载</h4><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt remove 软件名</span><br></pre></td></tr></tbody></table></figure><h4 id="更新安装包"><a href="#更新安装包" class="headerlink" title="更新安装包"></a>更新安装包</h4><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt upgrade</span><br></pre></td></tr></tbody></table></figure><h2 id="进程管理"><a href="#进程管理" class="headerlink" title="进程管理"></a>进程管理</h2><h4 id="PCB"><a href="#PCB" class="headerlink" title="PCB"></a>PCB</h4><p><strong>Linux 0.11</strong>的<strong>PCB（进程控制块）</strong>结构体</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">task_struct</span> {</span></span><br><span class="line"><span class="comment">/* these are hardcoded - don't touch */</span></span><br><span class="line"><span class="keyword">long</span> state;<span class="comment">/* -1 unrunnable, 0 runnable, &gt;0 stopped */</span></span><br><span class="line"><span class="keyword">long</span> counter;</span><br><span class="line"><span class="keyword">long</span> priority;</span><br><span class="line"><span class="keyword">long</span> signal;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">sigaction</span> <span class="title">sigaction</span>[32];</span></span><br><span class="line"><span class="keyword">long</span> blocked;<span class="comment">/* bitmap of masked signals */</span></span><br><span class="line"><span class="comment">/* various fields */</span></span><br><span class="line"><span class="keyword">int</span> exit_code;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">long</span> start_code,end_code,end_data,brk,start_stack;</span><br><span class="line"><span class="keyword">long</span> pid,father,pgrp,session,leader;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">short</span> uid,euid,suid;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">short</span> gid,egid,sgid;</span><br><span class="line"><span class="keyword">long</span> alarm;</span><br><span class="line"><span class="keyword">long</span> utime,stime,cutime,cstime,start_time;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">short</span> used_math;</span><br><span class="line"><span class="comment">/* file system info */</span></span><br><span class="line"><span class="keyword">int</span> tty;<span class="comment">/* -1 if no tty, so it must be signed */</span></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">short</span> umask;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">m_inode</span> * <span class="title">pwd</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">m_inode</span> * <span class="title">root</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">m_inode</span> * <span class="title">executable</span>;</span></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">long</span> close_on_exec;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">file</span> * <span class="title">filp</span>[<span class="title">NR_OPEN</span>];</span></span><br><span class="line"><span class="comment">/* ldt for this task 0 - zero 1 - cs 2 - ds&amp;ss */</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">desc_struct</span> <span class="title">ldt</span>[3];</span></span><br><span class="line"><span class="comment">/* tss for this task */</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">tss_struct</span> <span class="title">tss</span>;</span></span><br><span class="line">};</span><br></pre></td></tr></tbody></table></figure><h4 id="查看进程"><a href="#查看进程" class="headerlink" title="查看进程"></a>查看进程</h4><p>查看所有进程</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">ps [选项]</span><br><span class="line"><span class="meta">#</span><span class="bash"> -aux：查看系统中所有进程，使用BSD操作系统格式</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> -le：查看系统中所有进程，使用Linux标准命令格式</span></span><br><span class="line"></span><br><span class="line">pstree [选项]</span><br><span class="line"><span class="meta">#</span><span class="bash"> 显示进程树</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> -p：显示进程的PID</span>  </span><br><span class="line"><span class="meta">#</span><span class="bash"> -u：显示进程的所属用户</span></span><br></pre></td></tr></tbody></table></figure><p><img src="/2021/08/18/Linux-%E7%B3%BB%E7%BB%9F%E7%AE%A1%E7%90%86/image-20210818210901189.png" alt="image-20210818210901189"></p><ul><li><p><strong>USER</strong>：该进程是由哪个用户产生的；</p></li><li><p><strong>PID</strong>：进程的ID号；</p></li><li><p><strong>%CPU</strong>：该进程占用CPU资源的百分比，占用越高，进程越耗费资源；</p></li><li><p><strong>%MEN</strong>：该进程占用物理内存的百分比，占用越高，进程越耗费资源；</p></li><li><p><strong>VSZ</strong>: 该进程占用虚拟内存的大小，单位KB；</p></li><li><p><strong>RSS</strong>：该进程占用实际物理内存的大小，单位KB；</p></li><li><p><strong>TTY</strong>：该进程是在哪个终端中运行的。其中tty1-tty7代表本地控制台终端，tty1-tty6是本地的字符界面终端，tty7 是图形终端。pts/0-255代表虚拟终端；</p></li><li><p><strong>STAT</strong>：进程状态。常见的状态有：</p></li><li><ul><li>R：运行<ul><li>S：睡眠</li><li>T：停止状态</li><li>s：包含子进程</li><li>+：位于后台 </li></ul></li></ul></li><li><p><strong>START</strong>：该进程的启动时间；</p></li><li><p><strong>TIME</strong>：该进程占用CPU的运算时间，注意不是系统时间；</p></li><li><p><strong>COMMAND</strong>：产生此进程的命令名；</p></li></ul><h4 id="终止进程"><a href="#终止进程" class="headerlink" title="终止进程"></a>终止进程</h4><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">kill -l</span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看可用的进程信号</span></span><br><span class="line"></span><br><span class="line">kill -9 pid</span><br><span class="line"><span class="meta">#</span><span class="bash"> 杀死进程</span></span><br><span class="line"></span><br><span class="line">killall [选项][信号] 进程名 </span><br><span class="line"><span class="meta">#</span><span class="bash"> 按照进程名杀死进程</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> -i：交互式，询问是否要杀死某个进程</span>  </span><br><span class="line"><span class="meta">#</span><span class="bash"> -I：忽略进程名的大小写</span>  </span><br><span class="line"></span><br><span class="line">pkill [选项] [信号] 进程名 </span><br><span class="line"><span class="meta">#</span><span class="bash"> 按照进程名终止进程</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> -t 终端号：按照终端号踢出用户</span></span><br></pre></td></tr></tbody></table></figure><h4 id="进程后台运行"><a href="#进程后台运行" class="headerlink" title="进程后台运行"></a>进程后台运行</h4><ul><li><p><code>&amp;</code>：在命令后面加上 <code>&amp;</code>；</p>  <figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nuhup [命令] $</span><br></pre></td></tr></tbody></table></figure></li><li><p>查看后台进程</p>  <figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jobs -l</span><br></pre></td></tr></tbody></table></figure></li><li><p>将后台暂停的工作恢复到前台执行；</p>  <figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">fg %工作号</span><br><span class="line"><span class="meta">#</span><span class="bash"> %工作号：%号可以省略，但是注意工作号和PID的区别</span></span><br></pre></td></tr></tbody></table></figure></li><li><p>把后台暂停的工作恢复到后台执行；</p>  <figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">bg %工作号</span><br><span class="line"><span class="meta">#</span><span class="bash"> 后台恢复执行的命令，是不能和前台有交互的，否则不能恢复到后台执行。</span></span><br></pre></td></tr></tbody></table></figure></li></ul><h4 id="其他操作"><a href="#其他操作" class="headerlink" title="其他操作"></a>其他操作</h4><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 杀死当前bash内运行的进程</span></span><br><span class="line">Ctrl+c</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 挂起当前bash内运行的进程</span></span><br><span class="line">Ctrl+z</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 运行刚刚挂起的进程</span></span><br><span class="line">Ctrl+y</span><br></pre></td></tr></tbody></table></figure><h2 id="系统管理"><a href="#系统管理" class="headerlink" title="系统管理"></a>系统管理</h2><h4 id="查看系统健康状态"><a href="#查看系统健康状态" class="headerlink" title="查看系统健康状态"></a>查看系统健康状态</h4><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">top [ 选项] </span><br><span class="line"><span class="meta">#</span><span class="bash"> -d  秒数：指定top命令每隔几秒更新。默认是3秒 在top命令的交互模式当中可以执行的命令</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> ?或h：显示交互模式的帮助</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> P：以CPU使用率排序，默认就是此项</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> M：以内存的使用率排序</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> N：以PID排序</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> q：退出top</span></span><br></pre></td></tr></tbody></table></figure><h4 id="查看系统资源"><a href="#查看系统资源" class="headerlink" title="查看系统资源"></a>查看系统资源</h4><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vmstat [刷新延时] [刷新次数]  </span><br></pre></td></tr></tbody></table></figure><h4 id="查看开机时内核检测信息"><a href="#查看开机时内核检测信息" class="headerlink" title="查看开机时内核检测信息"></a>查看开机时内核检测信息</h4><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">dmesg </span><br><span class="line">dmesg | grep CPU</span><br></pre></td></tr></tbody></table></figure><h4 id="查看内存使用状态"><a href="#查看内存使用状态" class="headerlink" title="查看内存使用状态"></a>查看内存使用状态</h4><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">free [选项]</span><br><span class="line"><span class="meta">#</span><span class="bash"> -b：以字节为单位显示</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> -k：以KB为单位显示，默认就是以KB为单位显示</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> -m：以MB为单位显示</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> -g：以GB为单位显示</span></span><br></pre></td></tr></tbody></table></figure><h4 id="查看CPU信息"><a href="#查看CPU信息" class="headerlink" title="查看CPU信息"></a>查看CPU信息</h4><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat /proc/cpuinfo</span><br></pre></td></tr></tbody></table></figure><p><img src="/2021/08/18/Linux-%E7%B3%BB%E7%BB%9F%E7%AE%A1%E7%90%86/image-20210818214146172.png" alt="image-20210818214146172"></p><h4 id="查看系统与内核相关信息"><a href="#查看系统与内核相关信息" class="headerlink" title="查看系统与内核相关信息"></a>查看系统与内核相关信息</h4><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">uname [选项]</span><br><span class="line"><span class="meta">#</span><span class="bash"> -a：查看系统所有相关信息；</span>  </span><br><span class="line"><span class="meta">#</span><span class="bash"> -r：查看内核版本；</span>  </span><br><span class="line"><span class="meta">#</span><span class="bash"> -s：查看内核名称。</span> </span><br></pre></td></tr></tbody></table></figure><p><img src="/2021/08/18/Linux-%E7%B3%BB%E7%BB%9F%E7%AE%A1%E7%90%86/image-20210818214302083.png" alt="image-20210818214302083"></p><h4 id="查看当前系统的位数"><a href="#查看当前系统的位数" class="headerlink" title="查看当前系统的位数"></a>查看当前系统的位数</h4><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">file /bin/ls</span><br></pre></td></tr></tbody></table></figure><h4 id="查询当前Linux系统的发行版本"><a href="#查询当前Linux系统的发行版本" class="headerlink" title="查询当前Linux系统的发行版本"></a>查询当前Linux系统的发行版本</h4><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lsb_release -a</span><br></pre></td></tr></tbody></table></figure><h4 id="查看进程打开或使用的文件信息"><a href="#查看进程打开或使用的文件信息" class="headerlink" title="查看进程打开或使用的文件信息"></a>查看进程打开或使用的文件信息</h4><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">lsof [选项]</span><br><span class="line"><span class="meta">#</span><span class="bash"> -c  字符串：只列出以字符串开头的进程打开的文件</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> -u  用户名：只列出某个用户的进程打开的文件</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> -p  pid：列出某个PID进程打开的文件</span></span><br></pre></td></tr></tbody></table></figure><h2 id="启动管理"><a href="#启动管理" class="headerlink" title="启动管理"></a>启动管理</h2><h3 id="运行级别"><a href="#运行级别" class="headerlink" title="运行级别"></a>运行级别</h3><h4 id="查看运行级别"><a href="#查看运行级别" class="headerlink" title="查看运行级别"></a>查看运行级别</h4><p><code>runlevel</code></p><h4 id="改变运行级别"><a href="#改变运行级别" class="headerlink" title="改变运行级别"></a>改变运行级别</h4><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">init 运行级别</span><br></pre></td></tr></tbody></table></figure><h4 id="系统运行级别"><a href="#系统运行级别" class="headerlink" title="系统运行级别"></a>系统运行级别</h4><p>​                 <img src="/2021/08/18/Linux-%E7%B3%BB%E7%BB%9F%E7%AE%A1%E7%90%86/1.png" alt="img"></p><h2 id="备份与恢复"><a href="#备份与恢复" class="headerlink" title="备份与恢复"></a>备份与恢复</h2><h4 id="dump"><a href="#dump" class="headerlink" title="dump"></a>dump</h4><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">dump [选项] 备份之后的文件名 原文件或目录</span><br><span class="line"><span class="meta">#</span><span class="bash"> -level：0-9十个备份级别</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> -f 文件名：指定备份之后的文件名</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> -u：备份成功之后，把备份时间记录在/etc/dumpdates文件</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> -v：显示备份过程中更多的输出信息</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> -j：调用bzlib库压缩备份文件，其实就是把备份文件压缩为.bz2格式，默认压缩等级是2</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> -W：显示允许被dump的分区的备份等级及备份时间</span></span><br></pre></td></tr></tbody></table></figure><h4 id="restore"><a href="#restore" class="headerlink" title="restore"></a>restore</h4><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">restore [模式选项] [选项]  </span><br><span class="line"><span class="meta">#</span><span class="bash"> 模式选项：</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> -C：比较备份数据和实际数据的变化</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> -i：进入交互模式，手工选择需要恢复的文件</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> -t：查看模式，用于查看备份文件中拥有哪些数据</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> -r：还原模式，用于数据还原</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 选项：</span> </span><br><span class="line"><span class="meta">#</span><span class="bash"> -f：指定备份文件的文件名</span></span><br></pre></td></tr></tbody></table></figure>]]></content>
    
    
    <summary type="html">Linux系统管理。</summary>
    
    
    
    <category term="Linux" scheme="https://1.15.86.100/categories/Linux/"/>
    
    
  </entry>
  
  <entry>
    <title>Hexo-多设备配置</title>
    <link href="https://1.15.86.100/2021/08/18/Hexo-%E5%A4%9A%E8%AE%BE%E5%A4%87%E9%85%8D%E7%BD%AE/"/>
    <id>https://1.15.86.100/2021/08/18/Hexo-%E5%A4%9A%E8%AE%BE%E5%A4%87%E9%85%8D%E7%BD%AE/</id>
    <published>2021-08-18T03:44:57.000Z</published>
    <updated>2021-08-18T12:29:28.119Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Hexo-多设备配置"><a href="#Hexo-多设备配置" class="headerlink" title="Hexo-多设备配置"></a>Hexo-多设备配置</h1><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><h2 id="git服务器配置"><a href="#git服务器配置" class="headerlink" title="git服务器配置"></a>git服务器配置</h2><h2 id="本地配置"><a href="#本地配置" class="headerlink" title="本地配置"></a>本地配置</h2><h2 id="其他设备配置-ubuntu"><a href="#其他设备配置-ubuntu" class="headerlink" title="其他设备配置(ubuntu)"></a>其他设备配置(ubuntu)</h2><h3 id="安装hexo"><a href="#安装hexo" class="headerlink" title="安装hexo"></a>安装hexo</h3><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo install npm</span><br><span class="line"></span><br><span class="line">npm install hexo</span><br></pre></td></tr></tbody></table></figure><h3 id="克隆文件仓库"><a href="#克隆文件仓库" class="headerlink" title="克隆文件仓库"></a>克隆文件仓库</h3><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone ubuntu@1.15.86.100:/hexo/GitLibrary/data.git</span><br></pre></td></tr></tbody></table></figure>]]></content>
    
    
    <summary type="html">利用git仓库保存hexo文件，可以在多个设备编辑博客并实现同步。</summary>
    
    
    
    <category term="blog" scheme="https://1.15.86.100/categories/blog/"/>
    
    
    <category term="Hexo" scheme="https://1.15.86.100/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>Linux-Shell编程</title>
    <link href="https://1.15.86.100/2021/08/16/Linux-Shell%E7%BC%96%E7%A8%8B/"/>
    <id>https://1.15.86.100/2021/08/16/Linux-Shell%E7%BC%96%E7%A8%8B/</id>
    <published>2021-08-16T15:07:12.000Z</published>
    <updated>2021-08-18T12:29:28.145Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Shell简介"><a href="#Shell简介" class="headerlink" title="Shell简介"></a>Shell简介</h1><h2 id="Shell简介-1"><a href="#Shell简介-1" class="headerlink" title="Shell简介"></a>Shell简介</h2><h3 id="Shell是什么"><a href="#Shell是什么" class="headerlink" title="Shell是什么"></a>Shell是什么</h3><ul><li>Shell是一个<strong>命令行解释器</strong>，它为用户提供了一个向Linux内核发送请求以便运行程序的界面系统级程序，用户可以用Shell来启动、挂起、停止甚至是编写一些程序；</li><li>Shell还是一个功能相当强大的编程语言，易编写，易调试，灵活性较强。Shell是解释执行的脚本语言，在Shell中可以直接调用Linux系统命令；</li></ul><h3 id="Shell分类"><a href="#Shell分类" class="headerlink" title="Shell分类"></a>Shell分类</h3><ul><li><p><strong>Bourne Shell</strong>：从1979起Unix就开始使用Bourne Shell，Bourne Shell的主文件名为<strong>sh</strong>，Bourne家族主要包括sh、ksh、<strong>Bash</strong>、psh、zsh；</p></li><li><p><strong>C Shell</strong>： C Shell主要在BSD版的Unix系统中使用，其语法和C语言相类似而得名，C家族主要包括：csh、tcsh；</p></li><li><strong>Bash</strong>： Bash与sh兼容，现在使用的Linux 就是使用Bash作为用户的基本Shell；</li></ul><h3 id="查看Linux支持的shell"><a href="#查看Linux支持的shell" class="headerlink" title="查看Linux支持的shell"></a>查看Linux支持的shell</h3><p><code>/etc/shells</code></p><p><img src="/2021/08/16/Linux-Shell%E7%BC%96%E7%A8%8B/image-20210816231159818.png" alt="image-20210816231159818"></p><h2 id="Bash基本功能"><a href="#Bash基本功能" class="headerlink" title="Bash基本功能"></a>Bash基本功能</h2><h3 id="脚本执行"><a href="#脚本执行" class="headerlink" title="脚本执行"></a>脚本执行</h3><ul><li>直接运行：<code>./hello.sh</code>；</li><li>Bash调用执行脚本：<code>bash hello.sh</code>，<code>sh hello.sh</code>；</li></ul><h3 id="输出语句"><a href="#输出语句" class="headerlink" title="输出语句"></a>输出语句</h3><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">echo [选项] [输出内容]</span><br><span class="line"><span class="meta">#</span><span class="bash"> -e： 支持反斜线控制的字符转换</span></span><br></pre></td></tr></tbody></table></figure><h3 id="历史命令"><a href="#历史命令" class="headerlink" title="历史命令"></a>历史命令</h3><p><code>history</code></p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">history [选项] [历史命令保存文件]</span><br><span class="line"><span class="meta">#</span><span class="bash"> -c：清空历史命令</span>  </span><br><span class="line"><span class="meta">#</span><span class="bash"> -w：把缓存中的历史命令写入历史命令保存文件，保存在：~/.bash_history</span> </span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h3 id="设置别名"><a href="#设置别名" class="headerlink" title="设置别名"></a>设置别名</h3><h4 id="设置别名-1"><a href="#设置别名-1" class="headerlink" title="设置别名"></a>设置别名</h4><p><code>alias 别名='原命令'</code></p><h4 id="删除别名"><a href="#删除别名" class="headerlink" title="删除别名"></a>删除别名</h4><p><code>unalias 别名</code></p><h4 id="查看别名"><a href="#查看别名" class="headerlink" title="查看别名"></a>查看别名</h4><p><code>alias</code></p><h3 id="命令执行顺序"><a href="#命令执行顺序" class="headerlink" title="命令执行顺序"></a>命令执行顺序</h3><p>1 第一顺位执行用绝对路径或相对路径执行的命令；</p><p>2 第二顺位执行别名；</p><p>3 第三顺位执行Bash的内部命令； </p><p>4 第四顺位执行按照$PATH环境变量定义的目录查找顺序找到的第一个命令；</p><h3 id="输出重定向"><a href="#输出重定向" class="headerlink" title="输出重定向"></a>输出重定向</h3><p>​                 <img src="/2021/08/16/Linux-Shell%E7%BC%96%E7%A8%8B/1.png" alt="img">        </p><p>​                 <img src="/2021/08/16/Linux-Shell%E7%BC%96%E7%A8%8B/2.png" alt="img">        </p><h3 id="多命令与管道"><a href="#多命令与管道" class="headerlink" title="多命令与管道"></a>多命令与管道</h3><p>​                 <img src="/2021/08/16/Linux-Shell%E7%BC%96%E7%A8%8B/3.png" alt="img">        </p><h4 id="管道"><a href="#管道" class="headerlink" title="管道"></a>管道</h4><p><code>命令1  |  命令2</code></p><p>命令1的正确输出作为命令2的操作对象</p><h3 id="通配符与特殊符号"><a href="#通配符与特殊符号" class="headerlink" title="通配符与特殊符号"></a>通配符与特殊符号</h3><h4 id="通配符"><a href="#通配符" class="headerlink" title="通配符"></a>通配符</h4><p>​                 <img src="/2021/08/16/Linux-Shell%E7%BC%96%E7%A8%8B/4.png" alt="img">        </p><h4 id="特殊符号"><a href="#特殊符号" class="headerlink" title="特殊符号"></a>特殊符号</h4><p>​                 <img src="/2021/08/16/Linux-Shell%E7%BC%96%E7%A8%8B/5.png" alt="img">        </p><h3 id="Bash的变量"><a href="#Bash的变量" class="headerlink" title="Bash的变量"></a>Bash的变量</h3><h4 id="变量定义"><a href="#变量定义" class="headerlink" title="变量定义"></a>变量定义</h4><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">name="bwj"</span><br></pre></td></tr></tbody></table></figure><h4 id="变量调用"><a href="#变量调用" class="headerlink" title="变量调用"></a>变量调用</h4><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo $name</span><br></pre></td></tr></tbody></table></figure><h4 id="变量查看"><a href="#变量查看" class="headerlink" title="变量查看"></a>变量查看</h4><p>查看Bash所有变量</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">set</span><br></pre></td></tr></tbody></table></figure><h4 id="删除变量"><a href="#删除变量" class="headerlink" title="删除变量"></a>删除变量</h4><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">unset [变量名]</span><br></pre></td></tr></tbody></table></figure><h3 id="Bash运算符"><a href="#Bash运算符" class="headerlink" title="Bash运算符"></a>Bash运算符</h3><h4 id="声明变量类型"><a href="#声明变量类型" class="headerlink" title="声明变量类型"></a>声明变量类型</h4><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">declare [+/-][选项] 变量名</span><br><span class="line"><span class="meta">#</span><span class="bash"> -：给变量设定类型属性</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> +：取消变量的类型属性</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> -i：将变量声明为整数型（<span class="built_in">integer</span>）</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> -x：将变量声明为环境变量</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> -p：显示指定变量的被声明的类型</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> <span class="built_in">declare</span> -i cc=<span class="variable">$aa</span>+<span class="variable">$bb</span></span></span><br></pre></td></tr></tbody></table></figure><h4 id="数值运算"><a href="#数值运算" class="headerlink" title="数值运算"></a>数值运算</h4><h4 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h4><p><code>declare -i cc=$aa+$bb</code></p><h4 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h4><p><strong>expr或let数值运算工具</strong></p><p> <code>dd=$(expr $​aa + $bb)</code></p><ul><li>dd的值是aa和bb的和。注意“+”号左右两侧必须有空格；</li></ul><h4 id="方法三"><a href="#方法三" class="headerlink" title="方法三"></a>方法三</h4><p><strong>“$((运算式))”或“$[运算式]”</strong></p><p><code>ff=$(( $aa+$bb ))</code></p><p><code>gg=$[ $aa+$bb ]</code></p><h4 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h4><p>​                 <img src="/2021/08/16/Linux-Shell%E7%BC%96%E7%A8%8B/9.png" alt="img"></p><pre><code>  #### 变量测试与内容替换 </code></pre><p><img src="/2021/08/16/Linux-Shell%E7%BC%96%E7%A8%8B/10.png" alt="img"></p><p>​        </p><h3 id="环境变量"><a href="#环境变量" class="headerlink" title="环境变量"></a>环境变量</h3><h4 id="设置环境变量"><a href="#设置环境变量" class="headerlink" title="设置环境变量"></a>设置环境变量</h4><p><code>export 变量名=变量值</code> </p><h4 id="查看环境变量"><a href="#查看环境变量" class="headerlink" title="查看环境变量"></a>查看环境变量</h4><p><code>env</code> </p><h4 id="删除环境变量"><a href="#删除环境变量" class="headerlink" title="删除环境变量"></a>删除环境变量</h4><p><code>unset 变量名</code></p><h4 id="添加PATH"><a href="#添加PATH" class="headerlink" title="添加PATH"></a>添加PATH</h4><p><code>PATH="$PATH":/root/sh</code>【重启会消失】</p><h4 id="系统提示符"><a href="#系统提示符" class="headerlink" title="系统提示符"></a>系统提示符</h4><p>定义系统提示符（例如：<code>ubuntu@VM-0-2-ubuntu:~$</code>）的变量：<code>PS1</code> </p><ul><li><p><strong>\d</strong>：显示日期，格式为“星期 月 日”；</p></li><li><p><strong>\h</strong>：显示简写主机名。如默认主机名“localhost” ；</p></li><li><p><strong>\t</strong>：显示24小时制时间，格式为“HH:MM:SS” ；</p></li><li><p><strong>\T</strong>：显示12小时制时间，格式为“HH:MM:SS”；</p></li><li><p><strong>\A</strong>：显示24小时制时间，格式为“HH:MM” ；</p></li><li><p><strong>\u</strong>：显示当前用户名；</p></li><li><p><strong>\w</strong>：显示当前所在目录的完整名称；</p></li><li><p><strong>\W</strong>：显示当前所在目录的最后一个目录；</p></li><li><p><strong>#</strong>：执行的第几个命令；</p></li><li><p><strong>$</strong>：提示符。如果是root用户会显示提示符为“#”，如果是普通用户会显示提示符为“$”；</p></li></ul><h3 id="环境变量配置"><a href="#环境变量配置" class="headerlink" title="环境变量配置"></a>环境变量配置</h3><h4 id="配置文件简介"><a href="#配置文件简介" class="headerlink" title="配置文件简介"></a>配置文件简介</h4><p>环境变量配置文件中主要是定义对系统的操作环境生效的系统默认环境变量，比如<strong>PATH、HISTSIZE、PS1、HOSTNAME</strong>等默认环境变量。</p><ul><li>/etc/profile </li><li>/etc/profile.d/*.sh </li><li>~/.bash_profile </li><li>~/.bashrc </li><li>/etc/bashrc</li></ul><h4 id="环境变量配置文件调用顺序"><a href="#环境变量配置文件调用顺序" class="headerlink" title="环境变量配置文件调用顺序"></a>环境变量配置文件调用顺序</h4><p>​                 <img src="/2021/08/16/Linux-Shell%E7%BC%96%E7%A8%8B/11.png" alt="img"> </p><h4 id="etc-profile的作用"><a href="#etc-profile的作用" class="headerlink" title="/etc/profile的作用"></a>/etc/profile的作用</h4><ul><li><strong>USER</strong>变量；</li><li><strong>LOGNAME</strong>变量；</li><li><strong>MAIL</strong>变量；</li><li><strong>PATH</strong>变量；</li><li><strong>HOSTNAME</strong>变量；</li><li><strong>HISTSIZE</strong>变量；</li><li><strong>umask</strong>；</li><li>调用<strong>/etc/profile.d/*.sh</strong>文件；</li></ul><h4 id="bash-history"><a href="#bash-history" class="headerlink" title="~/bash_history"></a>~/bash_history</h4><p>历史命令</p><h4 id="重新加载配置文件"><a href="#重新加载配置文件" class="headerlink" title="重新加载配置文件"></a>重新加载配置文件</h4><p><code>source 配置文件</code></p><h3 id="位置参数变量"><a href="#位置参数变量" class="headerlink" title="位置参数变量"></a>位置参数变量</h3><p>​                 <img src="/2021/08/16/Linux-Shell%E7%BC%96%E7%A8%8B/6.png" alt="img"> </p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 加法程序</span></span><br><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line">num1=$1</span><br><span class="line">num2=$2</span><br><span class="line">sum=$(($num1 + $num2))</span><br><span class="line">echo $sum</span><br></pre></td></tr></tbody></table></figure><h3 id="预定义变量"><a href="#预定义变量" class="headerlink" title="预定义变量"></a>预定义变量</h3><h4 id="预定义变量-1"><a href="#预定义变量-1" class="headerlink" title="预定义变量"></a>预定义变量</h4><p>​                 <img src="/2021/08/16/Linux-Shell%E7%BC%96%E7%A8%8B/8.png" alt="img"></p><h4 id="接收键盘输入"><a href="#接收键盘输入" class="headerlink" title="接收键盘输入"></a>接收键盘输入</h4><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">read [选项] [变量名]</span><br><span class="line"><span class="meta">#</span><span class="bash"> -p “提示信息”：在等待<span class="built_in">read</span>输入时，输出提示信息</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> -t 秒数：<span class="built_in">read</span>命令会一直等待用户输入，使用此选项可以指定等待时间</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> -n 字符数：<span class="built_in">read</span>命令只接受指定的字符数，就会执行</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> -s：隐藏输入的数据，适用于机密信息的输入</span></span><br></pre></td></tr></tbody></table></figure><h2 id="Shell编程"><a href="#Shell编程" class="headerlink" title="Shell编程"></a>Shell编程</h2><h3 id="比较判断"><a href="#比较判断" class="headerlink" title="比较判断"></a>比较判断</h3><h4 id="判断语句"><a href="#判断语句" class="headerlink" title="判断语句"></a>判断语句</h4><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">test [] /root/install.log</span><br><span class="line"></span><br><span class="line">[ [选项] /root/install.log ]</span><br></pre></td></tr></tbody></table></figure><h4 id="按照文件类型"><a href="#按照文件类型" class="headerlink" title="按照文件类型"></a>按照文件类型</h4><p><img src="/2021/08/16/Linux-Shell%E7%BC%96%E7%A8%8B/13.png" alt=""></p><h4 id="按照文件权限判断"><a href="#按照文件权限判断" class="headerlink" title="按照文件权限判断"></a>按照文件权限判断</h4><p><img src="/2021/08/16/Linux-Shell%E7%BC%96%E7%A8%8B/14.png" alt=""></p><h4 id="两个文件之间进行比较"><a href="#两个文件之间进行比较" class="headerlink" title="两个文件之间进行比较"></a>两个文件之间进行比较</h4><p><img src="/2021/08/16/Linux-Shell%E7%BC%96%E7%A8%8B/15.png" alt=""></p><h4 id="整数比较"><a href="#整数比较" class="headerlink" title="整数比较"></a>整数比较</h4><p><img src="/2021/08/16/Linux-Shell%E7%BC%96%E7%A8%8B/16.png" alt=""></p><h4 id="字符串判断"><a href="#字符串判断" class="headerlink" title="字符串判断"></a>字符串判断</h4><p><img src="/2021/08/16/Linux-Shell%E7%BC%96%E7%A8%8B/17.png" alt=""></p><h4 id="多重条件判断"><a href="#多重条件判断" class="headerlink" title="多重条件判断"></a>多重条件判断</h4><p><img src="/2021/08/16/Linux-Shell%E7%BC%96%E7%A8%8B/18.png" alt=""></p><h3 id="流程控制"><a href="#流程控制" class="headerlink" title="流程控制"></a>流程控制</h3><h4 id="if"><a href="#if" class="headerlink" title="if"></a>if</h4><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">if [ 条件判断式 ];then</span><br><span class="line">程序</span><br><span class="line">fi</span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">###############################</span></span></span><br><span class="line">if [ 条件判断式 ]</span><br><span class="line">then</span><br><span class="line">程序</span><br><span class="line">fi</span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">###############################</span></span></span><br><span class="line">if [ 条件判断式 ]</span><br><span class="line">then</span><br><span class="line">程序</span><br><span class="line">elif [ 条件判断式 ]</span><br><span class="line">then</span><br><span class="line">程序</span><br><span class="line">else</span><br><span class="line">程序</span><br><span class="line">fi</span><br></pre></td></tr></tbody></table></figure><h4 id="case"><a href="#case" class="headerlink" title="case"></a>case</h4><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">case "$变量名" in  </span><br><span class="line">    "值1")</span><br><span class="line">         如果变量的值等于值1，则执行程序1</span><br><span class="line">; ;</span><br><span class="line">    "值2")   </span><br><span class="line">         如果变量的值等于值2，则执行程序2  </span><br><span class="line">; ;  </span><br><span class="line">      …省略其他分支…  </span><br><span class="line">*)</span><br><span class="line">      如果变量的值都不是以上的值，则执行此程序 </span><br><span class="line">; ;</span><br><span class="line">esac</span><br></pre></td></tr></tbody></table></figure><h4 id="for"><a href="#for" class="headerlink" title="for"></a>for</h4><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">for 变量 in 值1 值2 值3</span><br><span class="line">    do </span><br><span class="line">        程序</span><br><span class="line">    done</span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">###############################</span></span></span><br><span class="line">for((初始值;循环控制条件;变量变化))</span><br><span class="line">    do</span><br><span class="line">        程序</span><br><span class="line">    done</span><br></pre></td></tr></tbody></table></figure><h4 id="while"><a href="#while" class="headerlink" title="while"></a>while</h4><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">while [ 条件判断式 ]</span><br><span class="line">    do</span><br><span class="line">        程序</span><br><span class="line">    done</span><br></pre></td></tr></tbody></table></figure><h4 id="until"><a href="#until" class="headerlink" title="until"></a>until</h4><p>until循环，和while循环相反，until循环时只要条件判断式不成立则进行循环，并执行循环程序。一旦循环条件成立，则终止循环。</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">until [ 条件判断式 ]</span><br><span class="line">    do</span><br><span class="line">        程序</span><br><span class="line">    done</span><br></pre></td></tr></tbody></table></figure>]]></content>
    
    
    <summary type="html">Shell编程的语法。</summary>
    
    
    
    <category term="Linux" scheme="https://1.15.86.100/categories/Linux/"/>
    
    
  </entry>
  
  <entry>
    <title>Linux-文件系统管理</title>
    <link href="https://1.15.86.100/2021/08/16/Linux-%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F%E7%AE%A1%E7%90%86/"/>
    <id>https://1.15.86.100/2021/08/16/Linux-%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F%E7%AE%A1%E7%90%86/</id>
    <published>2021-08-16T02:31:13.000Z</published>
    <updated>2021-08-16T03:12:49.636Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Linux-文件系统管理"><a href="#Linux-文件系统管理" class="headerlink" title="Linux 文件系统管理"></a>Linux 文件系统管理</h1><h2 id="分区和文件系统"><a href="#分区和文件系统" class="headerlink" title="分区和文件系统"></a>分区和文件系统</h2><h3 id="分区类型"><a href="#分区类型" class="headerlink" title="分区类型"></a>分区类型</h3><ul><li><strong>主分区</strong>：总共最多只能分<strong>四</strong>个；</li><li><p><strong>扩展分区</strong>：只能有一个，也算作主分区的一种，也就是说<strong>主分区加扩展分区最多有四个</strong>。但是扩展分区不能存储数据和格式化，必须再划分成逻辑分区才能使用；</p></li><li><p><strong>逻辑分区</strong>：逻辑分区是在扩展分区中划分的，如果是IDE硬盘，Linux最多支持59个逻辑分区，如果是SCSI硬盘Linux最多支持11个逻辑分区；</p></li></ul><h3 id="文件系统"><a href="#文件系统" class="headerlink" title="文件系统"></a>文件系统</h3><ul><li><strong>ext2</strong>：是ext文件系统的升级版本，Red Hat Linux7.2版本以前的系统默认都是ext2 文件系统。1993年发布，<strong>最大支持16TB 的分区和最大2TB的文件</strong>（1TB=1024GB=1024*1024KB）；</li><li><strong>ext3</strong>： ext3文件系统是ext2文件系统的升级版本，最大的区别就是<strong>带日志功能</strong>，以在系统突然停止时提高文件系统的可靠性。支持最大16TB的分区和最大2TB的文件；</li><li><strong>ext4</strong>：它是ext3文件系统的升级版。ext4 在性能、伸缩性和可靠性方面进行了大量改进。EXT4 的变化可以说是翻天覆地的，比如向下兼容EXT3、<strong>最大1EB文件系统和16TB文件</strong>、无限数量子目录、Extents连续数据块概念、多块分配、延迟分配、持久预分配、快速FSCK、日志校验、无日志模式、在线碎片整理、inode增强、默认启用barrier等。是CentOS 6.3的默认文件系统      （1EB=1024PB=1024*1024TB）；</li></ul><h2 id="文件系统常用命令"><a href="#文件系统常用命令" class="headerlink" title="文件系统常用命令"></a>文件系统常用命令</h2><h3 id="普通命令"><a href="#普通命令" class="headerlink" title="普通命令"></a>普通命令</h3><h4 id="df"><a href="#df" class="headerlink" title="df"></a>df</h4><p>查看文件系统</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">df  [选项] [挂载点]</span><br><span class="line"><span class="meta">#</span><span class="bash"> -a：显示所有的文件系统信息，包括特殊文件系统，如 /proc、/sysfs</span>  </span><br><span class="line"><span class="meta">#</span><span class="bash"> -h：使用习惯单位显示容量，如KB，MB或GB等</span>  </span><br><span class="line"><span class="meta">#</span><span class="bash"> -T：显示文件系统类型</span>  </span><br><span class="line"><span class="meta">#</span><span class="bash"> -m：以MB为单位显示容量</span>  </span><br><span class="line"><span class="meta">#</span><span class="bash"> -k：以KB为单位显示容量。默认就是以KB为单位</span></span><br></pre></td></tr></tbody></table></figure><h4 id="du"><a href="#du" class="headerlink" title="du"></a>du</h4><p>统计目录或文件大小</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">du [选项] [目录或文件名]</span><br><span class="line"><span class="meta">#</span><span class="bash"> -a：显示每个子文件的磁盘占用量。默认只统计 子目录的磁盘占用量</span>  </span><br><span class="line"><span class="meta">#</span><span class="bash"> -h：使用习惯单位显示磁盘占用量，如KB，MB  或GB等</span>  </span><br><span class="line"><span class="meta">#</span><span class="bash"> -s：统计总占用量，而不列出子目录和子文件的 占用量</span></span><br></pre></td></tr></tbody></table></figure><h4 id="fsck"><a href="#fsck" class="headerlink" title="fsck"></a>fsck</h4><p>文件系统修复命令</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">fsck [选项] 分区设备文件名</span><br><span class="line"><span class="meta">#</span><span class="bash"> -a：不用显示用户提示，自动修复文件系统；</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> -y：自动修复。和-a作用一致，不过有些文件系统只支持-y</span></span><br></pre></td></tr></tbody></table></figure><h4 id="dumpe2fs"><a href="#dumpe2fs" class="headerlink" title="dumpe2fs"></a>dumpe2fs</h4><p>显示磁盘状态</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dumpe2fs 分区设备文件名</span><br></pre></td></tr></tbody></table></figure><h3 id="挂载命令"><a href="#挂载命令" class="headerlink" title="挂载命令"></a>挂载命令</h3><h4 id="mount"><a href="#mount" class="headerlink" title="mount"></a>mount</h4><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mount [选项]</span><br><span class="line"><span class="meta">#</span><span class="bash"> -l：查询系统中已经挂载的设备，会显示卷标名称</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> –a：依据配置文件/etc/fstab的内容，自动挂载</span></span><br></pre></td></tr></tbody></table></figure><p>~~~shell<br>mount [-t 文件系统] [-L 卷标名]  [-o 特殊选项]  设备文件名 挂载点</p><h1 id="t-文件系统：加入文件系统类型来指定挂载的类型，可以ext3、ext4、iso9660等文件系统"><a href="#t-文件系统：加入文件系统类型来指定挂载的类型，可以ext3、ext4、iso9660等文件系统" class="headerlink" title="-t 文件系统：加入文件系统类型来指定挂载的类型，可以ext3、ext4、iso9660等文件系统"></a>-t 文件系统：加入文件系统类型来指定挂载的类型，可以ext3、ext4、iso9660等文件系统</h1><h1 id="L-卷标名：-挂载指定卷标的分区，而不是安装设备文件名挂载"><a href="#L-卷标名：-挂载指定卷标的分区，而不是安装设备文件名挂载" class="headerlink" title="-L 卷标名： 挂载指定卷标的分区，而不是安装设备文件名挂载"></a>-L 卷标名： 挂载指定卷标的分区，而不是安装设备文件名挂载</h1><h1 id="o-特殊选项：可以指定挂载的额外选项"><a href="#o-特殊选项：可以指定挂载的额外选项" class="headerlink" title="-o 特殊选项：可以指定挂载的额外选项"></a>-o 特殊选项：可以指定挂载的额外选项</h1>]]></content>
    
    
    <summary type="html">对Linux分区文件系统的介绍，文件系统常用命令，fdisk分区，/etc/fstab文件修复，分配swap分区。</summary>
    
    
    
    <category term="Linux" scheme="https://1.15.86.100/categories/Linux/"/>
    
    
  </entry>
  
  <entry>
    <title>Linux-用户管理</title>
    <link href="https://1.15.86.100/2021/08/14/Linux-%E7%94%A8%E6%88%B7%E7%AE%A1%E7%90%86/"/>
    <id>https://1.15.86.100/2021/08/14/Linux-%E7%94%A8%E6%88%B7%E7%AE%A1%E7%90%86/</id>
    <published>2021-08-14T08:44:51.000Z</published>
    <updated>2021-08-15T03:00:07.838Z</updated>
    
    <content type="html"><![CDATA[<h1 id="用户管理"><a href="#用户管理" class="headerlink" title="用户管理"></a>用户管理</h1><h2 id="用户管理文件"><a href="#用户管理文件" class="headerlink" title="用户管理文件"></a>用户管理文件</h2><h3 id="etc-passwd【用户信息文件】"><a href="#etc-passwd【用户信息文件】" class="headerlink" title="/etc/passwd【用户信息文件】"></a>/etc/passwd【用户信息文件】</h3><p>可以使用<code>man 5 passwd</code>查看配置信息。</p><h4 id="配置信息详情"><a href="#配置信息详情" class="headerlink" title="配置信息详情"></a>配置信息详情</h4><p><img src="/2021/08/14/Linux-%E7%94%A8%E6%88%B7%E7%AE%A1%E7%90%86/image-20210814165205912.png" alt="image-20210814165205912"></p><p>每个字段用 <strong>:</strong> 分割。</p><ul><li><p>第1字段：用户名称；</p></li><li><p>第2字段：密码标志 ；</p></li><li><p>第3字段：UID（用户ID） ；</p></li><li><ul><li>0：   超级用户 ；<ul><li>1-499：  系统用户（伪用户）；</li><li>500-65535： 普通用户(centos7 从1000开始计算)；</li></ul></li></ul></li><li><p>第4字段：GID（用户初始组ID）[不推荐修改初始组]；</p></li><li><p>第5字段：用户说明 ；</p></li><li><p>第6字段：家目录 ；</p></li><li><ul><li>普通用户：/home/用户名/； <ul><li>超级用户：/root/ ；</li></ul></li></ul></li><li><p>第7字段：登录之后的Shell；</p></li></ul><h3 id="etc-shadow【影子文件】"><a href="#etc-shadow【影子文件】" class="headerlink" title="/etc/shadow【影子文件】"></a>/etc/shadow【影子文件】</h3><p>可以使用<code>man 5 shadow</code>查看配置信息。</p><h4 id="详细配置信息"><a href="#详细配置信息" class="headerlink" title="详细配置信息"></a>详细配置信息</h4><p><img src="/2021/08/14/Linux-%E7%94%A8%E6%88%B7%E7%AE%A1%E7%90%86/image-20210814170742873.png" alt="image-20210814170742873"></p><ul><li><p>第1字段：用户名；</p></li><li><p>第2字段：加密密码 ；</p></li><li><ul><li>加密算法升级为SHA512散列加密算法；<ul><li>如果密码位是<strong>“!!”</strong>或<strong>“*”</strong>代表没有密码，不能登录；</li></ul></li></ul></li><li><p>第3字段：密码最后一次修改日期；</p></li><li><ul><li>使用1970年1月1日作为标准时间，每过一天时间戳加1；</li></ul></li><li><p>第4字段：两次密码的修改间隔时间（和第3字段相比）；</p></li><li>第5字段：密码有效期（和第3字段相比）；</li><li><p>第6字段：密码修改到期前的警告天数（和第5字段相比）；</p></li><li><p>第7字段：密码过期后的宽限天数（和第5 字段相比）；</p></li><li><ul><li>0：代表密码过期后立即失效；<ul><li>-1：则代表密码永远不会失效； </li></ul></li></ul></li><li><p>第8字段：账号失效时间；</p></li><li><ul><li>要用时间戳表示 </li></ul></li><li><p>第9字段：保留</p></li></ul><h3 id="etc-group【组信息文件】"><a href="#etc-group【组信息文件】" class="headerlink" title="/etc/group【组信息文件】"></a>/etc/group【组信息文件】</h3><p>可以使用<code>man 5 group</code>查看配置信息。</p><h4 id="详细信息"><a href="#详细信息" class="headerlink" title="详细信息"></a>详细信息</h4><p><img src="/2021/08/14/Linux-%E7%94%A8%E6%88%B7%E7%AE%A1%E7%90%86/image-20210814171614809.png" alt="image-20210814171614809"></p><ul><li>第一字段：组名；</li><li>第二字段：组密码标志；</li><li>第三字段：GID；</li><li>第四字段：组中附加用户；</li></ul><h3 id="etc-gshadow【组密码文件】"><a href="#etc-gshadow【组密码文件】" class="headerlink" title="/etc/gshadow【组密码文件】"></a>/etc/gshadow【组密码文件】</h3><ul><li>第一字段：组名；</li><li>第二字段：组密码 (不推荐使用，可以理解为给组设置个小组长)；</li><li>第三字段：组管理员用户名；</li><li>第四字段：组中附加用户；</li></ul><h3 id="用户相关目录"><a href="#用户相关目录" class="headerlink" title="用户相关目录"></a>用户相关目录</h3><h4 id="家目录"><a href="#家目录" class="headerlink" title="家目录"></a>家目录</h4><ul><li>普通用户：<code>/home/用户名/</code>，所有者和所属组都是此用户，权限是700 </li><li>超级用户：<code>/root/</code>，所有者和所属组都是root用户，权限是550 </li></ul><h4 id="用户邮箱"><a href="#用户邮箱" class="headerlink" title="用户邮箱"></a>用户邮箱</h4><ul><li><code>/var/spool/mail/用户名/</code> </li></ul><h4 id="用户模板目录"><a href="#用户模板目录" class="headerlink" title="用户模板目录"></a>用户模板目录</h4><ul><li><code>/etc/skel/</code></li></ul><h2 id="用户管理命令"><a href="#用户管理命令" class="headerlink" title="用户管理命令"></a>用户管理命令</h2><h3 id="useradd"><a href="#useradd" class="headerlink" title="useradd"></a>useradd</h3><p>添加用户</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">useradd [选项] [用户名]</span><br><span class="line"><span class="meta">#</span><span class="bash"> -u UID： 手工指定用户的UID号</span>  </span><br><span class="line"><span class="meta">#</span><span class="bash"> -d 家目录： 手工指定用户的家目录</span>  </span><br><span class="line"><span class="meta">#</span><span class="bash"> -c 用户说明： 手工指定用户的说明</span>  </span><br><span class="line"><span class="meta">#</span><span class="bash"> -g 组名： 手工指定用户的初始组</span>  </span><br><span class="line"><span class="meta">#</span><span class="bash"> -G 组名： 指定用户的附加组</span>  </span><br><span class="line"><span class="meta">#</span><span class="bash"> -s shell： 手工指定用户的登录shell。默认是/bin/bash</span> </span><br></pre></td></tr></tbody></table></figure><h3 id="passwd"><a href="#passwd" class="headerlink" title="passwd"></a>passwd</h3><p>修改密码</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">passwd [选项] 用户名</span><br><span class="line"><span class="meta">#</span><span class="bash"> -S  查询用户密码的密码状态。仅root用户可用。</span> </span><br><span class="line"><span class="meta">#</span><span class="bash"> -l  暂时锁定用户。仅root用户可用</span>  </span><br><span class="line"><span class="meta">#</span><span class="bash"> -u  解锁用户。仅root用户可用</span>  </span><br><span class="line"><span class="meta">#</span><span class="bash"> --stdin 可以通过管道符输出的数据作为用户的密码。</span></span><br></pre></td></tr></tbody></table></figure><h3 id="usermod"><a href="#usermod" class="headerlink" title="usermod"></a>usermod</h3><p>修改用户信息</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">usermod [选项] 用户名</span><br><span class="line"><span class="meta">#</span><span class="bash"> -u UID：修改用户的UID号</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> -c 用户说明：修改用户的说明信息</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> -G 组名：修改用户的附加组</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> -L：临时锁定用户（Lock）</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> -U：解锁用户锁定（Unlock）</span></span><br></pre></td></tr></tbody></table></figure><h3 id="chage"><a href="#chage" class="headerlink" title="chage"></a>chage</h3><p>修改用户信息</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">chage [选项] 用户名</span><br><span class="line"><span class="meta">#</span><span class="bash"> -l：列出用户的详细密码状态</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> -d 日期：修改密码最后一次更改日期（shadow3字段）</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> -m 天数：两次密码修改间隔（4字段）</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> -M 天数：密码有效期（5字段）</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> -W 天数：密码过期前警告天数（6字段）</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> -I 天数：密码过后宽限天数（7字段）</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> -E 日期：账号失效时间（8字段）</span></span><br></pre></td></tr></tbody></table></figure><h3 id="userdel"><a href="#userdel" class="headerlink" title="userdel"></a>userdel</h3><p>删除用户</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">userdel [-r] 用户名 </span><br><span class="line"><span class="meta">#</span><span class="bash"> -r：删除用户的同时删除用户家目录</span> </span><br></pre></td></tr></tbody></table></figure><h3 id="id"><a href="#id" class="headerlink" title="id"></a>id</h3><p>查看用户<strong>id</strong></p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">id 用户名</span><br></pre></td></tr></tbody></table></figure><h3 id="su"><a href="#su" class="headerlink" title="su"></a>su</h3><p>切换用户</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">su [选项] 用户名</span><br><span class="line"><span class="meta">#</span><span class="bash"> -：选项只使用“-”代表连带用户的环境变量一起切换  (env命令查看当前环境变量)</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> -c 命令：仅执行一次命令，而不切换用户身份</span></span><br></pre></td></tr></tbody></table></figure><h2 id="用户组管理命令"><a href="#用户组管理命令" class="headerlink" title="用户组管理命令"></a>用户组管理命令</h2><h4 id="groupadd"><a href="#groupadd" class="headerlink" title="groupadd"></a>groupadd</h4><p>添加组</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">groupadd [选项] 组名</span><br><span class="line"><span class="meta">#</span><span class="bash"> -g GID：指定组ID</span></span><br></pre></td></tr></tbody></table></figure><h4 id="groupmod"><a href="#groupmod" class="headerlink" title="groupmod"></a>groupmod</h4><p>修改组</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">groupmod [选项] 组名</span><br><span class="line"><span class="meta">#</span><span class="bash"> -g GID 修改组ID</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> -n 新组名 修改组名</span></span><br></pre></td></tr></tbody></table></figure><h4 id="groupdel"><a href="#groupdel" class="headerlink" title="groupdel"></a>groupdel</h4><p>删除组</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">groupdel [选项] 组名</span><br></pre></td></tr></tbody></table></figure>]]></content>
    
    
    <summary type="html">Linux用户管理配置，用户管理命令：用户信息文件、影子文件、组信息文件。</summary>
    
    
    
    <category term="Linux" scheme="https://1.15.86.100/categories/Linux/"/>
    
    
  </entry>
  
  <entry>
    <title>Linux-软件包管理</title>
    <link href="https://1.15.86.100/2021/08/14/Linux-%E8%BD%AF%E4%BB%B6%E5%8C%85%E7%AE%A1%E7%90%86/"/>
    <id>https://1.15.86.100/2021/08/14/Linux-%E8%BD%AF%E4%BB%B6%E5%8C%85%E7%AE%A1%E7%90%86/</id>
    <published>2021-08-14T07:57:13.000Z</published>
    <updated>2021-08-14T08:03:38.246Z</updated>
    
    <content type="html"><![CDATA[<h1 id="软件包管理"><a href="#软件包管理" class="headerlink" title="软件包管理"></a>软件包管理</h1><h2 id="软件包分类"><a href="#软件包分类" class="headerlink" title="软件包分类"></a>软件包分类</h2><h4 id="源码包"><a href="#源码包" class="headerlink" title="源码包"></a>源码包</h4><p>源码包的<strong>优点</strong>： </p><ul><li><p>开源，如果有足够的能力，可以修改源代码 ；</p></li><li><p>可以自由选择所需的功能 ；</p></li><li><p>软件是编译安装，所以更加适合自己的系统，更加稳定也效率更高 ；</p></li><li><p>卸载方便；</p></li></ul><p>源码包的<strong>缺点</strong>： </p><ul><li><p>安装过程步骤较多，尤其安装较大的软件集合时（如LAMP环境搭建），容易出现拼写错误；</p></li><li><p>编译过程时间较长，安装比二进制安装时间长 ；</p></li><li><p>因为是编译安装，安装过程中一旦报错新手很难解决；</p></li></ul><h4 id="RPM包（二进制）"><a href="#RPM包（二进制）" class="headerlink" title="RPM包（二进制）"></a>RPM包（二进制）</h4><p>二进制包的<strong>优点</strong> </p><ul><li><p>包管理系统简单，只通过几个命令就可以实现包的安装、升级、查询和卸载 ；</p></li><li><p>安装速度比源码包安装快的多；</p></li></ul><p>二进制包<strong>缺点</strong>：</p><ul><li>经过编译，不再可以看到源代码； </li><li>功能选择不如源码包灵活 ；</li><li>依赖性；</li></ul>]]></content>
    
    
    <summary type="html">Linux软件包的介绍、安装等操作。</summary>
    
    
    
    <category term="Linux" scheme="https://1.15.86.100/categories/Linux/"/>
    
    
  </entry>
  
</feed>
