<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>BaoWJ&#39;s Blog</title>
  
  
  <link href="https://1.15.86.100/atom.xml" rel="self"/>
  
  <link href="https://1.15.86.100/"/>
  <updated>2021-04-02T12:28:50.808Z</updated>
  <id>https://1.15.86.100/</id>
  
  <author>
    <name>Bao Wenjie</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Feature Selection: Embedding</title>
    <link href="https://1.15.86.100/2021/04/02/Feature-Selection-Embedding/"/>
    <id>https://1.15.86.100/2021/04/02/Feature-Selection-Embedding/</id>
    <published>2021-04-02T12:28:50.000Z</published>
    <updated>2021-04-02T12:28:50.808Z</updated>
    
    
    
    
    
  </entry>
  
  <entry>
    <title>Feature Selection: Wrapper</title>
    <link href="https://1.15.86.100/2021/04/02/Feature-Selection-Wrapper/"/>
    <id>https://1.15.86.100/2021/04/02/Feature-Selection-Wrapper/</id>
    <published>2021-04-02T12:28:38.000Z</published>
    <updated>2021-04-02T12:57:57.843Z</updated>
    
    <content type="html"><![CDATA[<h1 id="包裹式特征选择"><a href="#包裹式特征选择" class="headerlink" title="包裹式特征选择"></a>包裹式特征选择</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p><strong>包裹式特征选择</strong>（Wrapper）是特征选择的三大方法之一，其主要思路是：利用选择的特征的子数据集进行训练，并把训练结果直接作为评判特征选择的标准。</p><p>所以在<strong>特定模型</strong>的最终结果上，<strong>包裹式特征选择</strong>比<strong>选择式</strong>更好。</p><h2 id="LVW"><a href="#LVW" class="headerlink" title="LVW"></a>LVW</h2><p><strong>拉斯维加斯方法（LVW，Las Vegas Wrapper）</strong>是一种典型的<strong>包裹式特征选择</strong>方法。</p><p>该方法每次随机选取特征子集，然后送入模型，如果模型损失下降则更新特征子集，依次迭代进行。</p><hr><p><strong>输入</strong>：数据集<script type="math/tex">D</script>；</p><p>​            选择的特征集<script type="math/tex">A</script>；</p><p>​            某个学习器<script type="math/tex">\zeta</script>；</p><p>​            停止条件控制参数<script type="math/tex">T</script>【搜索次数】；</p><p><strong>过程</strong>：</p><ol><li><script type="math/tex">E=\infty</script>；</li><li><script type="math/tex">d=|A|</script>；</li><li><script type="math/tex">A^*=A</script>；</li><li><script type="math/tex">t=0</script>；</li><li><strong>while</strong> <script type="math/tex">\ t < T</script> <strong>do</strong></li><li>​    随机产生<strong>特征子集</strong><script type="math/tex">A'</script>；</li><li>​    <script type="math/tex">d'=|A'|</script>；</li><li>​    <script type="math/tex">E'=\mathrm{Cross Validation}(\zeta(D^{A'}))</script>【计算<strong>loss</strong>】；</li><li>​    <strong>if</strong> <script type="math/tex">(E'<E)\ or\ ((E'=E)\ and\ (d'<d))</script> 【<strong>loss</strong>降低，或者<strong>loss</strong>不变，特征数量减少】<strong>then</strong></li><li>​         <script type="math/tex">t=0</script>；【更新】</li><li>​        <script type="math/tex">E=E'</script>；</li><li>​        <script type="math/tex">d=d'</script>；</li><li>​        <script type="math/tex">A^*=A'</script>；</li><li>​    <strong>else</strong></li><li>​        <script type="math/tex">t=t+1</script></li><li>​    <strong>end if</strong></li><li><strong>end while</strong></li></ol><p><strong>输出</strong>：特征子集 <script type="math/tex">A^*</script></p><hr><p><strong>REF</strong>：</p><p>周志华.2015.机器学习.北京.清华大学出版社.p251</p>]]></content>
    
    
    <summary type="html">介绍包裹式(Wrapper)特征选择的方法，以及典型的算法拉斯维加斯方法(LVW)</summary>
    
    
    
    
    <category term="Machine Learning" scheme="https://1.15.86.100/tags/Machine-Learning/"/>
    
    <category term="Feature Engineering" scheme="https://1.15.86.100/tags/Feature-Engineering/"/>
    
    <category term="LVW" scheme="https://1.15.86.100/tags/LVW/"/>
    
  </entry>
  
  <entry>
    <title>Server</title>
    <link href="https://1.15.86.100/2021/04/02/Server/"/>
    <id>https://1.15.86.100/2021/04/02/Server/</id>
    <published>2021-04-02T09:29:32.000Z</published>
    <updated>2021-04-02T09:31:07.237Z</updated>
    
    <content type="html"><![CDATA[<h1 id="服务器管理"><a href="#服务器管理" class="headerlink" title="服务器管理"></a>服务器管理</h1><h3 id="查看IP登录情况"><a href="#查看IP登录情况" class="headerlink" title="查看IP登录情况"></a>查看IP登录情况</h3><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> -n 指定登录次数前多少名</span></span><br><span class="line">awk '{print $1}' blog-log |sort |uniq -c|sort -nr|head -n 10000</span><br></pre></td></tr></tbody></table></figure>]]></content>
    
    
    <summary type="html">服务器管理云云</summary>
    
    
    
    
    <category term="Server" scheme="https://1.15.86.100/tags/Server/"/>
    
  </entry>
  
  <entry>
    <title>Deep Forest</title>
    <link href="https://1.15.86.100/2021/04/02/Deep-Forest/"/>
    <id>https://1.15.86.100/2021/04/02/Deep-Forest/</id>
    <published>2021-04-02T08:56:45.000Z</published>
    <updated>2021-04-02T09:12:19.289Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Deep-Forest-christmas-tree"><a href="#Deep-Forest-christmas-tree" class="headerlink" title="Deep Forest:christmas_tree:"></a>Deep Forest<span class="github-emoji"><span>🎄</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f384.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></h1><h3 id="简介-ticket"><a href="#简介-ticket" class="headerlink" title="简介:ticket:"></a>简介<span class="github-emoji"><span>🎫</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f3ab.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></h3><p>用<strong>深度神经网络(DNN)</strong>的思路来组织<strong>随机森林(RF)</strong>，极大地提高了随机森林的准确率。</p><h3 id="安装-wrench"><a href="#安装-wrench" class="headerlink" title="安装:wrench:"></a>安装<span class="github-emoji"><span>🔧</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f527.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></h3><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install deep-forest</span><br></pre></td></tr></tbody></table></figure><h3 id="函数-funeral-urn"><a href="#函数-funeral-urn" class="headerlink" title="函数:funeral_urn:"></a>函数<span class="github-emoji"><span>⚱</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/26b1.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></h3><p>用法详见<strong>测试代码</strong></p><ul><li><p><strong>deepforest.CascadeForestClassifier</strong>：对<strong>Deep Forest</strong>的实现；</p></li><li><p><strong>deepforest.DecisionTreeClassifier</strong>：<strong>Deep Forest</strong>的树的实现；</p><p>​    </p></li></ul><h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><p>分类的类别需从<strong>0</strong>开始标记，即<strong>label={0,1,2…}</strong></p><h3 id="原论文阅读-page-with-curl"><a href="#原论文阅读-page-with-curl" class="headerlink" title="原论文阅读:page_with_curl:"></a>原<a href="https://arxiv.org/pdf/1702.08835.pdf">论文</a>阅读<span class="github-emoji"><span>📃</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f4c3.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></h3><h4 id="background"><a href="#background" class="headerlink" title="background"></a>background</h4><ul><li><p>对<strong>深度神经网络(DNN)</strong>成功的原因分析：</p><ol><li>一层一层的堆叠（<em>layer-by-layer processing</em>）；</li><li>模型内部的数据表征方式的转变【例如LSTM中<strong>词向量</strong>的传递和维度变化】（<em>in-model feature transformation</em>）；</li><li>足够的模型复杂度（<em>sufficient model complexity</em>）；</li></ol></li><li><p><strong>DNN</strong>的缺陷：</p><ol><li>超参数太多（too many hyper-parameters），模型表现十分依赖参数选择和训练（parameter tuning）；</li><li>需要大量训练数据（a huge amount of training data）；</li><li><strong>黑箱系统</strong>（玄学），很难进行理论分析（theoretical analysis）；</li><li>模型结构的确定先于模型训练；</li></ol></li></ul><h4 id="inspiration"><a href="#inspiration" class="headerlink" title="inspiration"></a>inspiration</h4><p><strong>从DNN</strong>：</p><ul><li><p>从<strong>DNN</strong>中观察到，在<strong>DNN</strong>每层的传播中，<strong>数据特征（feature）</strong>越来越集中，越来越抽象。</p></li><li><p><strong>DNN</strong>的成功和<strong>模型复杂度</strong>关系不大，否则<em>为什么无限扩大模型参数量并不能提升模型效果？</em>；</p></li><li><strong>DNN</strong>的层次性和<strong>决策树</strong>的层次性不一样：<ul><li><strong>决策树</strong>始终利用的是输入的数据，并没有对<strong>数据表征（feature）</strong>做出任何改变（work on the original feature representation），没有出现（<em>in-model feature transformation</em>）；</li><li><strong>DNN</strong>每一层的输出都会对<strong>数据表征（feature）</strong>做出改变；</li></ul></li></ul><p><strong>从集成学习（Ensemble Learning）</strong></p><ul><li><p>要做好集成学习，每个<strong>学习单元（learner）</strong>要做到<strong>准确（accurate）</strong> <strong>多样（diverse）</strong>；</p></li><li><p>实践中常常会通过技巧提高模型的<strong>多样性</strong>：</p><ul><li><p><strong>数据采样（data sample manipulation）</strong>：</p><p>  从原始数据集中采样出不同的<strong>子训练集</strong>来训练不同的<strong>学习单元（learner）</strong>；</p><p>  例如：</p><p>  <strong>Bagging</strong>中的<strong>bootstrap sampling</strong>；</p><p>  <strong>AdaBoost</strong>中的<strong>sequential importance sampling</strong>；</p></li><li><p><strong>输入特征采样（input feature manipulation）</strong>：</p><p>  从原始的数据特征中采样出不同的子特征（feature）生成<strong>子空间（subspace）</strong>，训练不同的<strong>学习单元（learner）</strong>；</p></li><li><p><strong>学习参数区别（learning parameter manipulation）</strong>：</p><p>  不同的<strong>学习单元（learner）</strong>采用不同的参数训练；</p></li><li><p><strong>输出表征区别（output representation manipulation）</strong>：</p><p>  对不同的学习单元使用不同的<strong>表征（representation）</strong>；</p></li></ul></li></ul><h4 id="gcForest"><a href="#gcForest" class="headerlink" title="gcForest"></a>gcForest</h4><p><strong>层次森林结构（Cascade Forest Structure）</strong></p><p><img src="/2021/04/02/Deep-Forest/p1.png" alt="pic"></p><ul><li><p>每一层从其前面的层获取数据，再将数据传递到下一层；</p></li><li><p>每一层都是<strong>随机森林</strong>的集成；</p></li><li><p>每个森林中的树个数作为超参数；</p></li><li><p>图中：</p><ul><li><p>黑色森林是<strong>随机森林（random forest）</strong>；</p><p>  每个森林包括500棵<strong>随机树</strong>，树的每个节点从随机选择的$\sqrt{d}$（d是特征个数）个<strong>候选特征</strong>中按照<strong>gini</strong>系数选择一个特征来切分；</p></li><li><p>蓝色森林是<strong>完全随机树森林（completely-random tree forest）</strong>；</p><p>  每个森林包括500棵<strong>完全随机树</strong>，树的每个节点会从<strong>所有的特征</strong>中选择一个特征切分出来，树生长直到完全是叶子；</p></li><li><p>假设数据分为三类，每个<strong>随机森林</strong>将输出<strong>三维向量</strong>，然后将所有向量连接（concatenate）作为输出；</p></li></ul></li><li><p>每个<strong>随机森林</strong>的输出是所有树的平均，如下图：<img src="/2021/04/02/Deep-Forest/p2.png" alt="pic"></p></li><li><p>为了减小<strong>过拟合（overfitting）</strong>风险，每个<strong>随机森林</strong>的输出都使用<strong>K折交叉验证（k-fold cross validation）</strong>：</p><ul><li>每个条数据会被训练<em>k-1</em>次，生成<em>k-1</em>个向量，然后平均作为该树的输出；</li><li>交叉验证的结果作为判定条件，如果模型效果相对上一层有提高则继续扩展下一层，否则结束；</li></ul></li></ul><p><strong>卷积特征提取（Multi-Grained Scanning）</strong></p><p><img src="/2021/04/02/Deep-Forest/p3.png" alt="pic"></p><ul><li><p>用一个一维或者二维的窗口扫描原数据，将窗口数据提取出来作为<strong>新特征</strong>；</p></li><li><p>将<strong>新特征</strong>送入训练，再将结果连接起来，作为最终的输出结果；</p></li><li><p>有可能某些<strong>新特征</strong>与结果丝毫没有关系（例如：需要识别一张图片的<em>汽车</em>，但提取出来的小片段不包含任何相关内容），这时，可以把<strong>新特征</strong>看成一种<strong>output representation manipulation</strong>，可以提高模型的多样性；</p></li><li><p>当<strong>新特征</strong>太多时，可以对其进行<strong>采样</strong>；</p></li><li><p>模型中通常使用不同大小的窗口进行特征提取，如下图：</p><p>  <img src="/2021/04/02/Deep-Forest/p4.png" alt="pic"></p></li></ul><p><strong>Code</strong>：</p><p><a href="https://github.com/baowj-678/Machine-Learning/tree/master/Deep-Forest">github:baowj-678</a></p><p><strong>REF</strong>：</p><p><a href="https://arxiv.org/pdf/1702.08835.pdf">arXiv:1702.08835 [cs.LG]</a></p>]]></content>
    
    
    <summary type="html">用深度神经网络(DNN)的思路来组织随机森(RF)，可以极大地提高了随机森林的准确率。</summary>
    
    
    
    
    <category term="Machine Learning" scheme="https://1.15.86.100/tags/Machine-Learning/"/>
    
    <category term="Decision Tree" scheme="https://1.15.86.100/tags/Decision-Tree/"/>
    
    <category term="Random Forest" scheme="https://1.15.86.100/tags/Random-Forest/"/>
    
  </entry>
  
  <entry>
    <title>Windows Terminal添加登录腾讯云服务器</title>
    <link href="https://1.15.86.100/2021/04/02/Windows-Terminal%E6%B7%BB%E5%8A%A0%E7%99%BB%E5%BD%95%E8%85%BE%E8%AE%AF%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    <id>https://1.15.86.100/2021/04/02/Windows-Terminal%E6%B7%BB%E5%8A%A0%E7%99%BB%E5%BD%95%E8%85%BE%E8%AE%AF%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8/</id>
    <published>2021-04-02T04:27:36.000Z</published>
    <updated>2021-04-02T05:10:15.999Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Windows-Terminal配置腾讯云服务器"><a href="#Windows-Terminal配置腾讯云服务器" class="headerlink" title="Windows Terminal配置腾讯云服务器"></a>Windows Terminal配置腾讯云服务器</h1><h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><ol><li>租一台<strong>腾讯云服务器</strong>；</li><li>本地安装好<strong>Windows Terminal</strong>；</li></ol><h2 id="配置过程"><a href="#配置过程" class="headerlink" title="配置过程"></a>配置过程</h2><h3 id="生成SSH私钥"><a href="#生成SSH私钥" class="headerlink" title="生成SSH私钥"></a>生成SSH私钥</h3><p>在腾讯云<strong>控制台</strong>，进入<strong>SSH密钥</strong>界面，点击<strong>创建密钥</strong>：</p><p><img src="/2021/04/02/Windows-Terminal%E6%B7%BB%E5%8A%A0%E7%99%BB%E5%BD%95%E8%85%BE%E8%AE%AF%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8/p1.png" alt="p1"></p><p>填写密钥的名称（描述密钥存放位置和用处，方便记忆）：</p><p><img src="/2021/04/02/Windows-Terminal%E6%B7%BB%E5%8A%A0%E7%99%BB%E5%BD%95%E8%85%BE%E8%AE%AF%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8/p2.png" alt="p2"></p><p>点击<strong>确定</strong>，系统会自动下载密钥文件。</p><h3 id="保存密钥"><a href="#保存密钥" class="headerlink" title="保存密钥"></a>保存密钥</h3><p>将上一步下载的密钥改名为<strong>id_rsa_tencent</strong>（自定义），并置于<em>~/.ssh/</em>目录下：</p><p><img src="/2021/04/02/Windows-Terminal%E6%B7%BB%E5%8A%A0%E7%99%BB%E5%BD%95%E8%85%BE%E8%AE%AF%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8/p3.png" alt="p3"></p><h3 id="配置Windows-Terminal"><a href="#配置Windows-Terminal" class="headerlink" title="配置Windows Terminal"></a>配置Windows Terminal</h3><p>打开<strong>Windows Terminal</strong>，点击设置：</p><p><img src="/2021/04/02/Windows-Terminal%E6%B7%BB%E5%8A%A0%E7%99%BB%E5%BD%95%E8%85%BE%E8%AE%AF%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8/p4.png" alt="p4"></p><p>在<strong>list</strong>下添加下列<strong>配置信息</strong>：</p><p><img src="/2021/04/02/Windows-Terminal%E6%B7%BB%E5%8A%A0%E7%99%BB%E5%BD%95%E8%85%BE%E8%AE%AF%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8/p5.png" alt="p5"></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;guid&quot;</span>: <span class="string">&quot;&#123;******************************&#125;&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;TencentCloud&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;commandline&quot;</span>: <span class="string">&quot;ssh -i 密钥文件位置 服务器用户名@服务器ip地址&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;hidden&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">&quot;icon&quot;</span>: <span class="string">&quot;图标位置&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中：</p><p><strong>guid</strong>可以在<a href="https://www.guidgen.com/"><em>guidgen.com</em></a>生成。</p><h2 id="配置结果"><a href="#配置结果" class="headerlink" title="配置结果"></a>配置结果</h2><p>点击<strong>腾讯云图标</strong>即可自动登录，并进入<strong>控制台</strong>：</p><p><img src="/2021/04/02/Windows-Terminal%E6%B7%BB%E5%8A%A0%E7%99%BB%E5%BD%95%E8%85%BE%E8%AE%AF%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8/p6.png" alt="p6"></p>]]></content>
    
    
    <summary type="html">在windows terminal里添加腾讯云服务器配置，使其可以自动利用ssh登录服务器。</summary>
    
    
    
    
    <category term="Server" scheme="https://1.15.86.100/tags/Server/"/>
    
  </entry>
  
  <entry>
    <title>Position Encoding Methods of Transformer</title>
    <link href="https://1.15.86.100/2021/03/31/Position-Encoding-Methods-of-Transformer/"/>
    <id>https://1.15.86.100/2021/03/31/Position-Encoding-Methods-of-Transformer/</id>
    <published>2021-03-31T09:05:07.000Z</published>
    <updated>2021-03-31T15:58:27.610Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Position-Encoding"><a href="#Position-Encoding" class="headerlink" title="Position Encoding"></a>Position Encoding</h1><p>[toc]</p><h2 id="Background1"><a href="#Background1" class="headerlink" title="Background1"></a>Background<a href="#refer-anchor-1"><sup>1</sup></a></h2><p>2017年<strong>谷歌</strong>提出的<strong>Transformer</strong>模型深刻地影响了<strong>NLP</strong>领域，<strong>Transformer</strong>模型是基于<strong>Attention</strong>机制的<strong>降噪自编码器（denoising autoencoder）</strong>模型。因为采用了这种架构，所有的输入文本都<strong>平行地进行</strong>计算。优点是提高了模型效率，但缺点就导致了需要加入<strong>位置编码</strong>，并且<strong>位置编码</strong>很大程度上影响着模型的效果。</p><h2 id="Vanilla-Position-Encoding"><a href="#Vanilla-Position-Encoding" class="headerlink" title="Vanilla Position-Encoding"></a>Vanilla Position-Encoding</h2><h3 id="绝对位置编码"><a href="#绝对位置编码" class="headerlink" title="绝对位置编码"></a>绝对位置编码</h3><p>在这篇论文中，作者提出下面的编码方法：</p><script type="math/tex; mode=display">PE_{(pos,2i)} =sin(pos/10000^{2i/d_{model}})</script><script type="math/tex; mode=display">PE_{(pos,2i+1)}=cos(pos/10000^{2i/d_{model}})</script><p>其中： </p><script type="math/tex; mode=display">pos$$：句中字词（token）所在的位置；$$i$$：编码的**位置向量**的一个维度；这个编码中，**每个位置的每个维度**都服从一个**正弦函数**的“分布”，且可以编码的距离也较长。该编码可以学习到**相对位置**，对于任意一个位置$$PE_{pos+k}$$都可以表示成$$PE_{pos}$$的**线性函数**。### 编码原理[<sup>2</sup>](#refer-anchor-2)假设模型为$$f(\dots,x_m,\dots,x_n,\dots)$$，其中参数都是输入的**词向量**，而$$x_m,x_n$$是在$$n,m$$位置上的词向量。这就是**Transformer**的基本模型（不包括位置编码）。在加入位置编码后，变为：$$\tilde{f}(\dots,x_m+p_m,\dots,x_n+p_n,\dots)$$。然后用**泰勒公式**将其展开：$$\tilde{f}\approx f+p^T_m\frac{\partial f}{\partial x_m}+p^T_n\frac{\partial f}{\partial x_n}+\frac{1}{2}p^T_m\frac{\partial^2 f}{\partial x_m^2}p_m+\frac{1}{2}p^T_n\frac{\partial^2 f}{\partial x_n^2}p_n+p_m^T\frac{\partial^2f}{\partial x_m\partial x_n}p_n</script><p>可以发现：</p><ul><li><strong>第一项</strong>和位置无关，<strong>第二、三、四、五项</strong>只依赖于单一位置，所以他们只是<strong>绝对位置信息</strong>；</li><li><strong>第六项</strong>简化为<script type="math/tex">p^T_m\mathcal{H}p_n</script>，目标是希望该项能表达<strong>相对位置信息</strong>；</li></ul><h2 id="Relative-Position-Encoding"><a href="#Relative-Position-Encoding" class="headerlink" title="Relative Position-Encoding"></a>Relative Position-Encoding</h2><h2 id="XL-Position-Encoding"><a href="#XL-Position-Encoding" class="headerlink" title="XL Position-Encoding"></a>XL Position-Encoding</h2><h2 id="T5-Position-Encoding"><a href="#T5-Position-Encoding" class="headerlink" title="T5 Position-Encoding"></a>T5 Position-Encoding</h2><p><strong>REF</strong>：</p><p><div id="refer-anchor-1"></div> [1] <a href="https://arxiv.org/abs/1706.03762">Attention is all you need</a></p><p><div id="refer-anchor-2"></div> [2] <a href="https://blog.csdn.net/c9Yv2cf9I06K2A9E/article/details/1150593142">Transformer升级之路：Sinusoidal位置编码追根溯源</a></p>]]></content>
    
    
    <summary type="html">Transformer模型用Attention机制取代了递归的序列机制，因此其位置编码对模型效果有十分重要的影响；所以本文梳理了Transformer的经典位置编码方法。</summary>
    
    
    
    
    <category term="NLP" scheme="https://1.15.86.100/tags/NLP/"/>
    
    <category term="Transformer" scheme="https://1.15.86.100/tags/Transformer/"/>
    
  </entry>
  
  <entry>
    <title>Feature Selection: Relief</title>
    <link href="https://1.15.86.100/2021/03/30/Feature-Selection-Relief/"/>
    <id>https://1.15.86.100/2021/03/30/Feature-Selection-Relief/</id>
    <published>2021-03-30T11:22:38.000Z</published>
    <updated>2021-04-02T12:52:49.759Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Relief"><a href="#Relief" class="headerlink" title="Relief"></a>Relief</h1><p><strong>Relief（Relevant Features）</strong>是一种著名的<strong>过滤式特征选择</strong>方法，所谓<strong>过滤式</strong>就是先对<strong>数据集</strong>进行<strong>特征选择</strong>，然后再利用选择的数据集训练学习器。</p><p><strong>Relief</strong>设置了一个“相关统计量”，来度量一个特征的重要性，</p><h2 id="Relief算法过程（二分类）"><a href="#Relief算法过程（二分类）" class="headerlink" title="Relief算法过程（二分类）"></a>Relief算法过程（二分类）</h2><p>给定训练集：</p><script type="math/tex; mode=display">\{(x_1,y_1),(x_2,y_2),\dots,(x_m,y_m\}</script><p>对于每个实例$x_i$：</p><p><strong>Relief</strong>，在<script type="math/tex">x_i</script>的<strong>同类样本</strong>（即<script type="math/tex">y_i</script>相同）中寻找<strong>最近邻 </strong><script type="math/tex">x_{i,nh}</script>，称为<strong>猜中近邻（near-hit）</strong>；</p><p>然后，在<script type="math/tex">x_i</script>的<strong>异类样本</strong>（即<script type="math/tex">y_i</script>不同）中寻找<strong>最近邻</strong><script type="math/tex">x_{i,nm}</script>​，称为<strong>猜错近邻（near-miss）</strong>；</p><p>则，对于属性$j$，其<strong>相关统计量</strong>为：</p><script type="math/tex; mode=display">\delta^j=\sum_idiff(x_i^j,x_{i,nm}^j)^2-diff(x_i^j,x_{i,nh}^j)^2</script><p>其中：</p><p>$x_a^j$：样本实例$x_a$在属性$j$上的取值；</p><p>$diff(a,b)$：$a$，$b$之间的差值；</p><ul><li>若是<strong>连续数据</strong>：<script type="math/tex">diff(a,b)=|a-b|</script></li><li>若是<strong>离散数据</strong>：<script type="math/tex">diff(a,b)=0,if\ a=b</script>；<script type="math/tex">diff(a,b)=1,if\ a\ne b</script></li></ul><h2 id="算法分析"><a href="#算法分析" class="headerlink" title="算法分析"></a>算法分析</h2><ul><li>如果<script type="math/tex">sum_idiff(x_i^j,x_{i,nm}^j)^2-diff(x_i^j,x_{i,nh}^j)^2>0</script>，即<script type="math/tex">x_i</script>，与其<strong>猜中近邻</strong><script type="math/tex">x_{i,nh}</script>在属性<script type="math/tex">j</script>上的<strong>距离</strong>小于<strong>猜错近邻</strong><script type="math/tex">x_{i,nm}</script>。则说明属性$j$对于区分类别是有益的，所以其<strong>相关统计量</strong>增大；</li><li>相反情况，其<strong>相关统计量</strong>减小；</li><li>最终，<strong>相关统计量</strong>值越大的属性，说明其作用越显著；</li></ul><h3 id="Relief-F算法（多分类）"><a href="#Relief-F算法（多分类）" class="headerlink" title="Relief-F算法（多分类）"></a>Relief-F算法（多分类）</h3><p>给定数据集：</p><ul><li><p>数据集：<script type="math/tex">\{(x_1,y_1),(x_2,y_2),\dots,(x_m,y_m\}</script></p></li><li><p>其类别集：<script type="math/tex">y\in \{1,2,\dots,|\mathcal{Y}|\}</script></p></li></ul><p>对于每个实例$x_i$：</p><p><strong>Relief-F</strong>，在<script type="math/tex">x_i</script>的<strong>同类样本</strong>（即<script type="math/tex">y_i</script>相同）中寻找<strong>最近邻</strong><script type="math/tex">x_{i,nh}</script>，称为<strong>猜中近邻</strong>；</p><p>然后，在<script type="math/tex">x_i</script>的每个不同类（共<script type="math/tex">|\mathcal{Y}|-1</script>个）寻找一个<strong>最近邻</strong><script type="math/tex">x_{i,l,nm},l\in\{1,2,\dots,|\mathcal{Y}|;l\ne k\}</script>，称为<strong>猜错近邻</strong>；</p><p>于是，改进的<strong>相关统计量</strong>为：</p><script type="math/tex; mode=display">\delta^j=\sum_i(\sum_{l\ne k}(p_l\times diff(x_i^j,x_{i,l,nm}^j)^2)-diff(x_i^j.x_{i,nh}^j)^2)</script><p>其中：</p><p>$p_l$：第$l$类样本在数据集$D$中所占的比例。</p><p><strong>REF</strong>：</p><p>周志华.2015.机器学习.北京.清华大学出版社.p249</p>]]></content>
    
    
    <summary type="html">Relief是一种著名的过滤式特征选择的方法。</summary>
    
    
    
    
    <category term="Machine Learning" scheme="https://1.15.86.100/tags/Machine-Learning/"/>
    
    <category term="Feature Engineering" scheme="https://1.15.86.100/tags/Feature-Engineering/"/>
    
  </entry>
  
  <entry>
    <title>Hexo ERROR:hexo-renderer-swig</title>
    <link href="https://1.15.86.100/2021/03/28/Hexo-ERROR-hexo-renderer-swig/"/>
    <id>https://1.15.86.100/2021/03/28/Hexo-ERROR-hexo-renderer-swig/</id>
    <published>2021-03-28T14:14:10.000Z</published>
    <updated>2021-03-28T14:19:14.200Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Hexo-ERROR-hexo-renderer-swig"><a href="#Hexo-ERROR-hexo-renderer-swig" class="headerlink" title="Hexo ERROR: hexo-renderer-swig"></a>Hexo ERROR: hexo-renderer-swig</h1><h3 id="报错内容"><a href="#报错内容" class="headerlink" title="报错内容"></a>报错内容</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% extends &#x27;_layout.swig&#x27; %&#125; &#123;% import &#x27;_macro/post.swig&#x27; as post_template %&#125; &#123;% import &#x27;_macro/sidebar.swig&#x27; as sidebar_template %&#125; &#123;% block title %&#125;&#123;&#123; config.title &#125;&#125;&#123;% if theme.index_with_subtitle and config.subtitle %&#125; - &#123;&#123;config.subtitle &#125;&#125;&#123;% endif %&#125;&#123;% endblock %&#125; &#123;% block page_class %&#125; &#123;% if is_home() %&#125;page-home&#123;% endif -%&#125; &#123;% endblock %&#125; &#123;% block content %&#125;</span><br><span class="line">&#123;% for post in page.posts %&#125; &#123;&#123; post_template.render(post, true) &#125;&#125; &#123;% endfor %&#125;</span><br><span class="line">&#123;% include &#x27;_partials/pagination.swig&#x27; %&#125; &#123;% endblock %&#125; &#123;% block sidebar %&#125; &#123;&#123; sidebar_template.render(false) &#125;&#125; &#123;% endblock %&#125;</span><br></pre></td></tr></table></figure><p><img src="/2021/03/28/Hexo-ERROR-hexo-renderer-swig/image-20210328221727193.png" alt="image-20210328221727193"></p><h3 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h3><p><strong>Hexo</strong>在5.0+中删除了<em>hexo-renderer-swig</em>，因此需要自己安装。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i hexo-renderer-swig</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">解决Hexo {% extends &#39;_layout.swig&#39; %}....{% endblock %} 报错</summary>
    
    
    
    
    <category term="Hexo" scheme="https://1.15.86.100/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>XLNet-PPT</title>
    <link href="https://1.15.86.100/2021/03/28/XLNet-PPT/"/>
    <id>https://1.15.86.100/2021/03/28/XLNet-PPT/</id>
    <published>2021-03-28T12:54:18.000Z</published>
    <updated>2021-03-28T13:05:35.819Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/2021/03/28/XLNet-PPT/PPT1.PNG" alt="1"></p><p><img src="/2021/03/28/XLNet-PPT/%E5%B9%BB%E7%81%AF%E7%89%872.PNG" alt="2"></p><p><img src="/2021/03/28/XLNet-PPT/%E5%B9%BB%E7%81%AF%E7%89%873.PNG" alt="3"></p><p><img src="/2021/03/28/XLNet-PPT/%E5%B9%BB%E7%81%AF%E7%89%874.PNG" alt="4"></p><p><img src="/2021/03/28/XLNet-PPT/%E5%B9%BB%E7%81%AF%E7%89%875.PNG" alt="5"></p><p><img src="/2021/03/28/XLNet-PPT/%E5%B9%BB%E7%81%AF%E7%89%876.PNG" alt="6"></p><p><img src="/2021/03/28/XLNet-PPT/%E5%B9%BB%E7%81%AF%E7%89%877.PNG" alt="7"></p><p><img src="/2021/03/28/XLNet-PPT/%E5%B9%BB%E7%81%AF%E7%89%878.PNG" alt="8"></p><p><img src="/2021/03/28/XLNet-PPT/%E5%B9%BB%E7%81%AF%E7%89%879.PNG" alt="9"></p><p><img src="/2021/03/28/XLNet-PPT/%E5%B9%BB%E7%81%AF%E7%89%8710.PNG" alt="10"></p><p><img src="/2021/03/28/XLNet-PPT/%E5%B9%BB%E7%81%AF%E7%89%8711.PNG" alt="11"></p><p><img src="/2021/03/28/XLNet-PPT/%E5%B9%BB%E7%81%AF%E7%89%8712.PNG" alt="12"></p><p><img src="/2021/03/28/XLNet-PPT/%E5%B9%BB%E7%81%AF%E7%89%8713.PNG" alt="13"></p><p><img src="/2021/03/28/XLNet-PPT/%E5%B9%BB%E7%81%AF%E7%89%8714.PNG" alt="14"></p><p><img src="/2021/03/28/XLNet-PPT/%E5%B9%BB%E7%81%AF%E7%89%8715.PNG" alt="15"></p><p><img src="/2021/03/28/XLNet-PPT/%E5%B9%BB%E7%81%AF%E7%89%8716.PNG" alt="16"></p><p><img src="/2021/03/28/XLNet-PPT/%E5%B9%BB%E7%81%AF%E7%89%8717.PNG" alt="17"></p><p><img src="/2021/03/28/XLNet-PPT/%E5%B9%BB%E7%81%AF%E7%89%8718.PNG" alt="18"></p>]]></content>
    
    
    <summary type="html">介绍XLNet的PPT</summary>
    
    
    
    
    <category term="NLP" scheme="https://1.15.86.100/tags/NLP/"/>
    
  </entry>
  
  <entry>
    <title>XLNet</title>
    <link href="https://1.15.86.100/2021/03/28/XLNet/"/>
    <id>https://1.15.86.100/2021/03/28/XLNet/</id>
    <published>2021-03-28T12:44:55.000Z</published>
    <updated>2021-03-28T14:55:56.901Z</updated>
    
    <content type="html"><![CDATA[<h1 id="XLNet"><a href="#XLNet" class="headerlink" title="XLNet"></a>XLNet</h1><p><a href="https://arxiv.org/pdf/1906.08237.pdf">XLNET</a></p><h2 id="Background"><a href="#Background" class="headerlink" title="Background"></a>Background</h2><h3 id="AR-AutoRegressive"><a href="#AR-AutoRegressive" class="headerlink" title="AR(AutoRegressive)"></a>AR(AutoRegressive)</h3><p>用模型估计一个文本库的<strong>概率分布</strong></p><p>给定<strong>文本序列</strong>：</p><p>$ \bold{x}=[x_1,x_2,\dots,x_T] $</p><p><strong>AR</strong>模型会将<strong>似然</strong>分解成<strong>前向的乘积(forward product)</strong>：</p><p>$p(\bold{x})=\prod<em>{t=1}^Tp(x_t|\bold{x}</em>{&lt;t})$</p><p>或者<strong>后向乘积(backward product)</strong>：</p><p>$p(\bold{x})=\prod<em>{t=T}^1p(x_t|\bold{x}</em>{&gt;t})$</p><p>而其中每个的<strong>概率分布</strong>可以用带参数的模型(神经网络等)来建模。</p><p><strong>AR</strong>通过最大化<strong>对数似然估计</strong>进行预训练：</p><script type="math/tex; mode=display">\mathrm{max}_{\theta}\ \ \mathrm{log}\ p_{\theta}(\bold{x})=\sum_{t=1}^T\mathrm{log}\ p_{\theta}(x_t|\bold{x}_{<t})=\sum_{t=1}^T\mathrm{log}\frac{\mathrm{exp}(h_{\theta}(\bold{x}_{1:t-1})^Te(x_t))}{\sum_{x'}\mathrm{exp}(h_{\theta}(\bold{x}_{1:t-1})^Te(x'))}</script><p><strong>其中</strong></p><p>$h<em>{\theta}(\bold{x}</em>{1:t-1})$：是用<em>神经网络模型</em>计算的文本的表征，可以通过<strong>RNN</strong>，<strong>Transformer</strong>等计算；</p><p>$e(x)$：是$x$的<strong>embedding</strong>；</p><p><strong>缺陷</strong>：<strong>AR</strong>模型只能<strong>单向(uni-directional)建模</strong></p><h3 id="AE-AutoEncoding"><a href="#AE-AutoEncoding" class="headerlink" title="AE(AutoEncoding)"></a>AE(AutoEncoding)</h3><p><strong>AE（自编码器）</strong>模型不会建立<strong>清晰的概率密度估计(explicit density estimation)</strong>，而是对原始数据进行<strong>重构(reconstruct)</strong>，例如：<strong>BERT</strong></p><p><strong>BERT</strong>：基于<strong>降噪自编码器（denoising auto-encoding）</strong>，给定输入，每次<strong>15%</strong>的<strong>字词(token)</strong>会被替换成特殊的标记<strong>[MASK]</strong>，然后模型会被训练去从输入的<strong>不全(corrupted)的数据</strong>中恢复原始的字词。因为<strong>BERT</strong>不用做<strong>密度估计(density estimation)</strong>，所以可以双向建模。</p><p>最优化训练公式如下：</p><script type="math/tex; mode=display">\mathrm{max}_{\theta}\ \ \mathrm{log}\ p_{\theta}(\bar{\bold{x}}|\hat{\bold{x}})\approx \sum_{t=1}^Tm_t\mathrm{log}\ p_{\theta}(x_t|\hat{\bold{x}})=\sum_{t=1}^Tm_t\mathrm{log}\frac{\mathrm{exp}(H_\theta(\hat{\bold{x}})_t^Te(x_t))}{\sum_{x'}\mathrm{exp}(H_\theta(\hat{\bold{x}})_t^Te(x'))}</script><p>其中：</p><p>$\hat{\bold{x}}$：<strong>mask</strong>后的文本；</p><p>$\bar{\bold{x}}$：被<strong>mask</strong>的文本；</p><p>$m_t$：<strong>指示变量</strong>，当$x_t$是被<strong>mask</strong>的时，$m_t=1$，其他情况下，$m_t=0$；</p><p>$H_\theta$：Transformer模型；</p><p><strong>缺陷</strong>：</p><ul><li><strong>BERT</strong>预训练使用的标记<strong>[MASK]</strong>不会出现在真正数据中，会导致<strong>预训练-微调差异(pretrain-finetune discrepancy)</strong></li><li>输入中不包括待预测字词（被mask掉），<strong>BERT</strong>模型不能像<strong>AR</strong>中一样用乘法规则建模<strong>联合概率(joint probability)</strong></li><li><strong>BERT</strong>假设待预测的字词即$\bar{x}$<strong>互相独立</strong></li></ul><p><strong>优点</strong>：</p><ul><li><strong>BERT</strong>每个位置的字词可以注意到双向的上下文所有的文本；</li></ul><h2 id="XLNet-1"><a href="#XLNet-1" class="headerlink" title="XLNet"></a>XLNet</h2><ul><li><strong>XLNet</strong>最大化基于所有可能的<strong>分解顺序的排列(permutation of the factorization order)</strong>的<strong>极大对数似然估计</strong>，由于这个原因每个位置的字词可以学习左右的文本；</li><li><strong>XLNet</strong>预训练不会通过mask部分字词的方法，因此避免<strong>预训练-微调差异</strong>；</li><li><strong>XLNet</strong>集成了<strong>段RNN机制(segment recurrence)</strong>和<strong>Transformer-XL</strong>；</li></ul><h3 id="Permutation-Language-Modeling"><a href="#Permutation-Language-Modeling" class="headerlink" title="Permutation Language Modeling"></a>Permutation Language Modeling</h3><p>一般来说，对于一个长度为$T$的序列$\bold{x}$，<strong>AE</strong>的<strong>因子分解</strong>存在$T!$个不同的排列顺序。直觉上，如果模型参数能够从所有的排列中学得，那么这个模型就可以从双向的所有位置获得信息。</p><p>根据这个想法，得出以下优化公式：</p><script type="math/tex; mode=display">\mathrm{max}_\theta\ \ \ \mathbb{E}_{z\sim\mathcal{Z}_T}[\sum_{t=1}^T\mathrm{log}\ p_\theta(x_{z_t}|\bold{x}_{\bold{z}_{<t}})]</script><p>其中：</p><p>$\mathcal{Z}_T$：长度为$T$的序列的所有排列方式；</p><p><img src="/2021/03/28/XLNet/image-20210322211204908.png" alt="image-20210322211204908"></p><p>实践中，对于一个文本序列$\bold{x}$，我们<strong>采样</strong>出一个排列顺序，然后按照这个顺序将$p_\theta(\bold{x})$的似然估计进行<strong>因子分解</strong>，因为$\theta$参数是共享的，所以理论上$x_i$会”看见“每个$x_j,x_i\neq x_j$。</p><p><strong>排列采样</strong>在<strong>Transformer</strong>的实践中通过<strong>Attention</strong>的<strong>mask</strong>矩阵实现。</p><p>这样就避免了<strong>独立性假设</strong>和<strong>预训练-微调差异</strong>。</p><h4 id="Remark-on-Permutation"><a href="#Remark-on-Permutation" class="headerlink" title="Remark on Permutation"></a>Remark on Permutation</h4><p>上面的<strong>排列采样</strong>仅针对<strong>因子分解</strong>计算，不是序列本身的顺序。同时为了保留序列原本顺序的信息，这里使用基于原本顺序的<strong>位置编码</strong>。</p><h3 id="Architecture"><a href="#Architecture" class="headerlink" title="Architecture"></a>Architecture</h3><h4 id="Target-Aware-Representations"><a href="#Target-Aware-Representations" class="headerlink" title="Target-Aware Representations"></a>Target-Aware Representations</h4><p><strong>模型公式</strong>：</p><script type="math/tex; mode=display">p_\theta(\bold{X}_{z_t}=x|\bold{x}_{\bold{z}_{<t}})=\frac{\mathrm{exp}(e(x)^Th_\theta(\bold{x}_{\bold{z}_{<t}}))}{\sum_{x'}\mathrm{exp}(e(x')^Tg_\theta(\bold{x}_{\bold{z}_{<t}}))}</script><p>其中$\bold{x}<em>{\bold{z}</em>{&lt;t}}$不依赖其即将预测的<strong>位置信息</strong>，$\bold{z}$是按照<strong>因子分解顺序</strong>排列的。因此这里需要加入位置信息；所以将公式修改为：</p><script type="math/tex; mode=display">p_\theta(\bold{X}_{z_t}=x|\bold{x}_{\bold{z}_{<t}})=\frac{\mathrm{exp}(e(x)^Tg_\theta(\bold{x}_{\bold{z}_{<t}},z_t))}{\sum_{x'}\mathrm{exp}(e(x')^Tg_\theta(\bold{x}_{\bold{z}_{<t}},z_t))}</script><p>其中：</p><p>$g<em>\theta(\bold{x}</em>{\bold{z}_{&lt;t}}, z_t)$：表示将预测目标的位置编码$z_t$加入的新的表征。</p><p>这可以看成<strong>站在</strong>目标位置$z<em>t$，然后依靠位置信息去收集文本信息$\bold{x}</em>{\bold{z}_{&lt;t}}$。</p><h4 id="Two-Stream-Self-Attention"><a href="#Two-Stream-Self-Attention" class="headerlink" title="Two-Stream Self-Attention"></a>Two-Stream Self-Attention</h4><p>使用<strong>Target-Aware Representation</strong>会出现两个问题：</p><ul><li>为了预测$z<em>t$位置的字词$x</em>{z<em>{t}}$，$g</em>\theta(\bold{x}<em>{\bold{z}</em>{&lt;t}},z<em>t)$不能使用$x</em>{z_{t}}$的信息；</li><li>为了预测其他位置的字词$x<em>{z_t},j&gt;t$，$g</em>\theta(\bold{x}<em>{\bold{z}</em>{&lt;t}},z<em>t)$需要加入$x</em>{z_{t}}$的信息。</li></ul><p>为了解决上面问题，这里提出了<strong>Two-Stream Self-Attention</strong>方法</p><p><img src="/2021/03/28/XLNet/image-20210325230153410.png" alt="image-20210325230153410"></p><ul><li><strong>content representation</strong>$h<em>\theta(\bold{x}</em>{\bold{z}<em>{\le t}})$，这个和<strong>Transformer</strong>中的类似，它保留了上游文本信息和$x</em>{z_t}$的信息；</li><li><strong>query representation</strong>$g<em>\theta(\bold{x}</em>{\bold{z}<em>t},z_t)$，这个只保留了$\bold{z}</em>{&lt;t}$的信息。</li></ul><p>在计算上：</p><p>第一层的<strong>query stream</strong>被初始化为可训练的向量，$g_i^{(0)}=w$；</p><p>第一层的<strong>content stream</strong>被初始化为对应的<strong>词向量</strong>，$h_i^{(0)}=e(x_i)$；</p><p>对于每个<strong>self-attention layer</strong>，其更新方式为：</p><script type="math/tex; mode=display">g_{z_t}^{(m)}=\mathrm{Attention}(Q=g_{z_t}^{(m-1)},KV=h_{\bold{z}_{<t}}^{(m-1)};\theta)</script><script type="math/tex; mode=display">h_{z_t}^{(m)}=\mathrm{Attention}(Q=h_{z_t}^{(m-1)},KV=h_{\bold{z}_{\le t}}^{(m-1)};\theta)</script><p><strong>content representation</strong>和标准的<strong>self-attention</strong>一样，所以在<strong>微调</strong>的时候我们会丢掉<strong>query stream</strong>，只使用<strong>content stream</strong>作为普通的<strong>Transformer</strong>看，同时我们将$g_{z_t}^{(M)}$作为最终的预测结果。</p><h4 id="Partial-Prediction"><a href="#Partial-Prediction" class="headerlink" title="Partial Prediction"></a>Partial Prediction</h4><p>利用语句排列来训练模型存在<strong>难收敛(slow convergence)</strong>的问题，为了解决这个问题，将$\bold{z}$分为$\bold{z}<em>{\le c}$和$\bold{z}</em>{&gt;c}$，然后最大化以下概率：</p><script type="math/tex; mode=display">\mathrm{max}_{\theta}\ \ \ \mathbb{E}_{\bold{z}\sim \mathcal{Z}_T}[\mathrm{log}p_{\theta}(\bold{x}_{\bold{z}_{>c}}|\bold{x}_{\bold{z}_{\le c}})]=\mathbb{E}_{\bold{z}\sim \mathcal{Z}_T}[\sum_{t=c+1}^{\bold{z}}\mathrm{log}p_{\theta}(x_{z_t}|\bold{x}_{\bold{z}_{<t}})]</script><p>预测$\bold{z}_{&gt;c}$的原因是因为，能够传递足够的信息。一般会设置一个超参数$K$，$1/K$的字词被选择用做预测。</p><h3 id="Incorporating-Ideas-from-Transformer-XL"><a href="#Incorporating-Ideas-from-Transformer-XL" class="headerlink" title="Incorporating Ideas from Transformer-XL"></a>Incorporating Ideas from Transformer-XL</h3><p>这里使用了<strong>Transformer-XL</strong>的两个技巧：<strong>相对位置编码（relative positional encoding scheme）</strong>和<strong>段循环机制（segment recurrence mechanism）</strong></p><ul><li><p><strong>相对位置编码</strong>：即前文的$g<em>\theta(\bold{x}</em>{\bold{z}_t},z_t)$</p></li><li><p><strong>段循环机制</strong>：</p><p>  <img src="/2021/03/28/XLNet/image-20210328204303326.png" alt="image-20210328204303326"></p><p>  假设有长文本中的两段文本，长文本为：$\bold{s}$，两端文本为：$\tilde{\bold{x}}=\bold{s}<em>{1:T},\bold{x}=\bold{s}</em>{T+1:2T}$，两端文本对应的采样的排列顺序为$\tilde{\bold{z}}=[1\dots T],\bold{z}=[T+1\dots 2T]$</p><p>  于是基于$\tilde{\bold{z}}$，先处理第一段，获得<strong>文本表征</strong>$\tilde{\bold{h}}^{(m)}$($m$代表层数)，然后对于下一段，计算公式为：</p><script type="math/tex; mode=display">h_{z_t}^{(m)}\leftarrow \mathrm{Attention}(Q=h_{z_t}^{(m-1)},KV=[\tilde{\bold{h}}^{(m-1)},\bold{h}_{\bold{z}_{\le t}}^{(m-1)}];\theta)</script><p>  $[\dots]$：表示将矩阵按照<strong>序列长度的维度</strong>拼接起来。</p></li></ul><h3 id="Modeling-Multiple-Segments"><a href="#Modeling-Multiple-Segments" class="headerlink" title="Modeling Multiple Segments"></a>Modeling Multiple Segments</h3><p>预训练时，对于多段文本，<strong>XLNet</strong>随机采样两段文本（可能从同一上下文，也可能从不同上下文）然后将其拼接成一段文本（方法和<strong>BERT</strong>一样：<strong>[A, SEP, B, SEP, CLS]</strong>）</p><h4 id="Relative-Segment-Encoding"><a href="#Relative-Segment-Encoding" class="headerlink" title="Relative Segment Encoding"></a>Relative Segment Encoding</h4><p>给定两个位置$i,j$，如果这两个位置是来自同一段，则用编码$s<em>{i,j}=s</em>{+}$，否则用编码$s<em>{i,j}=s</em>{-}$。这两个编码都是学得的参数。</p><p>当$i$查询$j$时，段位置编码$s<em>{i,j}$会被用于计算<strong>注意权重（attention weight）</strong>$a</em>{i,j}=(\bold{q}<em>i+\bold{b})^T\bold{s}</em>{i,j}$。</p><p>$\bold{q}_i$是查询向量，$\bold{b}$是待学习的依赖于头的偏差向量<strong>（learnable head-specific bias vector）</strong>。最后该权重会被加到最终的<strong>注意权重</strong>上。</p><p>该方法有两个作用：</p><ul><li>提高泛化能力；</li><li>让模型能够适应多段文本任务，因为多段文本不能用绝对位置编码；</li></ul>]]></content>
    
    
    <summary type="html">Google Brain重磅出品，集自回归语言模型和自编码语言模型之大成，又灵活融入Transformer-XL长文本建模能力！</summary>
    
    
    
    
    <category term="NLP" scheme="https://1.15.86.100/tags/NLP/"/>
    
  </entry>
  
  <entry>
    <title>SQL-install</title>
    <link href="https://1.15.86.100/2020/10/29/SQL-install/"/>
    <id>https://1.15.86.100/2020/10/29/SQL-install/</id>
    <published>2020-10-29T11:49:01.000Z</published>
    <updated>2021-03-27T14:40:20.193Z</updated>
    
    <content type="html"><![CDATA[<h1 id="安装MySQL"><a href="#安装MySQL" class="headerlink" title="安装MySQL"></a>安装MySQL</h1><h3 id="下载："><a href="#下载：" class="headerlink" title="下载："></a>下载：</h3><ul><li><p>在<a href="https://dev.mysql.com/downloads/mysql/">MySQL官网</a>下载<strong>zip</strong>文件；</p></li><li><p>本地直接解压；</p></li></ul><h3 id="安装："><a href="#安装：" class="headerlink" title="安装："></a>安装：</h3><ul><li>配置<strong>环境变量</strong>：添加解压文件的<strong>bin</strong>文件夹路径至<strong>PATH</strong>；</li><li>初始化，生成DATA文件：<em>mysqld –initialize-insecure –user=mysql</em></li><li>网络连接：<em>mysqld -install</em></li><li>启动服务：<em>net start mysql</em>【在bin目录下】</li></ul><h3 id="登录："><a href="#登录：" class="headerlink" title="登录："></a>登录：</h3><ul><li><p>登录【不用密码】：<em>mysql -u root -p</em></p></li><li><p>查询用户密码：<em>select host,user,authentication_string from mysql.user;</em></p></li><li><p>设置<strong>root</strong>用户密码：<strong>ALTER USER ‘root’@’localhost’ IDENTIFIED WITH mysql_native_password BY ‘123456’;</strong></p></li><li><p>保存修改：<em>flush privileges;</em></p></li></ul><h3 id="基本操作："><a href="#基本操作：" class="headerlink" title="基本操作："></a>基本操作：</h3><ul><li><strong>退出</strong>：<em>quit</em></li><li></li></ul>]]></content>
    
    
    <summary type="html">SQL</summary>
    
    
    
    
    <category term="SQL" scheme="https://1.15.86.100/tags/SQL/"/>
    
  </entry>
  
  <entry>
    <title>LDA(Fisher)</title>
    <link href="https://1.15.86.100/2020/07/07/LDA-Fisher/"/>
    <id>https://1.15.86.100/2020/07/07/LDA-Fisher/</id>
    <published>2020-07-07T07:58:22.000Z</published>
    <updated>2021-03-27T14:39:47.317Z</updated>
    
    <content type="html"><![CDATA[<h1 id="LDA-Fisher"><a href="#LDA-Fisher" class="headerlink" title="LDA(Fisher)"></a>LDA(Fisher)</h1><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p><strong>LDA(Linear Discriminant Analysis)<strong>，又称</strong>Fisher判别方法</strong>。是一种经典的<strong>线性判别方法</strong>。该方法主要思想是：将样例投影到一维直线上，使得<strong>同类样例</strong>的投影点尽可能<strong>接近</strong>和<strong>密集</strong>；<strong>异类</strong>投影点尽可能<strong>远离</strong>。</p><p><img src="/2020/07/07/LDA-Fisher/.%5CLDA-Fisher%5Cfisher.png" alt="fisher"></p><h3 id="计算推导"><a href="#计算推导" class="headerlink" title="计算推导"></a>计算推导</h3><p>假设已知样本 $C_1$ 和 $C_2$ ，$|C_1|、|C_2|$ 分别两类样本数据的总数。</p><p>则两类样例的<strong>类中心</strong>分别为：</p><p>$$\mu_1=\frac{1}{|C_1|}\sum_{x\in{C_1}}x$$</p><p>$$\mu_2=\frac{1}{|C_2|}\sum_{x\in{C_2}}x$$</p><p>假设最佳的投影方向为 $w$ 则，样本点 $x$ 投影到 $w$ 上的点的坐标为：$y=w^Tx$</p><p>所以，投影后的<strong>类中心</strong>为：</p><p>$$m_k=\frac{1}{|C_k|}\sum_{x\in{C_k}}w^Tx=w^T\frac{1}{|C_k|}\sum_{x\in{C_k}}x=w^T\mu_k$$</p><h4 id="类间距离"><a href="#类间距离" class="headerlink" title="类间距离"></a>类间距离</h4><p><strong>类中心</strong>的<strong>间距</strong>为：</p><p>$$d_{(1, 2)}=(m_1-m_2)^2=(m_1-m_2)(m_1-m_2)^T=w^T(\mu_1-\mu_2)(\mu_1-\mu_2)^Tw=w^TS_bw$$</p><p>其中，$S_b$ 为<strong>类间散度矩阵</strong>：</p><p>$$S_b=(\mu_1-\mu_2)(\mu_1-\mu_2)^T$$</p><h4 id="类内距离"><a href="#类内距离" class="headerlink" title="类内距离"></a>类内距离</h4><p><strong>类内距离</strong>用类内样本的方差来衡量，对于第 $k$ 个类，方差为：</p><p>$$\begin{split}S_k^2=\sum_{x\in{C_k}}(y-m_k)^2=\sum_{x\in{C_k}}(w^T(x-\mu_k))^2\=\sum_{x\in{C_k}}(w^T(x-\mu_k))((x-\mu_k)^Tw)\=w^T[\sum_{x\in{C_k}}(x-\mu_k)(x-\mu_k)^T]w \end{split}$$</p><p>所有类别<strong>类内距离</strong>之和为：</p><p>$$\sum_{k\in n}S_k^2=w^T[\sum_{k\in n}\sum_{x\in{C_k}}(x-\mu_k)(x-\mu_k)^T]w$$</p><p><strong>类内散度矩阵</strong>为：</p><p>$$S_w=\sum\sum_{x\in{C_k}}(x-\mu_k)(x-\mu_k)^T$$</p><h4 id="最优化"><a href="#最优化" class="headerlink" title="最优化"></a>最优化</h4><p>我们的优化目的是增加<strong>类间距离</strong>，减小<strong>类内距离</strong>，所有可以最大化函数：</p><p>$$J(w)=\frac{(m_1-m_2)^2}{S_1^2+S_2^2}=\frac{w^TS_bw}{w^TS_ww}$$</p>]]></content>
    
    
    <summary type="html">LDA</summary>
    
    
    
    
    <category term="Machine Learning" scheme="https://1.15.86.100/tags/Machine-Learning/"/>
    
  </entry>
  
  <entry>
    <title>PowerShell</title>
    <link href="https://1.15.86.100/2020/03/08/PowerShell/"/>
    <id>https://1.15.86.100/2020/03/08/PowerShell/</id>
    <published>2020-03-08T02:40:06.000Z</published>
    <updated>2020-04-05T08:56:23.854Z</updated>
    
    <content type="html"><![CDATA[<h1 id="PowerShell"><a href="#PowerShell" class="headerlink" title="PowerShell"></a>PowerShell</h1><h2 id="basic-command-lines"><a href="#basic-command-lines" class="headerlink" title="basic command lines"></a>basic command lines</h2><ol><li><p>get information about the power-shell (version…)</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$psversiontable</span></span><br></pre></td></tr></table></figure></li><li><p>enter ps through CMD</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt;powershell</span><br></pre></td></tr></table></figure></li><li><p>basic math operation</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1024</span>*<span class="number">1024</span></span><br></pre></td></tr></table></figure></li><li><p>get service information</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">get-service</span></span><br></pre></td></tr></table></figure></li><li><p>print environment variables</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$env:path</span></span><br></pre></td></tr></table></figure></li><li><p>get all of the commands</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">get-command</span></span><br><span class="line"><span class="built_in">gcm</span></span><br></pre></td></tr></table></figure></li><li><p>help</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">get-help</span> [<span class="type">command</span>-<span class="type">name</span>]</span><br></pre></td></tr></table></figure></li><li><p>history commands</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">get-history</span></span><br></pre></td></tr></table></figure></li><li><p>find the real name of a short name</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">get-alias</span> <span class="literal">-name</span> [<span class="type">short</span>-<span class="type">name</span>]</span><br></pre></td></tr></table></figure></li><li><p>set alias</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">set-alias</span> <span class="literal">-name</span> [<span class="built_in">new-name</span>] <span class="literal">-value</span> [<span class="type">old</span>-<span class="type">name</span>]</span><br></pre></td></tr></table></figure></li><li><p>input</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$input</span>=<span class="built_in">read-host</span> <span class="string">&quot;please input&quot;</span></span><br></pre></td></tr></table></figure></li></ol><h2 id="Shortcut-Key"><a href="#Shortcut-Key" class="headerlink" title="Shortcut Key"></a>Shortcut Key</h2><ol><li><p>cancel the progress running</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Ctrl+C</span><br></pre></td></tr></table></figure></li></ol><h2 id="Special-methods"><a href="#Special-methods" class="headerlink" title="Special methods"></a>Special methods</h2><h4 id="pipeline"><a href="#pipeline" class="headerlink" title="pipeline"></a>pipeline</h4><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a | b</span><br></pre></td></tr></table></figure><h4 id="redirection"><a href="#redirection" class="headerlink" title="redirection"></a>redirection</h4><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;<span class="comment">#append</span></span><br><span class="line">&gt;&gt;<span class="comment">#overwrite</span></span><br></pre></td></tr></table></figure><h4 id="format"><a href="#format" class="headerlink" title="format"></a>format</h4><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;...&#123;0&#125;...&#123;1&#125;...&quot;</span> <span class="operator">-f</span> <span class="variable">$first</span>, <span class="variable">$second</span>, ...</span><br></pre></td></tr></table></figure><h2 id="Variable"><a href="#Variable" class="headerlink" title="Variable"></a>Variable</h2><ol><li><p>definition</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$</span>[<span class="type">variable</span>-<span class="type">name</span>]=[<span class="type">variable</span>-<span class="type">value</span>]<span class="comment">#$a equals $A</span></span><br></pre></td></tr></table></figure></li><li><p>check the variables</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">ls</span> variables:</span><br></pre></td></tr></table></figure></li><li><p>array</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$arr</span>=<span class="selector-tag">@</span>()<span class="comment">#empty array</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$arr</span>=<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$arr</span>=<span class="number">1</span>..<span class="number">5</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$arr</span>=<span class="number">1</span>, <span class="string">&#x27;hello&#x27;</span>, <span class="number">9</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$arr</span>.count<span class="comment">#return array&#x27;s numbers</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$arr</span>+=[<span class="built_in">new-element</span>]</span><br></pre></td></tr></table></figure></li><li><p>string</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$str</span>.split(<span class="string">&quot;[chars]&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="variable">$str</span>.endswith(<span class="string">&quot;[chars]&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="variable">$str</span>.contains(<span class="string">&quot;[chars]&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="variable">$str</span>.compareto(<span class="string">&quot;[chars]&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="variable">$str</span>.indexof(<span class="string">&quot;[char]&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="variable">$str</span>.insert(position<span class="literal">-num</span>, <span class="string">&quot;[chars]&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="variable">$str</span>.replace(<span class="string">&quot;old-char&quot;</span>, <span class="string">&quot;new-char&quot;</span>)</span><br></pre></td></tr></table></figure></li></ol><h2 id="Operation"><a href="#Operation" class="headerlink" title="Operation"></a>Operation</h2><ol><li><p>comparation</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[<span class="type">variable</span>-<span class="type">a</span>] <span class="operator">-eq</span> [<span class="type">variable</span>-<span class="type">b</span>]<span class="comment">#equal?</span></span><br><span class="line"></span><br><span class="line">[<span class="type">variable</span>-<span class="type">a</span>] <span class="operator">-ne</span> [<span class="type">variable</span>-<span class="type">b</span>]<span class="comment">#not equal?</span></span><br><span class="line"></span><br><span class="line">[<span class="type">variable</span>-<span class="type">a</span>] <span class="operator">-gt</span> [<span class="type">variable</span>-<span class="type">b</span>]<span class="comment">#greater?</span></span><br><span class="line"></span><br><span class="line">[<span class="type">variable</span>-<span class="type">a</span>] <span class="operator">-lt</span> [<span class="type">variable</span>-<span class="type">b</span>]<span class="comment">#less?</span></span><br></pre></td></tr></table></figure></li><li><p>bool operation</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">-not</span> [<span class="type">variable</span>]</span><br><span class="line"></span><br><span class="line">[<span class="type">variable</span>-<span class="type">a</span>] <span class="operator">-and</span> [<span class="type">variable</span>-<span class="type">b</span>]</span><br><span class="line"></span><br><span class="line">[<span class="type">variable</span>-<span class="type">a</span>] <span class="operator">-or</span> [<span class="type">variable</span>-<span class="type">b</span>]</span><br><span class="line"></span><br><span class="line">[<span class="type">variable</span>-<span class="type">a</span>] <span class="operator">-xor</span> [<span class="type">variable</span>-<span class="type">b</span>]</span><br></pre></td></tr></table></figure></li></ol><h2 id="Basic-Grammar"><a href="#Basic-Grammar" class="headerlink" title="Basic Grammar"></a>Basic Grammar</h2><ol><li><p>if</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(conditon)</span><br><span class="line">&#123;expr1&#125;</span><br><span class="line"><span class="keyword">elseif</span></span><br><span class="line">&#123;expr2&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;expr3&#125;</span><br></pre></td></tr></table></figure></li><li><p>switch</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">switch</span>(key<span class="literal">-variable</span>)</span><br><span class="line">&#123;</span><br><span class="line">&#123;<span class="variable">$_</span> condition1&#125;&#123;expr1&#125;</span><br><span class="line">&#123;<span class="variable">$_</span> condition2&#125;&#123;expr2&#125;</span><br><span class="line">default&#123;expr3&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>foreach</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">foreach</span>(<span class="variable">$each</span> <span class="keyword">in</span> [<span class="built_in">array</span>-<span class="type">variable</span>])</span><br><span class="line">&#123;</span><br><span class="line">expr</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>while</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span>(condition)</span><br><span class="line">&#123;</span><br><span class="line">expr</span><br><span class="line">[<span class="type">break</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>for</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(expr1; condition; expr2)</span><br><span class="line">&#123;</span><br><span class="line">expr3</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="Function"><a href="#Function" class="headerlink" title="Function"></a>Function</h2><ol><li><p>definition</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fun-name</span><span class="params">([parameter])</span></span></span><br><span class="line">&#123;</span><br><span class="line">expression</span><br><span class="line"><span class="keyword">return</span> [<span class="type">return</span>-<span class="type">value</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>using</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> [<span class="title">variable1</span>] [<span class="title">variable2</span>] ...</span></span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    
    <summary type="html">The basic methods of powershell</summary>
    
    
    
    
    <category term="powershell" scheme="https://1.15.86.100/tags/powershell/"/>
    
  </entry>
  
  <entry>
    <title>HMM-algorithm</title>
    <link href="https://1.15.86.100/2020/01/06/HMM-algorithm/"/>
    <id>https://1.15.86.100/2020/01/06/HMM-algorithm/</id>
    <published>2020-01-06T03:04:29.000Z</published>
    <updated>2020-01-06T03:11:33.528Z</updated>
    
    <content type="html"><![CDATA[<h1 id="隐马尔可夫模型-HMM"><a href="#隐马尔可夫模型-HMM" class="headerlink" title="隐马尔可夫模型(HMM)"></a>隐马尔可夫模型(HMM)</h1><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p><strong>隐马尔可夫模型(Hidden-Markov-Model)<strong>是一种</strong>概率图</strong>模型，在<strong>深度学习</strong>出现之前，该模型被广泛应用于<em>语音识别，文本标注</em>等方面。</p><p>隐马尔可夫模型是关于时序的概率图模型。</p>]]></content>
    
    
    <summary type="html">An introduction to the Hidden Markov Algorithm</summary>
    
    
    
    
    <category term="Machine Learning" scheme="https://1.15.86.100/tags/Machine-Learning/"/>
    
  </entry>
  
  <entry>
    <title>Linux</title>
    <link href="https://1.15.86.100/2019/12/17/Linux/"/>
    <id>https://1.15.86.100/2019/12/17/Linux/</id>
    <published>2019-12-17T03:40:07.000Z</published>
    <updated>2020-07-04T14:08:44.421Z</updated>
    
    <content type="html"><![CDATA[<h3 id="文件操作"><a href="#文件操作" class="headerlink" title="文件操作"></a>文件操作</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 获取当前目录下文件</span></span><br><span class="line">ls</span><br><span class="line"></span><br><span class="line"><span class="comment"># 进入子文件夹</span></span><br><span class="line"><span class="built_in">cd</span> [folder name]</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 返回上一目录</span></span><br><span class="line"><span class="built_in">cd</span> ..</span><br><span class="line"></span><br><span class="line"><span class="comment"># 返回上两级目录</span></span><br><span class="line"><span class="built_in">cd</span> ../..</span><br><span class="line"></span><br><span class="line"><span class="comment"># 返回home目录</span></span><br><span class="line"><span class="built_in">cd</span>/<span class="built_in">cd</span> ~ </span><br><span class="line"></span><br><span class="line"><span class="comment"># 返回指定目录</span></span><br><span class="line"><span class="built_in">cd</span> - [folder name]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取文件内容</span></span><br><span class="line">cat [file name]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看文件头</span></span><br><span class="line">head [file name]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看文件尾</span></span><br><span class="line">tail [file name]</span><br><span class="line">tail -f [file name] <span class="comment">#实时显示文件尾，跟随日志变化</span></span><br><span class="line"><span class="comment"># 修改/编写文件内容</span></span><br><span class="line">vim [file name]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改文件名</span></span><br><span class="line">mv [old file name] [new file name]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 新建文件</span></span><br><span class="line">touch [file name]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 新建文件夹</span></span><br><span class="line">mkdir [folder name]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除文件</span></span><br><span class="line">rm [file name]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除目录下所有文件</span></span><br><span class="line">rm *</span><br><span class="line"></span><br><span class="line"><span class="comment"># 递归删除文件夹</span></span><br><span class="line">rm -r [folder name]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 拷贝文件</span></span><br><span class="line">cp [old file name] [new file name]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示文件夹内文件大小</span></span><br><span class="line">ls -lh</span><br></pre></td></tr></table></figure><h3 id="Vim-操作"><a href="#Vim-操作" class="headerlink" title="Vim 操作"></a>Vim 操作</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 进入插入模式</span></span><br><span class="line">按i键</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 退出插入模式</span></span><br><span class="line">按Eac键</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 退出Vim</span></span><br><span class="line">:wq + Enter</span><br></pre></td></tr></table></figure><h3 id="进程操作"><a href="#进程操作" class="headerlink" title="进程操作"></a>进程操作</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 让进程在后台运行</span></span><br><span class="line">nuhup [<span class="built_in">command</span>] $</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取所有进程记录</span></span><br><span class="line">ps -aux</span><br><span class="line"></span><br><span class="line"><span class="comment"># 杀死进程</span></span><br><span class="line"><span class="built_in">kill</span> -9 [进程id]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示挂起进程</span></span><br><span class="line"><span class="built_in">jobs</span> -l</span><br><span class="line"></span><br><span class="line"><span class="comment"># 杀死当前bash内运行的进程</span></span><br><span class="line">Ctrl+c</span><br><span class="line"></span><br><span class="line"><span class="comment"># 挂起当前bash内运行的进程</span></span><br><span class="line">Ctrl+z</span><br><span class="line"></span><br><span class="line"><span class="comment"># 运行刚刚挂起的进程</span></span><br><span class="line">Ctrl+y</span><br><span class="line"></span><br><span class="line"><span class="comment"># 根据pid查看进程</span></span><br><span class="line">ps -ef|grep [pid]</span><br></pre></td></tr></table></figure><h3 id="查看历史命令"><a href="#查看历史命令" class="headerlink" title="查看历史命令"></a>查看历史命令</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">history</span>[num]</span><br></pre></td></tr></table></figure><h3 id="查看显卡利用情况"><a href="#查看显卡利用情况" class="headerlink" title="查看显卡利用情况"></a>查看显卡利用情况</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nvidia-smi</span><br></pre></td></tr></table></figure><h3 id="查看文件大小"><a href="#查看文件大小" class="headerlink" title="查看文件大小"></a>查看文件大小</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">du -ah</span><br></pre></td></tr></table></figure><h3 id="GPU"><a href="#GPU" class="headerlink" title="GPU"></a>GPU</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 实时查看GPU显存利用率，需要用pip按照gpustat</span></span><br><span class="line">watch --color -n1 gpustat -cpu</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看显存利用率</span></span><br><span class="line">nvidia-smi</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">Basic CommandLine for Linux</summary>
    
    
    
    
    <category term="Linux" scheme="https://1.15.86.100/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>Pytorch</title>
    <link href="https://1.15.86.100/2019/12/15/Pytorch/"/>
    <id>https://1.15.86.100/2019/12/15/Pytorch/</id>
    <published>2019-12-15T04:43:52.000Z</published>
    <updated>2021-04-02T09:13:48.559Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Pytorch"><a href="#Pytorch" class="headerlink" title="Pytorch"></a>Pytorch</h1><h3 id="background"><a href="#background" class="headerlink" title="background"></a>background</h3><p>Torch是一个使用Lua语言的神经网络</p><h2 id="torch"><a href="#torch" class="headerlink" title="torch"></a>torch</h2><h3 id="import"><a href="#import" class="headerlink" title="import"></a>import</h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">from</span> torch.autograd <span class="keyword">import</span> Variable</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h3 id="data-type"><a href="#data-type" class="headerlink" title="data type"></a>data type</h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># create empty tensor</span></span><br><span class="line">torch.empty(a, b, dtype=torch.<span class="built_in">float</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># create rand tensor</span></span><br><span class="line">torch.rand(a, b)</span><br><span class="line"></span><br><span class="line"><span class="comment"># create zero tensor</span></span><br><span class="line">torch.zeros(a, b)</span><br><span class="line"></span><br><span class="line"><span class="comment"># create ones tensor</span></span><br><span class="line">torch.ones(a, b)</span><br><span class="line"></span><br><span class="line"><span class="comment"># create from list</span></span><br><span class="line">torch.tensor(x)</span><br><span class="line"></span><br><span class="line"><span class="comment"># create rand tensor according a tensor</span></span><br><span class="line">torch.rand_like(x)</span><br><span class="line"></span><br><span class="line"><span class="comment"># get the size of a tensor</span></span><br><span class="line">x.size() <span class="comment"># return a tuple</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># resize the tensor</span></span><br><span class="line">x.view(-<span class="number">1</span>, b)</span><br></pre></td></tr></tbody></table></figure><h3 id="tansformation"><a href="#tansformation" class="headerlink" title="tansformation"></a>tansformation</h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># numpy to tensor</span></span><br><span class="line">torch_data = torch.from_numpy(np_data)</span><br><span class="line"></span><br><span class="line"><span class="comment">###########################################################################</span></span><br><span class="line"><span class="comment"># the ndarray of numpy and the tensor of torch share the same storage space</span></span><br><span class="line"><span class="comment">###########################################################################</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># tensor to numpy</span></span><br><span class="line">np_data = torch_data.numpy()</span><br><span class="line"></span><br><span class="line"><span class="comment"># int to tensor</span></span><br><span class="line">torch_data = torch.IntTensor(data)</span><br><span class="line"></span><br><span class="line"><span class="comment"># float to tensor</span></span><br><span class="line">torch_data = torch.FloatTensor(data)</span><br><span class="line"></span><br><span class="line"><span class="comment"># tensor to python(only one element in torch_data)</span></span><br><span class="line">data = torch_data.item()</span><br></pre></td></tr></tbody></table></figure><h3 id="basic-math-method"><a href="#basic-math-method" class="headerlink" title="basic math method"></a>basic math method</h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># matrix multiplication</span></span><br><span class="line">data = [[<span class="number">1</span>,<span class="number">2</span>], [<span class="number">3</span>,<span class="number">4</span>]]</span><br><span class="line">tensor = torch.FloatTensor(data)</span><br><span class="line">ans = torch.mm(tensor, tensor)</span><br><span class="line"></span><br><span class="line"><span class="comment"># calculate mean</span></span><br><span class="line">mean = torch.mean(tensor)</span><br><span class="line"></span><br><span class="line"><span class="comment"># add</span></span><br><span class="line">torch.add(a, b)</span><br><span class="line"><span class="built_in">print</span>(a + b)</span><br><span class="line">a.add_(b) <span class="comment"># change a</span></span><br><span class="line"></span><br><span class="line"><span class="comment">###########################################################</span></span><br><span class="line"><span class="comment"># any func that can change the tensor has a '_' in its name</span></span><br><span class="line"><span class="comment">###########################################################</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h3 id="activation-function"><a href="#activation-function" class="headerlink" title="activation function"></a>activation function</h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># relu</span></span><br><span class="line">torch.relu(tensor)</span><br><span class="line"></span><br><span class="line"><span class="comment"># sigmoid</span></span><br><span class="line">torch.sigmoid(tensor)</span><br><span class="line"></span><br><span class="line"><span class="comment"># tanh</span></span><br><span class="line">torch.tanh(tensor)</span><br><span class="line"></span><br><span class="line"><span class="comment"># softmax</span></span><br><span class="line">torch.softmax(tensor)</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h2 id="examples"><a href="#examples" class="headerlink" title="examples"></a>examples</h2><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># regression</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Net</span>(<span class="params">torch.nn.Module</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, n_feature, n_hidden, n_output</span>):</span></span><br><span class="line">        <span class="built_in">super</span>(Net, self).__init__()</span><br><span class="line">        self.hidden = torch.nn.Linear(n_feature, n_hidden)</span><br><span class="line">        self.predict = torch.nn.Linear(n_hidden, n_output)</span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">forward</span>(<span class="params">self</span>):</span></span><br><span class="line">        x = F.relu(self.hidden(x))</span><br><span class="line">        x = self.predict(x)</span><br><span class="line">        <span class="keyword">return</span> x</span><br><span class="line">    </span><br><span class="line">    net = Net(<span class="number">1</span>, <span class="number">10</span>, <span class="number">1</span>)</span><br><span class="line">    <span class="built_in">print</span>(net)</span><br><span class="line">    </span><br><span class="line">    optimizer = torch.optim.SGD(net.parameters(), lr = <span class="number">0.5</span>)</span><br><span class="line">    loss_func = torch.nn.MSELoss()</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">100</span>):</span><br><span class="line">        prediction = net(x)</span><br><span class="line">        </span><br><span class="line">        loss = loss_func(prediction, y)</span><br><span class="line">        </span><br><span class="line">        optimizer.zero_grad()</span><br><span class="line">        loss.backward()</span><br><span class="line">        optimizer.step()</span><br></pre></td></tr></tbody></table></figure><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># classification</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h3 id="autograd"><a href="#autograd" class="headerlink" title="autograd"></a>autograd</h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># turn on or turn of autograd</span></span><br><span class="line">torch_data.requires_grad_()</span><br><span class="line"><span class="comment">#</span></span><br><span class="line">requires_grad = <span class="literal">True</span></span><br><span class="line">requires_grad = <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># backward</span></span><br><span class="line">out.backward()</span><br><span class="line"></span><br><span class="line"><span class="comment"># get a same tensor without requiring gradient</span></span><br><span class="line">torch_data.detach()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>]]></content>
    
    
    <summary type="html">The basic methods of pytorch</summary>
    
    
    
    
    <category term="Python" scheme="https://1.15.86.100/tags/Python/"/>
    
    <category term="Pytorch" scheme="https://1.15.86.100/tags/Pytorch/"/>
    
  </entry>
  
  <entry>
    <title>Variational Inference</title>
    <link href="https://1.15.86.100/2019/12/14/Variational-Inference/"/>
    <id>https://1.15.86.100/2019/12/14/Variational-Inference/</id>
    <published>2019-12-14T15:19:54.000Z</published>
    <updated>2019-12-15T04:46:55.567Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Variational-Inference-变分推断"><a href="#Variational-Inference-变分推断" class="headerlink" title="Variational Inference(变分推断)"></a>Variational Inference(变分推断)</h1><h2 id="推导"><a href="#推导" class="headerlink" title="推导"></a>推导</h2><p>$X\quad:observed\ data$</p><p>$Z\quad:latent\ variable+parameter$</p><p>$(X+Z)\quad:complete\ data$</p><p>$$log(P(x))=logP(x,z)-logP(z|x)=log\frac{P(x,z)}{q(z)}-log\frac{P(z|x)}{q(z)}$$</p><p>$$Left=\int_zlogP(x)q(z)dz=logP(x)$$</p><p>$$Right=\int_zq(z)log\frac{P(x,z)}{q(z)}dz-\int_zq(z)log\frac{P(z|x)}{q(z)}dz$$</p><p>$$ELBO(evidence\ lower\ bound)=\int_zq(z)log\frac{P(x,z)}{q(z)}$$</p><p>$$KL(q||p)=-\int_zq(z)log\frac{P(z|x)}{q(z)}dz\ge0$$</p><p>$$\quad\mathscr{L}(q)+KL(q||p)$$</p><p>令 $q(z)=\prod_{i=1}^mq_i(z_i)$</p><p>有 $\mathscr{L}(q)=\int_zq(z)logP(x,z)dz-\int_zq(z)logq(z)dz$</p>]]></content>
    
    
    <summary type="html">An Introduction to Variational Inference</summary>
    
    
    
    
    <category term="machine-learning" scheme="https://1.15.86.100/tags/machine-learning/"/>
    
  </entry>
  
  <entry>
    <title>Multiple sequence alignment with hierarchical clustering</title>
    <link href="https://1.15.86.100/2019/12/05/Multiple-sequence-alignment-with-hierarchical-clustering/"/>
    <id>https://1.15.86.100/2019/12/05/Multiple-sequence-alignment-with-hierarchical-clustering/</id>
    <published>2019-12-05T01:40:50.000Z</published>
    <updated>2019-12-05T05:06:10.351Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Multiple-sequence-alignment-with-hierarchical-clustering"><a href="#Multiple-sequence-alignment-with-hierarchical-clustering" class="headerlink" title="Multiple sequence alignment with hierarchical clustering"></a>Multiple sequence alignment with hierarchical clustering</h1><h2 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h2><p> 无论是在蛋白质还是核酸的<strong>多序列的匹配</strong>问题，用计算机来实现，都是非常容易和准确的。这个方法是基于<strong>两两匹配</strong>的普通的<strong>贪心算法</strong>。开始的时候，用<strong>双匹配</strong>的<strong>分数矩阵来</strong>来实现序列的<strong>层次聚类</strong>。<strong>最近</strong>的序列会被<strong>联合</strong>起来，从而生成<strong>联合序列</strong>的群体(group)。然后，当一个<strong>群体</strong>内的所以序列都被<strong>联合(Aligned)<strong>起来后，最近的</strong>群体(Group)<strong>的会被联合(aligned)起来。在</strong>多匹配</strong>中的两个匹配好的序列会生成一个新的矩阵，而这个矩阵被用来产生一个<strong>层次聚类</strong></p><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>  核酸(nucleic acids)和蛋白质(proteins)，可以被一些<strong>升序排列</strong>的分子生物学上的<strong>数字序列</strong>来表示，而这些数字可以通过自动且快速的技术来获得。因此，一个<strong>升序序列</strong>需要被我们分析，而这个在没有<strong>数据分析</strong>的帮助是不可能的。</p><p>  确认某些部分和一个相同的<strong>族</strong>(family)里面的许多序列对应部分相似的过程是非常有趣的。比如，蛋白质序列的相似区域和许多活着的的微生物(organism)有着相同的功能，这在功能和结构的观点来看是非常重要的。</p><p>  这些分析都需要，<strong>序列的匹配</strong></p><p>  两个序列的匹配可以许多自从1970就出现的算法实现。但是，当有多于两个序列时，</p><h2 id="算法"><a href="#算法" class="headerlink" title="算法"></a>算法</h2><h3 id="两个序列的匹配算法"><a href="#两个序列的匹配算法" class="headerlink" title="两个序列的匹配算法"></a>两个序列的匹配算法</h3><p>假设存在两个序列 $A、B$ 长度分别为 $m,n$，并且 $A(i),B(j)$ 分别表示 对应序列中的第 $i$ 个和第 $j$ 的元素。对于每一个<strong>元素对</strong>(pair of elements) $A(i),B(j)$ ，其权值 $weight\ w(i,j)$ 可以通过一个适合的矩阵 $D$ 来给定，比如<strong>Dayhoff</strong> 的氨基酸<strong>突变数据矩阵</strong>（如果需要的话，可以通过增加一个适当的<strong>常数</strong>来使得矩阵<strong>非负</strong>）。由此 $w(i,j)=D(A(i),A(j))$。$w$ 的值不需要存储，当需要的时候从存储的矩阵计算获得。计算中使用的方法和<strong>Needleman and Wunsh</strong>和<strong>Murata</strong>的方法一样，是从<strong>元素</strong>(cell) $(m,n)$ 开始，<strong>后向</strong>(backward)计算，依次计算从每条不同的元素来的<strong>路</strong>(path)的最大权值之和(maximum total value)。</p><p>令 $S(i,j)$ 表示从所有的从元素 $(i,j)$ 到底部(bottom)或者右边(right side)的路径上的所有元素权值之和再减去 $g$ 乘以路上的<strong>间隔</strong>(gap)数，即 $\sum w-g(n-1)$，的<strong>最大值</strong></p><p>这个<strong>间隔惩罚</strong>(gap penalty)是<strong>Barton and Sternberg</strong>建议的独立于间隔的长度。</p><p>令 $M(i,j)$ 表示 $S$ 上所有满足 $(i,k) and(l,j)\quad(j\le k\le n\ and\ i\le l\le m)$元素的最大值，根据它的定义 $M(i,j)$ 就表示 $S$ 上所有满足  $(l,k),(l\ge i \ and \ k\ge j)$ 的元素最大值。</p><p>下面的算法就是用来计算 $S\ and\ M$的：</p><p>$$S(i,j)=w(i,j)+max(S(i+1,j+1,M(i+1,j+1)-g)$$</p><p>$$M(i,j)=max(S(i,j),M(i+1,j),M(i,j+1))$$</p><p>一旦矩阵 $S$ 被计算出来，就会执行一个回溯(traceback) 的过程，取寻找最好的路径上的最优元素。它的首选元素就是<strong>第一行或第一列的最大元素</strong>。这个值就是<strong>匹配的分数</strong>。在每个路径的末尾都不需要增加<strong>间隔惩罚</strong>(gap penalty)。</p><p>为了比较多于两个的序列，已经匹配好的会被利用一个<strong>匹配算法</strong>(alignment algorithm)一步一步的重新组合，这也是<strong>过程一</strong>的延申。</p><h3 id="两个联合序列类的联合"><a href="#两个联合序列类的联合" class="headerlink" title="两个联合序列类的联合"></a>两个联合序列类的联合</h3><p>令 $B_1,…B_p$ 为一个<strong>类</strong>(cluster)中的序列，$C_1,…,C_Q$ 为第二个类中的序列。当生成一个矩阵 $S$ 来<strong>联合</strong>(align) $C$ 序列和 $B$ 序列。我们需要引入一个<strong>分数体制</strong>(scoring scheme)，它包含所有的以前已经联合起来的序列的贡献，因此需要赋予已经联合起来的区域更多的权重。</p><p>令 $i,j$ 分别表示序列 $B,C$ 某个<strong>联合的产物</strong>(aligned residue)的位置。则：</p><p>$$w(i,j)=\frac{1}{PQ}\sum_{R=1}^{R=P}\sum^{S=Q}_{S=1}D(B_R(i),C_S(j))$$</p><p>其中 $D$ 表示<strong>氨基酸联合分数</strong>(amino acid pair scores)。例如，**(Ala-Val-Leu)<strong>和</strong>(Ala-Leu)**联合的分数就是 $[w(Ala\ vs.\ Ala)+(Ala\ vs.\ Ala)+(Val\ vs. Ala)+(Val\ vs.\ Leu)+(Leu\ vs.\ Ala)+(Leu\ vs.\ Leu)]*\frac{1}{6}$</p><p>矩阵 $S$ 和矩阵 $M$ 和前面的算法一样，但是需要用新的 $w$ 来计算。</p><p>一旦获得一个由 $P+Q$ 联合的<strong>类</strong>，就会替代 $P\ Q$ 序列。</p><h3 id="聚类的顺序"><a href="#聚类的顺序" class="headerlink" title="聚类的顺序"></a>聚类的顺序</h3><p>聚类的顺序会影响聚类的结果，因此我们需要选择一个好的聚类顺序。这里用到的方法是：使用两两比较的得分作为序列间的相似度的序号。原则就是：聚类从基本的序列出发，通过<strong>联合两个最近的类</strong>产生新的类。</p><p>假设 $A_1,A_2,…,A_N$ 是 $N$ 个待联合的序列，所有的<strong>两两比较</strong>已经执行好，并被存储在一个矩阵 $T_1$ 中。其中 $T_1(I,J)$ 表示 $A_I$ 和 $A_J$ 联合的分数。然后，联合的序列的类按如下定义：</p><p>步骤一，有N个类，每个类有1个序列。最优分数在矩阵 $T_1$ 中。序列 $A_I$ 和序列 $A_J$ 【他们的分数是最适合的】被<strong>联合</strong>(aligned)起来，并且两个序列的<strong>联合体</strong>(alignment)产生一个聚类，这个类代替了第 $I$ 个序列，第 $J$ 个序列则被删除。然后，产生新的<strong>分数矩阵</strong> $T_2$，它的维度是 $N-1$ ，并且它等于：将 $T_1$ 的<strong>第 $J$ 行和第 $J$ 列</strong>删除，且<strong>第 $I$ 行和第 $I$ 列</strong>重新从 $T_1$ 中的 <strong>第 $I\  J$行列</strong>产生。其中，$T_2(I,k)$ 是 $T_1(I,k)$ 和 $T_1(J,k)$ 的平均值，$T_2(I,k)$ 称为**类 $I$ <strong>对</strong>类 $J$ **的分数(cluster $I$ vs. cluster $K$)。</p><p>步骤 $s\quad(s=1,2…,N-1)$，现在有 $N-s+1$个序列的类，$T_S$ 表示分数矩阵，如果 $T_S$ 的最大元素是 $T_S(I,J)$，<strong>类 $I$<strong>和</strong>类 $J$</strong> 将会被<strong>联合</strong>，并且会产生一个新的**类 $I$**，类 $J$ 会被删除。$T_{S+1}$ 按如下算法生成：</p><p>$$T_{S+1}(K,L)=T_S(K,L)\quad  if\ K,L\not=I,J$$</p><p>$$T_{s+1}(J,K)and \ T_{s+1}(K,J)$$ 不存在</p><p>$$T_{s+1}(I,K) = T_s(K,I)=(N_IT_s(I,K)+N_JT_s(J,K))/(N_I+N_J)\quad if K\not=I,J$$</p><p>其中 $N_I$ 是**类 $I$**中的序列数，类似 $N_J$</p><h3 id="完整的算法"><a href="#完整的算法" class="headerlink" title="完整的算法"></a>完整的算法</h3><ol><li>初始化：执行所有的两两之间的比较，并且记录他们的分数；</li><li>用得分矩阵进行序列的聚类；</li><li>利用两两聚类的分数获取完整的联合体，使层次树生长；</li><li>联合体产生，计算多个联合体之间的分数</li><li>用这些新的分数计算新的层次聚类</li><li>如果新的聚类和旧的不一样，可以根据聚类情况产生新的联合体转至3，否则结束循环。</li></ol><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><h2 id="算法分析"><a href="#算法分析" class="headerlink" title="算法分析"></a>算法分析</h2>]]></content>
    
    
    <summary type="html">A Paper Multiple Sequence Alignment Problem</summary>
    
    
    
    
    <category term="Algorithm" scheme="https://1.15.86.100/tags/Algorithm/"/>
    
  </entry>
  
  <entry>
    <title>mySQL Command Line</title>
    <link href="https://1.15.86.100/2019/11/09/mySQL-Command-Line/"/>
    <id>https://1.15.86.100/2019/11/09/mySQL-Command-Line/</id>
    <published>2019-11-08T16:06:44.000Z</published>
    <updated>2020-10-29T12:03:17.298Z</updated>
    
    <content type="html"><![CDATA[<h1 id="SQL"><a href="#SQL" class="headerlink" title="SQL"></a>SQL</h1><h5 id="新建数据库"><a href="#新建数据库" class="headerlink" title="新建数据库"></a>新建数据库</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CREATE DATABASE library;</span><br></pre></td></tr></table></figure><h5 id="删除数据库"><a href="#删除数据库" class="headerlink" title="删除数据库"></a>删除数据库</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DROP DATABASE library</span><br></pre></td></tr></table></figure><h5 id="使用数据库"><a href="#使用数据库" class="headerlink" title="使用数据库"></a>使用数据库</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">USE library</span><br></pre></td></tr></table></figure><h5 id="建表"><a href="#建表" class="headerlink" title="建表"></a>建表</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE book(name char(20), author char(20))</span><br></pre></td></tr></table></figure><h5 id="查看表的内容"><a href="#查看表的内容" class="headerlink" title="查看表的内容"></a>查看表的内容</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM book WHERE id &#x3D; 1;</span><br></pre></td></tr></table></figure><h5 id="插入内容"><a href="#插入内容" class="headerlink" title="插入内容"></a>插入内容</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">INSERT INTO book VALUES(&#39;jave&#39;, &#39;kkk&#39;)</span><br></pre></td></tr></table></figure><h5 id="查看数据库内的表"><a href="#查看数据库内的表" class="headerlink" title="查看数据库内的表"></a>查看数据库内的表</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SHOW TABLES</span><br></pre></td></tr></table></figure><h5 id="查看数据库"><a href="#查看数据库" class="headerlink" title="查看数据库"></a>查看数据库</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SHOW DATABASES</span><br></pre></td></tr></table></figure><h5 id="显示表的结构"><a href="#显示表的结构" class="headerlink" title="显示表的结构"></a>显示表的结构</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DESC book</span><br></pre></td></tr></table></figure><h5 id="获取上一次插入数据的ID"><a href="#获取上一次插入数据的ID" class="headerlink" title="获取上一次插入数据的ID"></a>获取上一次插入数据的ID</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT LAST_INSERT_ID();</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">SQL</summary>
    
    
    
    
    <category term="SQL" scheme="https://1.15.86.100/tags/SQL/"/>
    
  </entry>
  
  <entry>
    <title>GitHub Command Line</title>
    <link href="https://1.15.86.100/2019/10/29/GitHub-Command-Line/"/>
    <id>https://1.15.86.100/2019/10/29/GitHub-Command-Line/</id>
    <published>2019-10-29T14:33:04.000Z</published>
    <updated>2021-01-13T11:40:03.491Z</updated>
    
    <content type="html"><![CDATA[<h3 id="链接仓库"><a href="#链接仓库" class="headerlink" title="链接仓库"></a>链接仓库</h3><ol><li><p>复制仓库的链接</p><p><img src="/2019/10/29/GitHub-Command-Line/one.png" alt="Position"></p></li><li><p>在需要链接的文件夹下面打开<strong>Git Bash</strong></p><p><img src="/2019/10/29/GitHub-Command-Line/two.png" alt="git"></p></li><li><p>命令行界面如下：</p><p><img src="/2019/10/29/GitHub-Command-Line/three.png" alt="GitBash"></p></li><li><p>运行命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">git init<span class="comment">#初始化本地仓库</span></span><br><span class="line">git config user.email<span class="string">&quot;your email@address&quot;</span></span><br><span class="line">git config user.name<span class="string">&quot;your name&quot;</span></span><br><span class="line">git add .</span><br><span class="line">git commit -m<span class="string">&#x27;My first post&#x27;</span></span><br><span class="line">git push</span><br></pre></td></tr></table></figure></li><li><p>获取ssh</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~/.ssh</span><br><span class="line">cat id_rsa.pub</span><br></pre></td></tr></table></figure></li><li><p>撤回上一次commit</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git reset HEAD~</span><br><span class="line">git reset HEAD@&#123;index&#125;</span><br></pre></td></tr></table></figure></li><li><p>获取已经commit但未push的文件信息</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git cherry -v</span><br></pre></td></tr></table></figure></li><li><p>当前提交状态</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git status</span><br></pre></td></tr></table></figure></li><li><p>列出所有操作记录</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git reflog</span><br></pre></td></tr></table></figure></li><li><p>合并到最后一次提交</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git commit --amend</span><br></pre></td></tr></table></figure></li><li><p>获取最新提交记录</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git cherry-pick master</span><br></pre></td></tr></table></figure></li><li><p>对远程仓库的操作</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 查看所有的远程仓库</span></span><br><span class="line">git remote</span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看远程仓库对应的地址</span></span><br><span class="line">git remote -v</span><br><span class="line"><span class="meta">#</span><span class="bash"> 设置新的远程仓库地址</span></span><br><span class="line">git remote set-url origin [url]</span><br></pre></td></tr></table></figure></li></ol><h3 id="Git-Problem"><a href="#Git-Problem" class="headerlink" title="Git Problem"></a>Git Problem</h3><ol><li><pre><code class="bash">fatal: unable to access &#39;https://github.com/Vilily/python.git/&#39;: SSL certificate problem: self signed certificate in certificate chainsolution：git config --global http.sslVerify false</code></pre></li><li></li></ol>]]></content>
    
    
    <summary type="html">Common Command Lines and the Solutions to sone Errors of GitHub.</summary>
    
    
    
    
    <category term="GitHub" scheme="https://1.15.86.100/tags/GitHub/"/>
    
  </entry>
  
</feed>
