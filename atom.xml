<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>BaoWJ&#39;s Blog</title>
  
  
  <link href="https://1.15.86.100/atom.xml" rel="self"/>
  
  <link href="https://1.15.86.100/"/>
  <updated>2021-12-02T11:19:58.752Z</updated>
  <id>https://1.15.86.100/</id>
  
  <author>
    <name>Bao Wenjie</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Java-Stream API</title>
    <link href="https://1.15.86.100/2021/12/01/Java-Stream-API/"/>
    <id>https://1.15.86.100/2021/12/01/Java-Stream-API/</id>
    <published>2021-12-01T08:48:49.000Z</published>
    <updated>2021-12-02T11:19:58.752Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Stream-API"><a href="#Stream-API" class="headerlink" title="Stream API"></a>Stream API</h1><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p><strong>Stream</strong>是面向计算的，在<strong><code>java.util.stream</code></strong>包中；</p><ul><li><strong>Stream</strong>自己不会存储元素；</li><li><strong>Stream</strong>操作是<strong>延迟</strong>执行的，这意味着他们会等到需要结果的时候才执行；</li><li><strong>Stream</strong>不会改变源对象，他们会返回一个持有结果的新<strong>Stream</strong>；</li></ul><h3 id="Stream的实例化"><a href="#Stream的实例化" class="headerlink" title="Stream的实例化"></a>Stream的实例化</h3><h4 id="通过集合"><a href="#通过集合" class="headerlink" title="通过集合"></a>通过集合</h4><p><strong><code>Collection</code></strong>的<strong><code>stream()</code></strong>方法。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">List&lt;Integer&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">Stream&lt;Integer&gt; stream = list.stream();</span><br></pre></td></tr></tbody></table></figure><h4 id="通过数组"><a href="#通过数组" class="headerlink" title="通过数组"></a>通过数组</h4><p>调用<strong><code>Arrays</code></strong>类的<strong><code>stream()</code></strong>方法。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span>[] arr = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">10</span>];</span><br><span class="line">IntStream stream = Arrays.stream(arr);</span><br></pre></td></tr></tbody></table></figure><h4 id="通过Stream"><a href="#通过Stream" class="headerlink" title="通过Stream"></a>通过Stream</h4><p>调用<strong><code>Stream</code></strong>的<strong><code>of()</code></strong>方法。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Stream&lt;? extends Serializable&gt; cuffed = Stream.of(<span class="number">1</span>, <span class="number">2.0</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="string">"hahaha"</span>);</span><br></pre></td></tr></tbody></table></figure><h4 id="创建无限流"><a href="#创建无限流" class="headerlink" title="创建无限流"></a>创建无限流</h4><p><strong><code>Stream</code></strong>的<strong><code>iterate()</code></strong>和<strong><code>generate</code></strong>等函数。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Stream.iterate(<span class="number">0</span>,(t) -&gt; t + <span class="number">2</span>).limit(<span class="number">10</span>).forEach(System.out::println);</span><br><span class="line">Stream.generate(Math::random).limit(<span class="number">10</span>).forEach(System.out::println);</span><br></pre></td></tr></tbody></table></figure><h2 id="中间操作常用方法"><a href="#中间操作常用方法" class="headerlink" title="中间操作常用方法"></a>中间操作常用方法</h2><h3 id="筛选与切片"><a href="#筛选与切片" class="headerlink" title="筛选与切片"></a>筛选与切片</h3><ul><li><strong>filter(Predicate&lt;? super T&gt; predicate)</strong>：从流中<strong>删除</strong>某些<strong>predicate</strong>返回为<strong>false</strong>的元素；</li><li><strong>limit(long maxSize)</strong>：限制元素个数；</li><li><strong>skip(long n)</strong>：跳过<strong>前n</strong>个元素；</li><li><strong>distinct()</strong>：利用<strong><code>hashCode()</code></strong>和<strong><code>equals()</code></strong>进行去重；</li></ul><h3 id="映射"><a href="#映射" class="headerlink" title="映射"></a>映射</h3><ul><li><strong>map(Function&lt;? super T,? extends R&gt; mapper)</strong>：替换元素；</li><li><strong>flatMap(Function&lt;? super T,? extends Stream&lt;? extends R&gt;&gt; mapper)</strong>：把流中的每个值换成另一个流；</li></ul><h3 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h3><ul><li><strong>sorted(Comparator&lt;? super T&gt; comparator)</strong>：排序；</li></ul><h3 id="匹配与查找"><a href="#匹配与查找" class="headerlink" title="匹配与查找"></a>匹配与查找</h3><ul><li><strong>allMatch(Predicate&lt;? super T&gt; predicate)</strong>：全部匹配；</li><li><strong>anyMatch(Predicate&lt;? super T&gt; predicate)</strong>：匹配至少一个；</li><li><strong>noneMatch(Predicate&lt;? super T&gt; predicate)</strong>：全部不匹配；</li></ul><h3 id="统计"><a href="#统计" class="headerlink" title="统计"></a>统计</h3><ul><li><strong>count()</strong>：总数；</li><li><strong>max(Comparator&lt;? super T&gt; comparator)</strong>：最大值；</li><li><strong>min(Comparator&lt;? super T&gt; comparator)</strong>：最小值；</li></ul><h3 id="归约"><a href="#归约" class="headerlink" title="归约"></a>归约</h3><ul><li><strong>reduce(BinaryOperator<t> accumulator)</t></strong>：将流中元素结合起来；</li></ul>]]></content>
    
    
    <summary type="html">Java的Stream API</summary>
    
    
    
    <category term="Java" scheme="https://1.15.86.100/categories/Java/"/>
    
    
    <category term="Stream" scheme="https://1.15.86.100/tags/Stream/"/>
    
  </entry>
  
  <entry>
    <title>Java-反射</title>
    <link href="https://1.15.86.100/2021/11/30/Java-%E5%8F%8D%E5%B0%84/"/>
    <id>https://1.15.86.100/2021/11/30/Java-%E5%8F%8D%E5%B0%84/</id>
    <published>2021-11-30T11:35:28.000Z</published>
    <updated>2021-12-01T02:08:38.367Z</updated>
    
    <content type="html"><![CDATA[<h1 id="反射"><a href="#反射" class="headerlink" title="反射"></a>反射</h1><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p><strong>反射（Reflection）</strong>是被视为<strong>动态语言</strong>的关键，反射机制允许程序在执行期借助于<strong>Reflection API</strong>取得任何类的内部信息，并能直接操作任意对象的内部属性及方法。</p><h2 id="Class"><a href="#Class" class="headerlink" title="Class"></a>Class</h2><h3 id="获取Class实例"><a href="#获取Class实例" class="headerlink" title="获取Class实例"></a>获取Class实例</h3><ul><li><p>通过<strong>类属性</strong>：</p>  <figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Class clazz = Person.class;</span><br></pre></td></tr></tbody></table></figure></li><li><p>通过<strong>对象</strong>的<strong><code>getClass()</code></strong>方法：</p>  <figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Person person = <span class="keyword">new</span> Person();</span><br><span class="line">Class clazz = person.getClass();</span><br></pre></td></tr></tbody></table></figure></li><li><p>通过<strong><code>Class.forName()</code></strong>方法：</p>  <figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Class clazz = Class.forName(<span class="string">"com.baowj.reflection.Person"</span>);</span><br></pre></td></tr></tbody></table></figure></li></ul><h3 id="常用方法"><a href="#常用方法" class="headerlink" title="常用方法"></a>常用方法</h3><h4 id="获取属性"><a href="#获取属性" class="headerlink" title="获取属性"></a>获取属性</h4><ul><li><strong>getFields()</strong>：获取当前<strong>运行时类</strong>及其<strong>父类</strong>所有<strong>public</strong>的属性；</li><li><strong>getDeclaredFields()</strong>：获取当前<strong>运行时类</strong>中（不包括<strong>父类</strong>）声明的所有属性；</li></ul><h4 id="获取方法"><a href="#获取方法" class="headerlink" title="获取方法"></a>获取方法</h4><ul><li><strong>getMethods()</strong>：获取当前<strong>运行时类</strong>及其<strong>父类</strong>所有<strong>public</strong>的方法；</li><li><strong>getDeclaredMethods()</strong>：获取当前<strong>运行时类</strong>中（不包括<strong>父类</strong>）声明的所有方法；</li></ul><h4 id="获取构造方法"><a href="#获取构造方法" class="headerlink" title="获取构造方法"></a>获取构造方法</h4><ul><li><strong>getConstructors()</strong>：获取当前<strong>运行时类</strong>及其<strong>父类</strong>所有<strong>public</strong>的构造方法；</li><li><strong>getDeclaredConstructors()</strong>；</li></ul><h4 id="获取父类"><a href="#获取父类" class="headerlink" title="获取父类"></a>获取父类</h4><ul><li><strong>getSuperclass()</strong>：获取<strong>运行时类</strong>的父类；</li><li><strong>getGenericSuperclass()</strong>：获取<strong>运行时类</strong>的带泛型的父类；</li></ul><h4 id="获取类的注解"><a href="#获取类的注解" class="headerlink" title="获取类的注解"></a>获取类的注解</h4><ul><li><strong>getAnnotations()</strong>；</li><li><strong>getDeclaredAnnotations()</strong>；</li></ul><h4 id="newInstance"><a href="#newInstance" class="headerlink" title="newInstance"></a>newInstance</h4><h5 id="声明"><a href="#声明" class="headerlink" title="声明"></a>声明</h5><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> T <span class="title">newInstance</span><span class="params">()</span></span></span><br><span class="line"><span class="function">              <span class="keyword">throws</span> InstantiationException,</span></span><br><span class="line"><span class="function">                     IllegalAccessException</span></span><br></pre></td></tr></tbody></table></figure><h5 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h5><p>调用<strong>运行时类</strong>的<strong>空参构造器</strong>创建对象。</p><h5 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h5><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Class clazz = Person.class;</span><br><span class="line">Object o = clazz.newInstance();</span><br></pre></td></tr></tbody></table></figure><h2 id="ClassLoader"><a href="#ClassLoader" class="headerlink" title="ClassLoader"></a>ClassLoader</h2><p>Java的<strong>类加载器</strong>，负责把<strong>类（Class）</strong>加载进内存。</p><p><img src="/2021/11/30/Java-%E5%8F%8D%E5%B0%84/blog\blog\data\source\_posts\Java-反射\webp.png" alt="img"></p><ul><li><strong>Bootstrap ClassLoader（启动类加载器）</strong>：用<strong>C++</strong>编写的，是<strong>JVM</strong>自带的类加载器，负责<strong>Java平台核心库</strong>，用来装载<strong>System.getProperty(“sun.boot.class.path”)</strong>所指定的<strong>jar核心类库</strong>，该加载器无法直接获取；</li><li><strong>Extension ClassLoader（扩展类加载器）</strong>：负责<strong>System.getProperty(“java.ext.dirs”)</strong>目录下的<strong>jar包</strong>，或<strong>java -Djava.ext.dirs</strong>指定目录下的<strong>jar</strong>包装入工作库；</li><li><strong>App ClassLoader（自定义加载器）</strong>：它会加载<strong>Classpath</strong>环境变量里定义的路径中的<strong>jar</strong>包和目录。我们自己编写的代码以及使用的<strong>第三方jar包</strong>通常都是由它来加载的。加载<strong>System.getProperty(“java.class.path”)</strong>所指定的<strong>路径或jar包</strong>；</li></ul><h2 id="Method"><a href="#Method" class="headerlink" title="Method"></a>Method</h2><h3 id="常用方法-1"><a href="#常用方法-1" class="headerlink" title="常用方法"></a>常用方法</h3><ul><li><strong>invoke()</strong>：调用类的方法；</li><li><strong>setAccessible()</strong>：设置方法可见性；</li></ul><h2 id="Field"><a href="#Field" class="headerlink" title="Field"></a>Field</h2><h3 id="常用方法-2"><a href="#常用方法-2" class="headerlink" title="常用方法"></a>常用方法</h3><ul><li><strong>set()</strong>：设置变量值；</li><li><strong>get()</strong>：获取变量值；</li></ul>]]></content>
    
    
    <summary type="html">Java的反射机制。</summary>
    
    
    
    <category term="Java" scheme="https://1.15.86.100/categories/Java/"/>
    
    
    <category term="反射" scheme="https://1.15.86.100/tags/%E5%8F%8D%E5%B0%84/"/>
    
  </entry>
  
  <entry>
    <title>Java-网络编程</title>
    <link href="https://1.15.86.100/2021/11/30/Java-%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/"/>
    <id>https://1.15.86.100/2021/11/30/Java-%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/</id>
    <published>2021-11-30T08:21:17.000Z</published>
    <updated>2021-12-02T12:38:43.709Z</updated>
    
    <content type="html"><![CDATA[<h1 id="网络编程"><a href="#网络编程" class="headerlink" title="网络编程"></a>网络编程</h1><h2 id="常用类"><a href="#常用类" class="headerlink" title="常用类"></a>常用类</h2><h3 id="InetAddress"><a href="#InetAddress" class="headerlink" title="InetAddress"></a>InetAddress</h3><p>获取<strong>IP地址</strong>。</p><h4 id="常用方法"><a href="#常用方法" class="headerlink" title="常用方法"></a>常用方法</h4><ul><li><strong>getLocalHost()</strong>：获取本地IP；</li><li><strong>getByName(String host)</strong>：通过网址获取IP；</li></ul><h2 id="URL网络编程"><a href="#URL网络编程" class="headerlink" title="URL网络编程"></a>URL网络编程</h2><h4 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h4><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">    HttpURLConnection urlConnection = <span class="keyword">null</span>;</span><br><span class="line">    FileOutputStream fos = <span class="keyword">null</span>;</span><br><span class="line">    InputStream is = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">try</span> {</span><br><span class="line">        URL url = <span class="keyword">new</span> URL(<span class="string">"https://www.hust.edu.cn/images/weixintupian_20211126135639.jpg"</span>);</span><br><span class="line">        urlConnection = (HttpURLConnection) url.openConnection();</span><br><span class="line">        urlConnection.connect();</span><br><span class="line">        is = urlConnection.getInputStream();</span><br><span class="line">        fos = <span class="keyword">new</span> FileOutputStream(<span class="string">"test.jpg"</span>);</span><br><span class="line">        <span class="keyword">byte</span>[] buffer = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">        <span class="keyword">int</span> len;</span><br><span class="line">        <span class="keyword">while</span> ((len = is.read(buffer)) != -<span class="number">1</span>) {</span><br><span class="line">            fos.write(buffer, <span class="number">0</span>, len);</span><br><span class="line">        }</span><br><span class="line">    } <span class="keyword">catch</span> (MalformedURLException e) {</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    } <span class="keyword">catch</span> (IOException e) {</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    } <span class="keyword">finally</span> {</span><br><span class="line">        <span class="keyword">if</span> (is != <span class="keyword">null</span>) {</span><br><span class="line">            <span class="keyword">try</span> {</span><br><span class="line">                is.close();</span><br><span class="line">            } <span class="keyword">catch</span> (IOException e) {</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">if</span> (fos != <span class="keyword">null</span>) {</span><br><span class="line">            <span class="keyword">try</span> {</span><br><span class="line">                fos.close();</span><br><span class="line">            } <span class="keyword">catch</span> (IOException e) {</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            }</span><br><span class="line">        } <span class="keyword">if</span> (urlConnection != <span class="keyword">null</span>) {</span><br><span class="line">            urlConnection.disconnect();</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="TCP连接"><a href="#TCP连接" class="headerlink" title="TCP连接"></a>TCP连接</h2><h3 id="客户端"><a href="#客户端" class="headerlink" title="客户端"></a>客户端</h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TCPClientDemo</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        Socket socket = <span class="keyword">null</span>;</span><br><span class="line">        OutputStream os = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> {</span><br><span class="line">            InetAddress serverIP = InetAddress.getLocalHost();</span><br><span class="line">            <span class="keyword">int</span> port = <span class="number">9999</span>;</span><br><span class="line">            <span class="comment">// 创建连接</span></span><br><span class="line">            socket = <span class="keyword">new</span> Socket(serverIP, port);</span><br><span class="line">            os = socket.getOutputStream();</span><br><span class="line">            os.write(<span class="string">"Hello Server"</span>.getBytes());</span><br><span class="line"></span><br><span class="line">        } <span class="keyword">catch</span> (UnknownHostException e) {</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        } <span class="keyword">catch</span> (IOException e) {</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        } <span class="keyword">finally</span> {</span><br><span class="line">            <span class="keyword">if</span> (socket != <span class="keyword">null</span>) {</span><br><span class="line">                <span class="keyword">try</span> {</span><br><span class="line">                    socket.close();</span><br><span class="line">                } <span class="keyword">catch</span> (IOException e) {</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">            <span class="keyword">if</span> (os != <span class="keyword">null</span>) {</span><br><span class="line">                <span class="keyword">try</span> {</span><br><span class="line">                    os.close();</span><br><span class="line">                } <span class="keyword">catch</span> (IOException e) {</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="服务器"><a href="#服务器" class="headerlink" title="服务器"></a>服务器</h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TCPServerDemo</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        ServerSocket serverSocket = <span class="keyword">null</span>;</span><br><span class="line">        Socket socket = <span class="keyword">null</span>;</span><br><span class="line">        InputStream is = <span class="keyword">null</span>;</span><br><span class="line">        ByteArrayOutputStream baos = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> {</span><br><span class="line">            serverSocket = <span class="keyword">new</span> ServerSocket(<span class="number">9999</span>);</span><br><span class="line">            socket = serverSocket.accept();</span><br><span class="line">            is = socket.getInputStream();</span><br><span class="line">            baos = <span class="keyword">new</span> ByteArrayOutputStream();</span><br><span class="line">            <span class="keyword">byte</span>[] buffer = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">            <span class="keyword">int</span> len;</span><br><span class="line">            <span class="keyword">while</span> ((len = is.read(buffer)) != -<span class="number">1</span>) {</span><br><span class="line">                baos.write(buffer, <span class="number">0</span>, len);</span><br><span class="line">            }</span><br><span class="line">            System.out.println(baos.toString());</span><br><span class="line">        } <span class="keyword">catch</span> (IOException e) {</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        } <span class="keyword">finally</span> {</span><br><span class="line">            <span class="keyword">if</span> (serverSocket != <span class="keyword">null</span>) {</span><br><span class="line">                <span class="keyword">try</span> {</span><br><span class="line">                    serverSocket.close();</span><br><span class="line">                } <span class="keyword">catch</span> (IOException e) {</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">            <span class="keyword">if</span> (socket != <span class="keyword">null</span>) {</span><br><span class="line">                <span class="keyword">try</span> {</span><br><span class="line">                    socket.close();</span><br><span class="line">                } <span class="keyword">catch</span> (IOException e) {</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">            <span class="keyword">if</span> (is != <span class="keyword">null</span>) {</span><br><span class="line">                <span class="keyword">try</span> {</span><br><span class="line">                    is.close();</span><br><span class="line">                } <span class="keyword">catch</span> (IOException e) {</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">            <span class="keyword">if</span> (baos != <span class="keyword">null</span>) {</span><br><span class="line">                <span class="keyword">try</span> {</span><br><span class="line">                    baos.close();</span><br><span class="line">                } <span class="keyword">catch</span> (IOException e) {</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>]]></content>
    
    
    <summary type="html">Java网络编程简介。</summary>
    
    
    
    <category term="Java" scheme="https://1.15.86.100/categories/Java/"/>
    
    
    <category term="网络" scheme="https://1.15.86.100/tags/%E7%BD%91%E7%BB%9C/"/>
    
  </entry>
  
  <entry>
    <title>Java-流</title>
    <link href="https://1.15.86.100/2021/11/29/Java-%E6%B5%81/"/>
    <id>https://1.15.86.100/2021/11/29/Java-%E6%B5%81/</id>
    <published>2021-11-29T02:40:35.000Z</published>
    <updated>2021-11-30T07:59:50.259Z</updated>
    
    <content type="html"><![CDATA[<h1 id="IO流"><a href="#IO流" class="headerlink" title="IO流"></a>IO流</h1><h2 id="File类"><a href="#File类" class="headerlink" title="File类"></a>File类</h2><p><strong>File类</strong>不涉及<strong>文件内容</strong>的==读取写入==操作，这些操作需要使用==IO流==进行。</p><h3 id="声明"><a href="#声明" class="headerlink" title="声明"></a>声明</h3><p><code>java.io.File</code></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">File</span></span></span><br><span class="line"><span class="class"><span class="keyword">extends</span> <span class="title">Object</span></span></span><br><span class="line"><span class="class"><span class="keyword">implements</span> <span class="title">Serializable</span>, <span class="title">Comparable</span>&lt;<span class="title">File</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h3 id="常用方法"><a href="#常用方法" class="headerlink" title="常用方法"></a>常用方法</h3><ul><li>==<strong>File(String pathname)</strong>==：构造方法；</li><li><strong>length()</strong>：获取文件大小；</li><li><strong>getParentFile()</strong>：获取文件<strong>父目录</strong>；</li><li><strong>String[]  list()</strong>：获取<strong>目录</strong>下面所有<strong>文件</strong>和<strong>文件夹</strong>；</li><li><strong>File[]  listFiles()</strong>：获取<strong>目录</strong>下面所有<strong>文件</strong>和<strong>文件夹</strong>；</li><li><strong>renameTo(File dest)</strong>：修改文件名；</li><li><strong>isDirectory()</strong>：判断是否是目录；</li><li><strong>delete()</strong>：删除文件；</li><li>==<strong>exists()</strong>==：判断文件是否存在；</li><li><strong>createNewFile()</strong>：创建文件；</li><li><strong>mkdir()</strong>：创建目录；</li></ul><h2 id="RandomAccessFile类"><a href="#RandomAccessFile类" class="headerlink" title="RandomAccessFile类"></a>RandomAccessFile类</h2><p>可以实现文件的随机访问。</p><h4 id="声明-1"><a href="#声明-1" class="headerlink" title="声明"></a>声明</h4><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RandomAccessFile</span></span></span><br><span class="line"><span class="class"><span class="keyword">extends</span> <span class="title">Object</span></span></span><br><span class="line"><span class="class"><span class="keyword">implements</span> <span class="title">DataOutput</span>, <span class="title">DataInput</span>, <span class="title">Closeable</span></span></span><br></pre></td></tr></tbody></table></figure><h4 id="常用方法-1"><a href="#常用方法-1" class="headerlink" title="常用方法"></a>常用方法</h4><ul><li><strong>seek()</strong>；</li></ul><h2 id="流的分类"><a href="#流的分类" class="headerlink" title="流的分类"></a>流的分类</h2><p><img src="/Java-流/stream.jpg" alt=""></p><h4 id="数据单位"><a href="#数据单位" class="headerlink" title="数据单位"></a>数据单位</h4><ul><li><strong>字节流（8 bit）</strong>：<em>InputStream</em>，<em>OutputStream</em>；</li><li><strong>字符流（16 bit）</strong>；<em>Reader</em>，<em>Writer</em>；</li></ul><h4 id="流向"><a href="#流向" class="headerlink" title="流向"></a>流向</h4><ul><li><strong>输入流</strong>：<em>InputStream</em>，<em>Reader</em>；</li><li><strong>输出流</strong>：<em>OutputStream</em>，<em>Writer</em>；</li></ul><h4 id="角色"><a href="#角色" class="headerlink" title="角色"></a>角色</h4><ul><li><strong>节点流</strong>；</li><li><strong>处理流</strong>；</li></ul><h2 id="缓冲流"><a href="#缓冲流" class="headerlink" title="缓冲流"></a>缓冲流</h2><p>带<strong>缓冲</strong>的文件输入流。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span> <span class="keyword">throws</span> FileNotFoundException </span>{</span><br><span class="line">    File file1 = <span class="keyword">new</span> File(<span class="string">""</span>);</span><br><span class="line">    File file2 = <span class="keyword">new</span> File(<span class="string">""</span>);</span><br><span class="line"></span><br><span class="line">    FileInputStream fis = <span class="keyword">new</span> FileInputStream(file1);</span><br><span class="line">    FileOutputStream fos = <span class="keyword">new</span> FileOutputStream(file2);</span><br><span class="line"></span><br><span class="line">    BufferedInputStream bis = <span class="keyword">new</span> BufferedInputStream(fis);</span><br><span class="line">    BufferedOutputStream bos = <span class="keyword">new</span> BufferedOutputStream(fos);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="转换流"><a href="#转换流" class="headerlink" title="转换流"></a>转换流</h2><h4 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h4><p>属于<strong>字符流</strong>，提供<strong>字节流</strong>和<strong>字符流</strong>之间的转换。</p><ul><li><strong>InputStreamReader</strong>：<strong>字节</strong>输入流 <span class="github-emoji"><span>➡</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/27a1.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <strong>字符</strong>输入流；</li><li><strong>OutputStreamWriter</strong>：<strong>字符</strong>输出流 <span class="github-emoji"><span>➡</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/27a1.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <strong>字节</strong>输出流；</li></ul><h4 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h4><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span> <span class="keyword">throws</span> FileNotFoundException </span>{</span><br><span class="line">    File file1 = <span class="keyword">new</span> File(<span class="string">""</span>);</span><br><span class="line">    File file2 = <span class="keyword">new</span> File(<span class="string">""</span>);</span><br><span class="line"></span><br><span class="line">    FileInputStream fis = <span class="keyword">new</span> FileInputStream(file1);</span><br><span class="line">    FileOutputStream fos = <span class="keyword">new</span> FileOutputStream(file2);</span><br><span class="line"></span><br><span class="line">    InputStreamReader isr = <span class="keyword">new</span> InputStreamReader(fis);</span><br><span class="line">    OutputStreamWriter osw = <span class="keyword">new</span> OutputStreamWriter(fos);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="标准输入、输出流"><a href="#标准输入、输出流" class="headerlink" title="标准输入、输出流"></a>标准输入、输出流</h2><h4 id="常量"><a href="#常量" class="headerlink" title="常量"></a>常量</h4><ul><li><strong>System.in</strong>：标准输入流【默认从键盘】；</li><li><strong>System.out</strong>：标准输出流【默认控制台】；</li><li><strong>System.err</strong>：标准错误输出流；</li></ul><h4 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h4><ul><li><strong>System.setIn()</strong>：设置<strong>标准输入流</strong>；</li><li><strong>System.setOut()</strong>：设置<strong>标准输出流</strong>；</li></ul><h2 id="打印流"><a href="#打印流" class="headerlink" title="打印流"></a>打印流</h2><h4 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h4><p>将<strong>基本数据类型</strong>的数据格式转化为<strong>字符串</strong>输出。</p><h4 id="基本类"><a href="#基本类" class="headerlink" title="基本类"></a>基本类</h4><ul><li><strong>PrintStream</strong>；</li><li><strong>PrintWriter</strong>；</li></ul><h4 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h4><p><code>自定义标准输出流</code></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test3</span><span class="params">()</span> </span>{</span><br><span class="line">    PrintStream ps = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">try</span> {</span><br><span class="line">        FileOutputStream fos = <span class="keyword">new</span> FileOutputStream(<span class="keyword">new</span> File(<span class="string">"test.txt"</span>));</span><br><span class="line">        ps = <span class="keyword">new</span> PrintStream(fos, <span class="keyword">true</span>);</span><br><span class="line">        <span class="keyword">if</span> (ps != <span class="keyword">null</span>) {</span><br><span class="line">            System.setOut(ps);</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">256</span>; i++) {</span><br><span class="line">                System.out.print((<span class="keyword">char</span>) i);</span><br><span class="line">                <span class="keyword">if</span> (i % <span class="number">50</span> == <span class="number">0</span>) {</span><br><span class="line">                    System.out.println();</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    } <span class="keyword">catch</span> (IOException e) {</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    } <span class="keyword">finally</span> {</span><br><span class="line">        <span class="keyword">if</span> (ps != <span class="keyword">null</span>) {</span><br><span class="line">            ps.close();</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="数据流"><a href="#数据流" class="headerlink" title="数据流"></a>数据流</h2><h4 id="功能-1"><a href="#功能-1" class="headerlink" title="功能"></a>功能</h4><p>操作Java<strong>基本数据类型</strong>和<strong>String</strong>的数据。</p><h4 id="基本类-1"><a href="#基本类-1" class="headerlink" title="基本类"></a>基本类</h4><ul><li><strong>DataInputStream</strong>；</li><li><strong>DataOutputStream</strong>；</li></ul><h2 id="对象流"><a href="#对象流" class="headerlink" title="对象流"></a>对象流</h2><h4 id="功能-2"><a href="#功能-2" class="headerlink" title="功能"></a>功能</h4><p>存储和读取<strong>基本数据类型</strong>和<strong>对象</strong>的处理流。</p><h4 id="基本类-2"><a href="#基本类-2" class="headerlink" title="基本类"></a>基本类</h4><ul><li><p><strong>ObjectInputStream</strong>：<strong>反序列化</strong>过程；</p></li><li><p><strong>ObjectOutputStream</strong>：<strong>序列化</strong>过程；</p></li></ul><p>这两个类不能序列化<strong>static</strong>和<strong>transient</strong>修饰的数据。</p><h4 id="序列化要求"><a href="#序列化要求" class="headerlink" title="序列化要求"></a>序列化要求</h4><ul><li><p>实现<strong>Serializable</strong>接口；</p></li><li><p>定义静态常量<strong>serialVersionUID</strong>；</p>  <figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">422423432L</span>;</span><br></pre></td></tr></tbody></table></figure></li></ul>]]></content>
    
    
    <summary type="html">关于Java文件读写与流。</summary>
    
    
    
    <category term="Java" scheme="https://1.15.86.100/categories/Java/"/>
    
    
    <category term="File" scheme="https://1.15.86.100/tags/File/"/>
    
  </entry>
  
  <entry>
    <title>Java-Collections</title>
    <link href="https://1.15.86.100/2021/11/28/Java-Collections/"/>
    <id>https://1.15.86.100/2021/11/28/Java-Collections/</id>
    <published>2021-11-28T12:53:14.000Z</published>
    <updated>2021-11-28T13:07:17.546Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Collections"><a href="#Collections" class="headerlink" title="Collections"></a>Collections</h1><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p><strong>java.utils.Collections</strong>是操作<strong>Set、List、Map</strong>等<strong>集合</strong>的工具类。</p><h2 id="常用方法"><a href="#常用方法" class="headerlink" title="常用方法"></a>常用方法</h2><h3 id="reverse"><a href="#reverse" class="headerlink" title="reverse"></a>reverse</h3><p>翻转<strong>List</strong>。</p><h3 id="shuffle"><a href="#shuffle" class="headerlink" title="shuffle"></a>shuffle</h3><p>打乱<strong>List</strong>。</p><h3 id="swap"><a href="#swap" class="headerlink" title="swap"></a>swap</h3><p>交换<strong>List</strong>两个元素。</p><h3 id="synchronized"><a href="#synchronized" class="headerlink" title="synchronized[]"></a>synchronized[]</h3><ul><li><strong>synchronizedList</strong>；</li><li><strong>synchronizedMap</strong>；</li><li><strong>synchronizedSet</strong>；</li></ul><p>返回<strong>线程安全</strong>的对象。</p>]]></content>
    
    
    <summary type="html">Java的Collections工具类简介。</summary>
    
    
    
    <category term="Java" scheme="https://1.15.86.100/categories/Java/"/>
    
    
    <category term="Collections" scheme="https://1.15.86.100/tags/Collections/"/>
    
  </entry>
  
  <entry>
    <title>Java-Map</title>
    <link href="https://1.15.86.100/2021/11/28/Java-Map/"/>
    <id>https://1.15.86.100/2021/11/28/Java-Map/</id>
    <published>2021-11-28T10:51:24.000Z</published>
    <updated>2021-11-28T12:47:18.745Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Map"><a href="#Map" class="headerlink" title="Map"></a>Map</h1><h3 id="继承图"><a href="#继承图" class="headerlink" title="继承图"></a>继承图</h3><p><img src="/Java-Map/map.png" alt=""></p><h2 id="常用方法"><a href="#常用方法" class="headerlink" title="常用方法"></a>常用方法</h2><h3 id="keySet"><a href="#keySet" class="headerlink" title="keySet"></a>keySet</h3><h4 id="声明"><a href="#声明" class="headerlink" title="声明"></a>声明</h4><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">Set&lt;K&gt; <span class="title">keySet</span><span class="params">()</span></span>;</span><br></pre></td></tr></tbody></table></figure><h4 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h4><p>返回<strong>key</strong>的<strong>集合</strong>；</p><h3 id="values"><a href="#values" class="headerlink" title="values"></a>values</h3><h4 id="声明-1"><a href="#声明-1" class="headerlink" title="声明"></a>声明</h4><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">Collection&lt;V&gt; <span class="title">values</span><span class="params">()</span></span>;</span><br></pre></td></tr></tbody></table></figure><h4 id="功能-1"><a href="#功能-1" class="headerlink" title="功能"></a>功能</h4><p>返回<strong>value</strong>的<strong>集合</strong>；</p><h3 id="entrySet"><a href="#entrySet" class="headerlink" title="entrySet"></a>entrySet</h3><h4 id="声明-2"><a href="#声明-2" class="headerlink" title="声明"></a>声明</h4><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Set&lt;Map.Entry&lt;K, V&gt;&gt; entrySet();</span><br></pre></td></tr></tbody></table></figure><h4 id="功能-2"><a href="#功能-2" class="headerlink" title="功能"></a>功能</h4><p>返回<strong>key-value</strong>的<strong>集合</strong>；</p><h2 id="主要实现类"><a href="#主要实现类" class="headerlink" title="主要实现类"></a>主要实现类</h2><h3 id="HashMap"><a href="#HashMap" class="headerlink" title="HashMap"></a>HashMap</h3><h4 id="声明-3"><a href="#声明-3" class="headerlink" title="声明"></a>声明</h4><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HashMap</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; <span class="keyword">extends</span> <span class="title">AbstractMap</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt;</span></span><br><span class="line"><span class="class">    <span class="keyword">implements</span> <span class="title">Map</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt;, <span class="title">Cloneable</span>, <span class="title">Serializable</span></span>{}</span><br></pre></td></tr></tbody></table></figure><h4 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h4><ul><li>线程不安全；</li><li>可以存储<strong>null</strong>的<strong>key</strong>和<strong>value</strong>；</li><li>底层是<strong>数组+链表+红黑树</strong>；</li></ul><h4 id="put"><a href="#put" class="headerlink" title="put"></a>put</h4><ul><li><p>放入<strong>key-value</strong>；</p></li><li><p>先调用<strong>key.hashCode()</strong>获取<strong>哈希值</strong>；</p></li><li>利用<strong>哈希值</strong>计算在<strong>table（Node<k,v>类型）</k,v></strong>数组中的存储位置；<ul><li>如果该位置为空；</li><li>如果该位置<strong>不为空</strong>：<ul><li>如果<strong>key</strong>的<strong>哈希值</strong>和某个数据的<strong>哈希值</strong>一样，继续调用<strong>equals()</strong>方法比较；<ul><li>如果返回<strong>true</strong>：替换<strong>value</strong>；</li><li>如果返回<strong>false</strong>：添加成功；</li></ul></li><li>否则，如果该位置数据为<strong>tree</strong>：<ul><li>向<strong>tree</strong>中添加元素<strong>key-value</strong>；</li></ul></li><li>否则，依次判断<strong>链表</strong>每个结点的<strong>哈希值</strong>和<strong>equals()</strong>是不是等于<strong>key</strong>：<ul><li>如果不存在则<strong>创建新的节点</strong>：<ul><li>如果<strong>链表</strong>节点<strong>总数</strong>超过8个，则将<strong>链表</strong>转成<strong>红黑树</strong>；</li></ul></li><li>如果存在，则替换<strong>value</strong>；</li></ul></li></ul></li></ul></li></ul><h3 id="LinkedHashMap"><a href="#LinkedHashMap" class="headerlink" title="LinkedHashMap"></a>LinkedHashMap</h3><h4 id="特点-1"><a href="#特点-1" class="headerlink" title="特点"></a>特点</h4><ul><li>继承自<strong>HashMap</strong>；</li><li>可以按照<strong>添加顺序</strong>进行遍历【添加了指针】；</li></ul><h4 id="声明-4"><a href="#声明-4" class="headerlink" title="声明"></a>声明</h4><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LinkedHashMap</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt;</span></span><br><span class="line"><span class="class">    <span class="keyword">extends</span> <span class="title">HashMap</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt;</span></span><br><span class="line"><span class="class">    <span class="keyword">implements</span> <span class="title">Map</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt;</span>{}</span><br></pre></td></tr></tbody></table></figure><h3 id="TreeMap"><a href="#TreeMap" class="headerlink" title="TreeMap"></a>TreeMap</h3><h4 id="特点-2"><a href="#特点-2" class="headerlink" title="特点"></a>特点</h4><ul><li>底层是<strong>红黑树</strong>；</li><li>需要实现<strong>排序</strong>；</li></ul><h3 id="Hashtable"><a href="#Hashtable" class="headerlink" title="Hashtable"></a>Hashtable</h3><h4 id="特点-3"><a href="#特点-3" class="headerlink" title="特点"></a>特点</h4><ul><li>线程安全，效率不高；</li><li>不能存储<strong>null</strong>；</li></ul><h3 id="Properties"><a href="#Properties" class="headerlink" title="Properties"></a>Properties</h3><h4 id="特点-4"><a href="#特点-4" class="headerlink" title="特点"></a>特点</h4><ul><li>继承自<strong>Hashtable</strong>；</li><li>常用来处理配置文件；</li><li><strong>key</strong>和<strong>value</strong>都必须是<strong>String</strong>；</li></ul><h4 id="加载properties文件"><a href="#加载properties文件" class="headerlink" title="加载properties文件"></a>加载properties文件</h4><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>{</span><br><span class="line">    Properties properties = <span class="keyword">new</span> Properties();</span><br><span class="line">    FileInputStream fis = <span class="keyword">new</span> FileInputStream(<span class="string">"jdbc.properties"</span>);</span><br><span class="line">    properties.load(fis);</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>]]></content>
    
    
    <summary type="html">对Java的Map接口及其实现的介绍。</summary>
    
    
    
    <category term="Java" scheme="https://1.15.86.100/categories/Java/"/>
    
    
    <category term="Map" scheme="https://1.15.86.100/tags/Map/"/>
    
  </entry>
  
  <entry>
    <title>Java-锁</title>
    <link href="https://1.15.86.100/2021/11/26/Java-%E9%94%81/"/>
    <id>https://1.15.86.100/2021/11/26/Java-%E9%94%81/</id>
    <published>2021-11-26T08:47:56.000Z</published>
    <updated>2021-11-26T09:10:17.255Z</updated>
    
    <content type="html"><![CDATA[<h1 id="锁"><a href="#锁" class="headerlink" title="锁"></a>锁</h1><h2 id="公平锁、非公平锁"><a href="#公平锁、非公平锁" class="headerlink" title="公平锁、非公平锁"></a>公平锁、非公平锁</h2><ul><li><p><strong>公平锁</strong>：公平分配资源，不允许插队，严格先来后到；</p></li><li><p><strong>非公平锁</strong>：可以插队【默认】；</p>  <figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ReentrantLock</span><span class="params">()</span> </span>{</span><br><span class="line">    sync = <span class="keyword">new</span> NonfairSync();</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ReentrantLock</span><span class="params">(<span class="keyword">boolean</span> fair)</span> </span>{</span><br><span class="line">    sync = fair ? <span class="keyword">new</span> FairSync() : <span class="keyword">new</span> NonfairSync();</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li></ul><h2 id="可重入锁"><a href="#可重入锁" class="headerlink" title="可重入锁"></a>可重入锁</h2><p>可以<strong>重复获取</strong>同一个锁而<strong>不会出现死锁</strong>（例如，<strong>synchronized</strong>代码块的<strong>嵌套</strong>）。</p><h2 id="自旋锁"><a href="#自旋锁" class="headerlink" title="自旋锁"></a>自旋锁</h2><p>不断尝试直到成功。</p><blockquote><p><strong>例如：</strong></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&gt;<span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">getAndSetInt</span><span class="params">(Object var1, <span class="keyword">long</span> var2, <span class="keyword">int</span> var4)</span> </span>{</span><br><span class="line">   <span class="keyword">int</span> var5;</span><br><span class="line">   <span class="keyword">do</span> {</span><br><span class="line">       var5 = <span class="keyword">this</span>.getIntVolatile(var1, var2);</span><br><span class="line">   } <span class="keyword">while</span>(!<span class="keyword">this</span>.compareAndSwapInt(var1, var2, var5, var4));</span><br><span class="line"></span><br><span class="line">   <span class="keyword">return</span> var5;</span><br><span class="line">&gt;}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure></blockquote><h2 id="读写锁"><a href="#读写锁" class="headerlink" title="读写锁"></a>读写锁</h2><h2 id="死锁"><a href="#死锁" class="headerlink" title="死锁"></a>死锁</h2><h2 id="乐观锁"><a href="#乐观锁" class="headerlink" title="乐观锁"></a>乐观锁</h2><p>认为数据一般情况下不会造成冲突，所以在数据进行提交更新的时候，才会正式对数据的冲突与否进行检测。</p><h2 id="悲观锁"><a href="#悲观锁" class="headerlink" title="悲观锁"></a>悲观锁</h2><p>以一种预防的姿态在修改数据之前把数据锁住，然后再对数据进行读写，在它释放锁之前任何人都不能对其数据进行操作，直到前面一个人把锁释放后下一个人数据加锁才可对数据进行加锁，然后才可以对数据进行操作。</p>]]></content>
    
    
    <summary type="html">Java各种锁的总结。</summary>
    
    
    
    <category term="Java" scheme="https://1.15.86.100/categories/Java/"/>
    
    
    <category term="锁" scheme="https://1.15.86.100/tags/%E9%94%81/"/>
    
  </entry>
  
  <entry>
    <title>Java-函数式接口</title>
    <link href="https://1.15.86.100/2021/11/25/Java-%E5%87%BD%E6%95%B0%E5%BC%8F%E6%8E%A5%E5%8F%A3/"/>
    <id>https://1.15.86.100/2021/11/25/Java-%E5%87%BD%E6%95%B0%E5%BC%8F%E6%8E%A5%E5%8F%A3/</id>
    <published>2021-11-25T08:08:05.000Z</published>
    <updated>2021-11-25T08:27:17.575Z</updated>
    
    <content type="html"><![CDATA[<h1 id="函数式接口"><a href="#函数式接口" class="headerlink" title="函数式接口"></a>函数式接口</h1><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p><strong>函数式接口(Functional Interface)</strong>就是一个有且<strong>仅有一个抽象方法</strong>，但是可以有多个非抽象方法的接口。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@FunctionalInterface</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">GreetingService</span> </span></span><br><span class="line"><span class="class"></span>{</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">sayMessage</span><span class="params">(String message)</span></span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="四大函数式接口"><a href="#四大函数式接口" class="headerlink" title="四大函数式接口"></a>四大函数式接口</h2><h3 id="Function"><a href="#Function" class="headerlink" title="Function"></a>Function</h3><p>函数式接口，输入一个对象，输出一个对象。</p><h4 id="声明"><a href="#声明" class="headerlink" title="声明"></a>声明</h4><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@FunctionalInterface</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Function</span>&lt;<span class="title">T</span>,<span class="title">R</span>&gt;</span>{</span><br><span class="line">    <span class="function">R <span class="title">apply</span><span class="params">(T t)</span></span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h4 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h4><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">    Function function = (str)-&gt;{<span class="keyword">return</span> str;};</span><br><span class="line">    System.out.println(function.apply(<span class="string">"efgref"</span>));</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="Predicate"><a href="#Predicate" class="headerlink" title="Predicate"></a>Predicate</h3><p><strong>断定型</strong>接口，输入一个对象，返回判定结果。</p><h4 id="声明-1"><a href="#声明-1" class="headerlink" title="声明"></a>声明</h4><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@FunctionalInterface</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Predicate</span>&lt;<span class="title">T</span>&gt;</span>{</span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">test</span><span class="params">(T t)</span></span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h4 id="示例-1"><a href="#示例-1" class="headerlink" title="示例"></a>示例</h4><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">    Predicate&lt;String&gt; predicate = (str) -&gt; {<span class="keyword">return</span> str.length() &gt; <span class="number">10</span>;};</span><br><span class="line">    System.out.println(predicate.test(<span class="string">"fgervrvtrvrvcdcdc"</span>));</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="Supplier"><a href="#Supplier" class="headerlink" title="Supplier"></a>Supplier</h3><p><strong>生产型</strong>接口，<strong>只有输出没有输入</strong>。</p><h4 id="声明-2"><a href="#声明-2" class="headerlink" title="声明"></a>声明</h4><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@FunctionalInterface</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Supplier</span>&lt;<span class="title">T</span>&gt; </span>{</span><br><span class="line">    <span class="function">T <span class="title">get</span><span class="params">()</span></span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h4 id="示例-2"><a href="#示例-2" class="headerlink" title="示例"></a>示例</h4><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">    Supplier&lt;String&gt; supplier= () -&gt; {<span class="keyword">return</span> <span class="string">"fdfvdfvfg"</span>;};</span><br><span class="line">    System.out.println(supplier.get());</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="Consumer"><a href="#Consumer" class="headerlink" title="Consumer"></a>Consumer</h3><p><strong>消费型</strong>接口，只有输入没有输出。</p><h4 id="声明-3"><a href="#声明-3" class="headerlink" title="声明"></a>声明</h4><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@FunctionalInterface</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Consumer</span>&lt;<span class="title">T</span>&gt;</span>{</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">accept</span><span class="params">(T t)</span></span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h4 id="示例-3"><a href="#示例-3" class="headerlink" title="示例"></a>示例</h4><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">    Consumer&lt;String&gt; consumer = (str) -&gt; {</span><br><span class="line">        System.out.println(str);</span><br><span class="line">    };</span><br><span class="line">    consumer.accept(<span class="string">"gefervtrv"</span>);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>]]></content>
    
    
    <summary type="html">Java函数式接口简介。</summary>
    
    
    
    <category term="Java" scheme="https://1.15.86.100/categories/Java/"/>
    
    
    <category term="函数式接口" scheme="https://1.15.86.100/tags/%E5%87%BD%E6%95%B0%E5%BC%8F%E6%8E%A5%E5%8F%A3/"/>
    
  </entry>
  
  <entry>
    <title>Java-Collection</title>
    <link href="https://1.15.86.100/2021/11/16/Java-Collection/"/>
    <id>https://1.15.86.100/2021/11/16/Java-Collection/</id>
    <published>2021-11-16T09:08:09.000Z</published>
    <updated>2021-11-24T02:50:17.940Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Collection"><a href="#Collection" class="headerlink" title="Collection"></a>Collection</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><h3 id="源码声明"><a href="#源码声明" class="headerlink" title="源码声明"></a>源码声明</h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Collection</span>&lt;<span class="title">E</span>&gt;</span></span><br><span class="line"><span class="class"><span class="keyword">extends</span> <span class="title">Iterable</span>&lt;<span class="title">E</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h3 id="Collection的继承关系"><a href="#Collection的继承关系" class="headerlink" title="Collection的继承关系"></a>Collection的继承关系</h3><p><img src="/2021/11/16/Java-Collection/1362965-20190118094735724-2129767713.png" alt="img"></p><h2 id="主要方法"><a href="#主要方法" class="headerlink" title="主要方法"></a>主要方法</h2><h3 id="contains"><a href="#contains" class="headerlink" title="contains"></a>contains</h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">contains</span><span class="params">(Object o)</span></span></span><br></pre></td></tr></tbody></table></figure><h4 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h4><p>返回<strong>Collection</strong>中是否存在<strong>o</strong>；</p><h4 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h4><ul><li>判断是否相等时调用<strong>equals</strong>方法【<strong>(o\=\=null ? e\=\=null : o.equals(e))</strong>】；</li><li>如果没有重写<strong>equals</strong>方法，会直接用<strong>==</strong>判断；</li></ul><h3 id="remove"><a href="#remove" class="headerlink" title="remove"></a>remove</h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">remove</span><span class="params">(Object o)</span></span></span><br></pre></td></tr></tbody></table></figure><h4 id="功能-1"><a href="#功能-1" class="headerlink" title="功能"></a>功能</h4><p>删除等于元素<strong>o</strong>的元素【<strong>不一定</strong>地址一样】；</p><h4 id="注意事项-1"><a href="#注意事项-1" class="headerlink" title="注意事项"></a>注意事项</h4><ul><li>利用<strong>equals</strong>判断是否相等【<strong>(o\=\=null ? e\=\=null : o.equals(e))</strong>】；</li></ul><h3 id="retainAll"><a href="#retainAll" class="headerlink" title="retainAll"></a>retainAll</h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">retainAll</span><span class="params">(Collection&lt;?&gt; c)</span></span></span><br></pre></td></tr></tbody></table></figure><h4 id="功能-2"><a href="#功能-2" class="headerlink" title="功能"></a>功能</h4><p>求两个<strong>Collection</strong>的<strong>交集</strong>【即两个<strong>Collection</strong>都<strong>contain</strong>的元素】；</p><h3 id="iterator"><a href="#iterator" class="headerlink" title="iterator"></a>iterator</h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">Iterator&lt;E&gt; <span class="title">iterator</span><span class="params">()</span></span></span><br></pre></td></tr></tbody></table></figure><h4 id="功能-3"><a href="#功能-3" class="headerlink" title="功能"></a>功能</h4><ul><li>返回<strong>Iterator</strong>元素，用于遍历；</li></ul><h2 id="Set"><a href="#Set" class="headerlink" title="Set"></a>Set</h2><ul><li>无序性；</li><li>不可重复性【利用<strong>equals()</strong>方法判断】；</li></ul><h3 id="HashSet"><a href="#HashSet" class="headerlink" title="HashSet"></a>HashSet</h3>]]></content>
    
    
    <summary type="html">Java的集合框架Collection的简介。</summary>
    
    
    
    <category term="Java" scheme="https://1.15.86.100/categories/Java/"/>
    
    
    <category term="Collection" scheme="https://1.15.86.100/tags/Collection/"/>
    
  </entry>
  
  <entry>
    <title>Java-注解</title>
    <link href="https://1.15.86.100/2021/11/14/Java-%E6%B3%A8%E8%A7%A3/"/>
    <id>https://1.15.86.100/2021/11/14/Java-%E6%B3%A8%E8%A7%A3/</id>
    <published>2021-11-14T11:19:54.000Z</published>
    <updated>2021-12-03T03:07:34.759Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Java注解"><a href="#Java注解" class="headerlink" title="Java注解"></a>Java注解</h1><h2 id="注解简介"><a href="#注解简介" class="headerlink" title="注解简介"></a>注解简介</h2><p>注解是代码里的<strong>特殊标记</strong>【JDK5.0引入】，这些标记可以在编译，类加载，运行时被读取，并执行相应的处理。通过注解开发人员可以在不改变原有代码和逻辑的情况下在源代码中嵌入补充信息。</p><p><strong>注解</strong>只是一种标记，一般利用<strong>反射</strong>读取注解实现特定功能。</p><h2 id="注解创建"><a href="#注解创建" class="headerlink" title="注解创建"></a>注解创建</h2><ul><li>注解的<strong>声明关键字</strong>为<strong>@interface</strong>：<ul><li>自动继承<strong>java.lang.annotation.Annotation</strong>接口；</li><li>格式：<strong><code>public @interface 注解名 {内容}</code></strong>；</li></ul></li><li>每一个方法实际是声明一个<strong>配置参数</strong>：<ul><li><strong>方法名</strong>就是<strong>参数名</strong>；</li><li><strong>返回值</strong>类型就是<strong>参数类型</strong>【只能是<strong>基本类型</strong>】；</li><li>可以用<strong>default</strong>指定参数<strong>默认值</strong>；</li><li>如果只有一个参数，一般参数名为<strong>value</strong>；</li></ul></li><li>注解元素必须有值，一般设置<strong>默认值</strong>；</li></ul><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Target(value = ElementType.METHOD)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> MyAnnotation {</span><br><span class="line">    <span class="function">String <span class="title">value</span><span class="params">()</span> <span class="keyword">default</span> "Hello"</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="元注解"><a href="#元注解" class="headerlink" title="元注解"></a>元注解</h2><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p><strong>元注解</strong>是<strong>修饰</strong>其他<strong>注解</strong>的注解。</p><h3 id="Retention"><a href="#Retention" class="headerlink" title="Retention"></a>Retention</h3><h4 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h4><p>只能用于修饰<strong>Annotation的定义</strong>，用于指定该<strong>Annotation</strong>的<strong>生命周期</strong>。</p><p>其内部包含一个<strong>RetentionPolicy枚举类</strong>成员变量，其中<strong>RetentionPolicy</strong>值可以为：</p><ul><li><strong>RetentionPolicy.SOURCE</strong>：在源文件中有效【即在<strong>源文件</strong>中保留，编译器会丢弃该注解】；</li><li><strong>RetentionPolicy.CLASS</strong>：（<strong>默认值</strong>）在<strong>class</strong>文件中有效【即在<strong>class</strong>文件中保留，运行程序时，<strong>JVM</strong>会丢弃该注解】；</li><li><strong>RetentionPolicy.RUNTIME</strong>：在<strong>运行时</strong>有效【即在<strong>运行时</strong>也保留，<strong>JVM</strong>会保留注解】；</li></ul><h3 id="Target"><a href="#Target" class="headerlink" title="Target"></a>Target</h3><h4 id="功能-1"><a href="#功能-1" class="headerlink" title="功能"></a>功能</h4><p>用于指定被修饰的<strong>Annotation</strong>可以修饰哪些<strong>程序元素</strong>，<strong>value</strong>成员变量取值：</p><ul><li><strong>CONSTRUCTOR</strong>：构造器；</li><li><strong>FIELD</strong>：描述域；</li><li><strong>LOCAL_VARIABLE</strong>：局部变量；</li><li><strong>METHOD</strong>：方法；</li><li>……</li></ul><h3 id="Documented"><a href="#Documented" class="headerlink" title="Documented"></a>Documented</h3><h4 id="功能-2"><a href="#功能-2" class="headerlink" title="功能"></a>功能</h4><p>指定被修饰的<strong>Annotation类</strong>会被<strong>javadoc</strong>工具提取成<strong>文档</strong>，默认情况下<strong>javadoc</strong>不包含<strong>注解</strong>。</p><h3 id="Inherited"><a href="#Inherited" class="headerlink" title="Inherited"></a>Inherited</h3><h4 id="功能-3"><a href="#功能-3" class="headerlink" title="功能"></a>功能</h4><p>被修饰的<strong>Annotation</strong>将具有<strong>继承性</strong>【被修饰类的<strong>子类</strong>自动具有该注解】</p><h3 id="Repeatable"><a href="#Repeatable" class="headerlink" title="Repeatable"></a>Repeatable</h3><h4 id="功能-4"><a href="#功能-4" class="headerlink" title="功能"></a>功能</h4><p>被修饰的<strong>Annotation</strong>可以重复修饰同一个元素。</p><h2 id="常用注解"><a href="#常用注解" class="headerlink" title="常用注解"></a>常用注解</h2><ul><li><strong>FunctionalInterface</strong>：函数式接口；</li><li><strong>Override</strong>：重写；</li><li><strong>Deprecated</strong>：不推荐使用的方法；</li><li><strong>SuppressWarnings</strong>：抑制警告；</li></ul>]]></content>
    
    
    <summary type="html">Java注解的简介。</summary>
    
    
    
    <category term="Java" scheme="https://1.15.86.100/categories/Java/"/>
    
    
    <category term="注解" scheme="https://1.15.86.100/tags/%E6%B3%A8%E8%A7%A3/"/>
    
  </entry>
  
  <entry>
    <title>Java String类</title>
    <link href="https://1.15.86.100/2021/11/10/Java-String%E7%B1%BB/"/>
    <id>https://1.15.86.100/2021/11/10/Java-String%E7%B1%BB/</id>
    <published>2021-11-10T12:25:40.000Z</published>
    <updated>2021-11-11T08:55:46.972Z</updated>
    
    <content type="html"><![CDATA[<h1 id="String"><a href="#String" class="headerlink" title="String"></a>String</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><ul><li>存储<strong>字符串</strong>【不可变，其内部存储为<strong>final char[]</strong>】；</li><li>是一个<strong>final</strong>类，不可以<strong>被继承</strong>；</li><li>实现了<code>java.io.Serializable</code>【可以<strong>序列化</strong>】，<code>Comparable&lt;String&gt;</code>【可以比较】，<code>CharSequence</code>接口；</li></ul><h2 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h2><h3 id="getBytes"><a href="#getBytes" class="headerlink" title="getBytes()"></a>getBytes()</h3><p>转成<strong>字节数组</strong>即<strong>byte[]</strong>，可以指定<strong>编码集</strong>；</p><h2 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h2><h2 id="StringBuffer"><a href="#StringBuffer" class="headerlink" title="StringBuffer"></a>StringBuffer</h2><h3 id="简介-1"><a href="#简介-1" class="headerlink" title="简介"></a>简介</h3><ul><li><strong>可变</strong>的字符序列【内部存储为<strong>char[]</strong>，功能基本相当于<strong>StringBuilder</strong>】；</li><li><strong>线程安全</strong>；</li><li>效率相对<strong>StringBuilder</strong>较<strong>低</strong>；</li></ul><h3 id="常用方法"><a href="#常用方法" class="headerlink" title="常用方法"></a>常用方法</h3><ul><li><strong>append()</strong>：添加<strong>字符</strong>或者<strong>字符串</strong>；</li><li><strong>delete()</strong>：删除指定位置内容；</li><li><strong>replace()</strong>：替换；</li><li><strong>insert()</strong>：插入<strong>字符</strong>；</li><li><strong>reverse()</strong>：<strong>翻转</strong>字符串；</li><li><strong>setCharAt()</strong>：修改指定位置<strong>字符</strong>；</li></ul><h2 id="StringBuilder"><a href="#StringBuilder" class="headerlink" title="StringBuilder"></a>StringBuilder</h2><h3 id="简介-2"><a href="#简介-2" class="headerlink" title="简介"></a>简介</h3><ul><li><strong>可变</strong>的字符序列【内部存储为<strong>char[]</strong>，功能基本相当于<strong>StringBuffer</strong>】；</li><li><strong>线程不安全</strong>；</li><li>效率相对<strong>StringBuilder</strong>较高；</li></ul>]]></content>
    
    
    <summary type="html">Java的String类的介绍。</summary>
    
    
    
    <category term="Java" scheme="https://1.15.86.100/categories/Java/"/>
    
    
    <category term="String" scheme="https://1.15.86.100/tags/String/"/>
    
  </entry>
  
  <entry>
    <title>Java-多线程</title>
    <link href="https://1.15.86.100/2021/11/06/Java-%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    <id>https://1.15.86.100/2021/11/06/Java-%E5%A4%9A%E7%BA%BF%E7%A8%8B/</id>
    <published>2021-11-06T02:19:49.000Z</published>
    <updated>2021-11-26T08:32:09.339Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Java多线程使用"><a href="#Java多线程使用" class="headerlink" title="Java多线程使用"></a>Java多线程使用</h1><h2 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h2><h3 id="方法一【Runnable接口】"><a href="#方法一【Runnable接口】" class="headerlink" title="方法一【Runnable接口】"></a>方法一【Runnable接口】</h3><h4 id="使用步骤"><a href="#使用步骤" class="headerlink" title="使用步骤"></a>使用步骤</h4><ul><li>创建一个实现<strong>Runnable</strong>接口的类；</li><li>实现<strong>Runnable</strong>接口的抽象方法：<strong>run()</strong>；</li><li>创建该类的对象；</li><li>将该对象作为参数传给<strong>Thread</strong>，创建<strong>Thread</strong>对象；</li><li>调用<strong>Thread</strong>对象的<strong>start()</strong>方法；</li></ul><h4 id="示例代码"><a href="#示例代码" class="headerlink" title="示例代码"></a>示例代码</h4><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyThread</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) {</span><br><span class="line">            <span class="keyword">if</span> (i % <span class="number">2</span> == <span class="number">0</span>) {</span><br><span class="line">                System.out.println(Thread.currentThread().getName() + <span class="string">":"</span> + i);</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyTest</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        MyThread myThread = <span class="keyword">new</span> MyThread();</span><br><span class="line">        Thread thread1 = <span class="keyword">new</span> Thread(myThread);</span><br><span class="line">        thread1.setName(<span class="string">"线程一"</span>);</span><br><span class="line">        thread1.start();</span><br><span class="line"></span><br><span class="line">        Thread thread2 = <span class="keyword">new</span> Thread(myThread);</span><br><span class="line">        thread2.setName(<span class="string">"线程二"</span>);</span><br><span class="line">        thread2.start();</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="方法二【继承】"><a href="#方法二【继承】" class="headerlink" title="方法二【继承】"></a>方法二【继承】</h3><h4 id="使用步骤-1"><a href="#使用步骤-1" class="headerlink" title="使用步骤"></a>使用步骤</h4><ul><li>创建一个继承<strong>Thread</strong>的子类；</li><li>重写<strong>Thread</strong>类的<strong>run()</strong>方法；</li><li>创建<strong>Thread</strong>子类对象；</li><li>该类调用<strong>start()</strong>方法；</li></ul><h4 id="示例代码-1"><a href="#示例代码-1" class="headerlink" title="示例代码"></a>示例代码</h4><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyThreadExtends</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) {</span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">":"</span> + i);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ThreadTest</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        MyThreadExtends myThreadExtends1 = <span class="keyword">new</span> MyThreadExtends();</span><br><span class="line">        myThreadExtends1.setName(<span class="string">"线程0"</span>);</span><br><span class="line">        myThreadExtends1.start();</span><br><span class="line">        MyThreadExtends myThreadExtends2 = <span class="keyword">new</span> MyThreadExtends();</span><br><span class="line">        myThreadExtends2.setName(<span class="string">"线程1"</span>);</span><br><span class="line">        myThreadExtends2.start();</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="方法三【Callable接口】"><a href="#方法三【Callable接口】" class="headerlink" title="方法三【Callable接口】"></a>方法三【Callable接口】</h3><h4 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h4><ul><li><strong>call()</strong>方法可以有<strong>返回值</strong>；</li><li><strong>call()</strong>可以<strong>抛出异常</strong>；</li><li><strong>Callable</strong>支持<strong>泛型</strong>【表示返回值类型】；</li></ul><h4 id="使用步骤-2"><a href="#使用步骤-2" class="headerlink" title="使用步骤"></a>使用步骤</h4><ul><li>创建一个<strong>Callable</strong>的实现类；</li><li>实现<strong>call()</strong>方法；</li><li>创建<strong>Callable</strong>实现类的对象；</li><li>创建<strong>FutureTask</strong>对象（用实现类作为参数）；</li><li>创建<strong>Thread</strong>对象（用<strong>FutureTask</strong>对象作为参数）；</li><li>调用<strong>Thread</strong>的<strong>start()</strong>方法；</li></ul><h4 id="示例代码-2"><a href="#示例代码-2" class="headerlink" title="示例代码"></a>示例代码</h4><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ThreadCall</span> <span class="keyword">implements</span> <span class="title">Callable</span></span>{</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">call</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>{</span><br><span class="line">        <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &amp;lt;= <span class="number">100</span>; i++) {</span><br><span class="line">            <span class="keyword">if</span> (i % <span class="number">2</span> == <span class="number">0</span>) {</span><br><span class="line">                System.out.println(i);</span><br><span class="line">                sum += i;</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> sum;</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ThreadCallTest</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        ThreadCall threadCall = <span class="keyword">new</span> ThreadCall();</span><br><span class="line"></span><br><span class="line">        FutureTask futureTask = <span class="keyword">new</span> FutureTask(threadCall);</span><br><span class="line">    </span><br><span class="line">        <span class="keyword">new</span> Thread(futureTask).start();</span><br><span class="line">    </span><br><span class="line">        <span class="keyword">try</span> {</span><br><span class="line">            Object sum = futureTask.get();</span><br><span class="line">            System.out.println(sum);</span><br><span class="line">        } <span class="keyword">catch</span> (InterruptedException e) {</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        } <span class="keyword">catch</span> (ExecutionException e) {</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h4 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h4><ul><li><strong>Callable.get()</strong>方法需要等待线程结果，可能会<strong>阻塞</strong>；</li><li>一个<strong>FutrueTask</strong>对象只能<strong>执行一次</strong>；</li></ul><h3 id="方法四【线程池】"><a href="#方法四【线程池】" class="headerlink" title="方法四【线程池】"></a>方法四【线程池】</h3><h4 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h4><ul><li>提高响应速度；</li><li>降低资源消耗；</li><li>便于线程管理；</li></ul><h4 id="使用步骤-3"><a href="#使用步骤-3" class="headerlink" title="使用步骤"></a>使用步骤</h4><ul><li>创建线程池；</li><li>执行线程；</li></ul><h4 id="Executors-API"><a href="#Executors-API" class="headerlink" title="Executors-API"></a>Executors-API</h4><p><strong>Executors</strong>创建线程本质是创建<strong>ThreadPoolExecutor</strong>实现。</p><ul><li><strong>Executors.newFixedThreadPool()</strong>：创建固定大小的线程池；</li><li><strong>Executors.newCachedThreadPool()</strong>：创建可变大小的线程池；</li><li><strong>Executors.newSingleThreadExecutor()</strong>：创建单个线程的线程池；</li></ul><h4 id="示例代码【Executors创建】"><a href="#示例代码【Executors创建】" class="headerlink" title="示例代码【Executors创建】"></a>示例代码【Executors创建】</h4><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ThreadPoolNumber</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>{</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">100</span>; i++) {</span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">":"</span> + i);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ThreadPool</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        ThreadPoolExecutor executorService = (ThreadPoolExecutor)Executors.newFixedThreadPool(<span class="number">10</span>);</span><br><span class="line">        executorService.execute(<span class="keyword">new</span> ThreadPoolNumber()); <span class="comment">// Runnable</span></span><br><span class="line">        executorService.execute(<span class="keyword">new</span> ThreadPoolNumber()); <span class="comment">// Runnable</span></span><br><span class="line">        executorService.shutdown(); <span class="comment">// 关闭线程池</span></span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h4 id="ThreadPoolExecutor"><a href="#ThreadPoolExecutor" class="headerlink" title="ThreadPoolExecutor"></a>ThreadPoolExecutor</h4><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ThreadPoolExecutor</span><span class="params">(<span class="keyword">int</span> corePoolSize, // 核心线程池大小</span></span></span><br><span class="line"><span class="function"><span class="params">                          <span class="keyword">int</span> maximumPoolSize, // 最大核心线程池大小</span></span></span><br><span class="line"><span class="function"><span class="params">                          <span class="keyword">long</span> keepAliveTime,  // 超时释放时间</span></span></span><br><span class="line"><span class="function"><span class="params">                          TimeUnit unit, // 超时单位</span></span></span><br><span class="line"><span class="function"><span class="params">                          BlockingQueue&lt;Runnable&gt; workQueue,  // 阻塞队列</span></span></span><br><span class="line"><span class="function"><span class="params">                          ThreadFactory threadFactory,  // 线程工厂，创建线程</span></span></span><br><span class="line"><span class="function"><span class="params">                          RejectedExecutionHandler handler)</span> <span class="comment">// 拒绝策略</span></span></span><br></pre></td></tr></tbody></table></figure><h4 id="示例代码【ThreadPoolExecutor创建】"><a href="#示例代码【ThreadPoolExecutor创建】" class="headerlink" title="示例代码【ThreadPoolExecutor创建】"></a>示例代码【ThreadPoolExecutor创建】</h4><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">    ExecutorService threadPool = <span class="keyword">new</span> ThreadPoolExecutor(</span><br><span class="line">        <span class="number">2</span>,</span><br><span class="line">        <span class="number">5</span>,</span><br><span class="line">        <span class="number">3</span>, TimeUnit.SECONDS,</span><br><span class="line">        <span class="keyword">new</span> LinkedBlockingQueue&lt;&gt;(<span class="number">3</span>),</span><br><span class="line">        Executors.defaultThreadFactory(),</span><br><span class="line">        <span class="keyword">new</span> ThreadPoolExecutor.AbortPolicy()</span><br><span class="line">    );</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) {</span><br><span class="line">        threadPool.execute(() -&gt; {</span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">" OK"</span>);</span><br><span class="line">        });</span><br><span class="line">    }</span><br><span class="line">    threadPool.shutdown();</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h4 id="拒绝策略"><a href="#拒绝策略" class="headerlink" title="拒绝策略"></a>拒绝策略</h4><ul><li><strong>AbortPolicy</strong>：队列满了，不处理，抛出异常【默认】；</li><li><strong>CallerRunsPolicy</strong>：队列满了，交给<strong>main</strong>线程处理；</li><li><strong>DiscardPolicy</strong>：队列满了，不处理，不会抛出异常；</li><li><strong>DiscardOldestPolicy</strong>：队列满了，尝试竞争，竞争失败就抛弃；</li></ul><h2 id="Java线程细节"><a href="#Java线程细节" class="headerlink" title="Java线程细节"></a>Java线程细节</h2><h3 id="Java线程状态"><a href="#Java线程状态" class="headerlink" title="Java线程状态"></a>Java线程状态</h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">enum</span> <span class="title">State</span> </span>{</span><br><span class="line">    NEW,</span><br><span class="line">    RUNNABLE,</span><br><span class="line">    BLOCKED,</span><br><span class="line">    WAITING,</span><br><span class="line">    TIMED_WAITING,</span><br><span class="line">    TERMINATED;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="线程同步"><a href="#线程同步" class="headerlink" title="线程同步"></a>线程同步</h2><h3 id="同步代码块【synchronized】"><a href="#同步代码块【synchronized】" class="headerlink" title="同步代码块【synchronized】"></a>同步代码块【synchronized】</h3><h4 id="特点-1"><a href="#特点-1" class="headerlink" title="特点"></a>特点</h4><ul><li>可重入锁【可以<strong>重复获取</strong>同一个锁而<strong>不会出现死锁</strong>（例如，<strong>synchronized</strong>代码块的<strong>嵌套</strong>）】；</li><li>不可以中断【等待获取锁的时候不可中断，拿到锁之后可中断；没获取到锁的情况下，中断操作一直不会生效直到<strong>获取锁之后中断发生</strong>】；</li><li>非公平；</li></ul><h4 id="使用步骤-4"><a href="#使用步骤-4" class="headerlink" title="使用步骤"></a>使用步骤</h4><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">synchronized</span>(监视类){</span><br><span class="line">    同步代码块（每次仅允许一个线程进入）</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyThread</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>{</span><br><span class="line">    Object object = <span class="keyword">new</span> Object();</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> ticket = <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) {</span><br><span class="line">            <span class="keyword">synchronized</span> (object) {</span><br><span class="line">                <span class="keyword">if</span> (ticket &gt; <span class="number">0</span>) {</span><br><span class="line">                    <span class="keyword">try</span> {</span><br><span class="line">                        Thread.sleep(<span class="number">100</span>);</span><br><span class="line">                    } <span class="keyword">catch</span> (InterruptedException e) {</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    }</span><br><span class="line"></span><br><span class="line">                    System.out.println(Thread.currentThread().getName() + <span class="string">" : "</span> + ticket);</span><br><span class="line">                    ticket--;</span><br><span class="line">                } <span class="keyword">else</span> {</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="同步方法"><a href="#同步方法" class="headerlink" title="同步方法"></a>同步方法</h3><h4 id="使用步骤【synchronized】"><a href="#使用步骤【synchronized】" class="headerlink" title="使用步骤【synchronized】"></a>使用步骤【synchronized】</h4><p>在<strong>方法声明</strong>前面添加<strong>synchronized</strong>关键字。</p><ul><li>实现<strong>Runnable</strong>接口方式：直接添加关键字；</li><li>继承<strong>Thread</strong>方式：需要设置该方法为<strong>静态方法</strong>；</li></ul><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyThreadMethod</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>{</span><br><span class="line">    Object object = <span class="keyword">new</span> Object();</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> ticket = <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) {</span><br><span class="line">            <span class="keyword">if</span> (!getTicket()) {</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">boolean</span> <span class="title">getTicket</span> <span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">if</span> (ticket &gt; <span class="number">0</span>) {</span><br><span class="line">            <span class="keyword">try</span> {</span><br><span class="line">                Thread.sleep(<span class="number">100</span>);</span><br><span class="line">            } <span class="keyword">catch</span> (InterruptedException e) {</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            }</span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">" : "</span> + ticket);</span><br><span class="line">            ticket--;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        } <span class="keyword">else</span> {</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="Lock锁🔒"><a href="#Lock锁🔒" class="headerlink" title="Lock锁🔒"></a>Lock锁🔒</h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LockTicket</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> ticket = <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> ReentrantLock lock = <span class="keyword">new</span> ReentrantLock();</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) {</span><br><span class="line">            <span class="comment">// 调用lock方法</span></span><br><span class="line">            lock.lock();</span><br><span class="line">            <span class="keyword">try</span> {                </span><br><span class="line">                <span class="keyword">if</span> (ticket &gt; <span class="number">0</span>) {</span><br><span class="line">                    <span class="keyword">try</span> {</span><br><span class="line">                        Thread.sleep(<span class="number">100</span>);</span><br><span class="line">                    } <span class="keyword">catch</span> (InterruptedException e) {</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    }</span><br><span class="line">                    System.out.println(Thread.currentThread().getName() + <span class="string">":"</span> + ticket);</span><br><span class="line">                    ticket--;</span><br><span class="line">                } <span class="keyword">else</span> {</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                }</span><br><span class="line">            } <span class="keyword">finally</span> {</span><br><span class="line">                <span class="comment">// 调用unlock</span></span><br><span class="line">                lock.unlock();</span><br><span class="line">            }</span><br><span class="line"></span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h4 id="注意事项-1"><a href="#注意事项-1" class="headerlink" title="注意事项"></a>注意事项</h4><h4 id="Synchronized-和-Lock-区别"><a href="#Synchronized-和-Lock-区别" class="headerlink" title="Synchronized 和 Lock 区别"></a>Synchronized 和 Lock 区别</h4><ul><li><p><strong>Synchronized</strong>是内置的<strong>Java关键字</strong>，<strong>Lock</strong>是<strong>Java类</strong>；</p></li><li><p><strong>Synchronized</strong>无法判断<strong>锁的状态</strong>，<strong>Lock</strong>可以判断<strong>是否获取到了锁</strong>；</p></li><li><p><strong>Synchronized</strong>可以<strong>自动释放锁</strong>，<strong>Lock</strong>必须<strong>手动释放</strong>；</p></li></ul><h2 id="线程通信"><a href="#线程通信" class="headerlink" title="线程通信"></a>线程通信</h2><h3 id="普通方法"><a href="#普通方法" class="headerlink" title="普通方法"></a>普通方法</h3><p>该三个方法必须在<strong>同步代码块</strong>中使用；三个方法的调用者必须是<strong>同步代码块</strong>或者<strong>同步方法</strong>中的<strong>同步监视器</strong>。</p><ul><li><strong>wait()</strong>：该方法可以使线程进入阻塞状态；</li><li><strong>notify()</strong>：唤醒一个进程；</li><li><strong>notifyAll()</strong>：唤醒所有进程；</li></ul><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Number</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>{</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> number = <span class="number">1</span>;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">while</span>(<span class="keyword">true</span>) {</span><br><span class="line">            <span class="keyword">synchronized</span> (<span class="keyword">this</span>) {</span><br><span class="line">                <span class="keyword">if</span> (number &lt;= <span class="number">100</span>) {</span><br><span class="line">                    System.out.println(Thread.currentThread().getName() + <span class="string">":"</span> + number);</span><br><span class="line">                    number++;</span><br><span class="line">                    notify();</span><br><span class="line">                    <span class="keyword">try</span> {</span><br><span class="line">                        wait();</span><br><span class="line">                    } <span class="keyword">catch</span> (InterruptedException e) {</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    }</span><br><span class="line"></span><br><span class="line">                } <span class="keyword">else</span> {</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="JUC方法"><a href="#JUC方法" class="headerlink" title="JUC方法"></a>JUC方法</h3><ul><li><strong>Condition.await()</strong>：该方法可以使线程进入阻塞状态；</li><li><strong>Condition.signalAll()</strong>：唤醒所有进程；</li></ul><h4 id="代码示例"><a href="#代码示例" class="headerlink" title="代码示例"></a>代码示例</h4><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Data</span></span>{</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> number = <span class="number">0</span>;</span><br><span class="line">    Lock lock = <span class="keyword">new</span> ReentrantLock();</span><br><span class="line">    Condition condition = lock.newCondition();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">increment</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>{</span><br><span class="line">        lock.lock();</span><br><span class="line">        <span class="keyword">try</span> {</span><br><span class="line">            <span class="keyword">while</span> (number != <span class="number">0</span>) {</span><br><span class="line">                condition.await();</span><br><span class="line">            }</span><br><span class="line">            number++;</span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">"=&gt;"</span> + number);</span><br><span class="line">            condition.signalAll();</span><br><span class="line">        } <span class="keyword">catch</span> (Exception e) {</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        } <span class="keyword">finally</span> {</span><br><span class="line">            lock.unlock();</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">decrement</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>{</span><br><span class="line">        lock.lock();</span><br><span class="line">        <span class="keyword">try</span> {</span><br><span class="line">            <span class="keyword">while</span> (number == <span class="number">0</span>) {</span><br><span class="line">                condition.await();</span><br><span class="line">            }</span><br><span class="line">            number--;</span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">"=&gt;"</span> + number);</span><br><span class="line">            condition.signalAll();</span><br><span class="line">        } <span class="keyword">catch</span> (Exception e) {</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        } <span class="keyword">finally</span> {</span><br><span class="line">            lock.unlock();</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="注意事项-2"><a href="#注意事项-2" class="headerlink" title="注意事项"></a>注意事项</h3><h4 id="虚假唤醒问题"><a href="#虚假唤醒问题" class="headerlink" title="虚假唤醒问题"></a>虚假唤醒问题</h4><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (number == <span class="number">0</span>) {</span><br><span class="line">    wait();</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>如果使用<strong>if</strong>，有可能<strong>唤醒</strong>的线程任不满足条件，所以最好使用<strong>while</strong>；</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> (number == <span class="number">0</span>) {</span><br><span class="line">    wait();</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="JUC常用辅助类"><a href="#JUC常用辅助类" class="headerlink" title="JUC常用辅助类"></a>JUC常用辅助类</h2><h3 id="CountDownLatch"><a href="#CountDownLatch" class="headerlink" title="CountDownLatch"></a>CountDownLatch</h3><p>等待<strong>计算器</strong>归零再执行。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JUCCountDownLatch</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>{</span><br><span class="line">        CountDownLatch countDownLatch = <span class="keyword">new</span> CountDownLatch(<span class="number">6</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">6</span>; i++) {</span><br><span class="line">            <span class="keyword">new</span> Thread(()-&gt;{</span><br><span class="line">                System.out.println(Thread.currentThread().getName() + <span class="string">" Go out"</span>);</span><br><span class="line">                countDownLatch.countDown();</span><br><span class="line">            }, String.valueOf(i)).start();</span><br><span class="line">        }</span><br><span class="line">        countDownLatch.await();</span><br><span class="line">        System.out.println(<span class="string">"Close Door"</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="CyclicBarrier"><a href="#CyclicBarrier" class="headerlink" title="CyclicBarrier"></a>CyclicBarrier</h3><p>等待指定个数个线程结束，指定执行某个线程。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">    CyclicBarrier cyclicBarrier = <span class="keyword">new</span> CyclicBarrier(<span class="number">7</span>, ()-&gt;{</span><br><span class="line">        System.out.println(<span class="string">"召唤神龙成功"</span>);</span><br><span class="line">    });</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">7</span>; i++) {</span><br><span class="line">        <span class="keyword">new</span> Thread(()-&gt;{</span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">" Get"</span>);</span><br><span class="line">            <span class="keyword">try</span> {</span><br><span class="line">                cyclicBarrier.await();</span><br><span class="line">            } <span class="keyword">catch</span> (InterruptedException e) {</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            } <span class="keyword">catch</span> (BrokenBarrierException e) {</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            }</span><br><span class="line">        }, String.valueOf(i)).start();</span><br><span class="line">    }</span><br><span class="line">    System.out.println(<span class="string">"Close Door"</span>);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="Semaphore"><a href="#Semaphore" class="headerlink" title="Semaphore"></a>Semaphore</h3><p>信号量。</p><ul><li><strong>Semaphore.acquire()</strong>：获得信号量，如果满了就等待；</li><li><strong>Semaphore.release()</strong>：释放信号量，会将当前信号量加一，然后唤醒等待线程；</li></ul><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">    <span class="comment">// 线程数量</span></span><br><span class="line">    Semaphore semaphore = <span class="keyword">new</span> Semaphore(<span class="number">3</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">6</span>; i++) {</span><br><span class="line">        <span class="keyword">new</span> Thread(()-&gt;{</span><br><span class="line">            <span class="keyword">try</span> {</span><br><span class="line">                semaphore.acquire();</span><br><span class="line">                System.out.println(Thread.currentThread().getName() + <span class="string">"抢到车位"</span>);</span><br><span class="line">                TimeUnit.SECONDS.sleep(<span class="number">2</span>);</span><br><span class="line">                System.out.println(Thread.currentThread().getName() + <span class="string">"离开车位"</span>);</span><br><span class="line">            } <span class="keyword">catch</span> (InterruptedException e) {</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            } <span class="keyword">finally</span> {</span><br><span class="line">                semaphore.release();</span><br><span class="line">            }</span><br><span class="line">        }, String.valueOf(i)).start();</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="JUC常用锁"><a href="#JUC常用锁" class="headerlink" title="JUC常用锁"></a>JUC常用锁</h2><h2 id="线程安全"><a href="#线程安全" class="headerlink" title="线程安全"></a>线程安全</h2><h3 id="线程安全的List"><a href="#线程安全的List" class="headerlink" title="线程安全的List"></a>线程安全的List</h3><h4 id="java-util-Vector"><a href="#java-util-Vector" class="headerlink" title="java.util.Vector"></a>java.util.Vector</h4><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Vector&lt;Integer&gt; list = <span class="keyword">new</span> Vector&lt;&gt;();</span><br></pre></td></tr></tbody></table></figure><h4 id="java-util-concurrent-CopyOnWriteArrayList"><a href="#java-util-concurrent-CopyOnWriteArrayList" class="headerlink" title="java.util.concurrent.CopyOnWriteArrayList"></a>java.util.concurrent.CopyOnWriteArrayList</h4><p><strong>写入时复制</strong></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CopyOnWriteArrayList&lt;Integer&gt; list = <span class="keyword">new</span> CopyOnWriteArrayList&lt;&gt;();</span><br></pre></td></tr></tbody></table></figure><h4 id="java-util-Collections-synchronizedList"><a href="#java-util-Collections-synchronizedList" class="headerlink" title="java.util.Collections.synchronizedList()"></a>java.util.Collections.synchronizedList()</h4><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">List&lt;Integer&gt; list = Collections.synchronizedList(<span class="keyword">new</span> ArrayList&lt;&gt;());</span><br></pre></td></tr></tbody></table></figure><h2 id="阻塞队列"><a href="#阻塞队列" class="headerlink" title="阻塞队列"></a>阻塞队列</h2><h3 id="API"><a href="#API" class="headerlink" title="API"></a>API</h3><div class="table-container"><table><thead><tr><th>方式</th><th>抛出异常</th><th>有返回值，不抛异常</th><th>阻塞等待</th><th>超时等待</th></tr></thead><tbody><tr><td><strong>添加</strong></td><td>add()</td><td>offer()</td><td>put()</td><td>offer()</td></tr><tr><td><strong>删除</strong></td><td>remove()</td><td>poll()</td><td>take()</td><td>poll()</td></tr><tr><td><strong>返回队首元素</strong></td><td>element()</td><td>peek()</td><td>-</td><td>-</td></tr></tbody></table></div><h3 id="SynchronousQueue"><a href="#SynchronousQueue" class="headerlink" title="SynchronousQueue"></a>SynchronousQueue</h3><p>只存储一个元素。</p><h2 id="JMM"><a href="#JMM" class="headerlink" title="JMM"></a>JMM</h2><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>JMM即为<strong>JAVA 内存模型（Java Memory Model）</strong>。</p><p><strong>JVM</strong>在设计时候考虑到，如果JAVA线程每次读取和写入变量都直接操作主内存，<strong>对性能影响比较大</strong>，所以<strong>每条线程拥有各自的工作内存</strong>，工作内存中的变量是主内存中的一份拷贝，线程对变量的读取和写入，直接在工作内存中操作，而不能直接去操作主内存中的变量。但是这样就会出现一个问题，当一个线程修改了自己工作内存中变量，对其他线程是不可见的，会导致线程不安全的问题。因为<strong>JMM</strong>制定了一套标准来保证开发者在编写多线程程序的时候，能够控制什么时候内存会被同步给其他线程。</p><p><img src="/2021/11/06/Java-%E5%A4%9A%E7%BA%BF%E7%A8%8B/1102674-20180815143324915-2024156794.png" alt="img"></p><h3 id="内存交互操作"><a href="#内存交互操作" class="headerlink" title="内存交互操作"></a>内存交互操作</h3><p>每一个操作都是原子的，不可再分的。</p><ul><li><strong>lock</strong>（锁定）：作用于主内存的变量，把一个变量标识为线程独占状态</li><li><strong>unlock</strong>（解锁）：作用于主内存的变量，它把一个处于锁定状态的变量释放出来，释放后的变量才可以被其他线程锁定</li><li><strong>read</strong>（读取）：作用于主内存变量，它把一个变量的值从主内存传输到线程的工作内存中，以便随后的load动作使用</li><li><strong>load</strong>（载入）：作用于工作内存的变量，它把read操作从主存中变量放入工作内存中</li><li><strong>use</strong>（使用）：作用于工作内存中的变量，它把工作内存中的变量传输给执行引擎，每当虚拟机遇到一个需要使用到变量的值，就会使用到这个指令</li><li><strong>assign</strong>（赋值）：作用于工作内存中的变量，它把一个从执行引擎中接受到的值放入工作内存的变量副本中</li><li><strong>store</strong>（存储）：作用于主内存中的变量，它把一个从工作内存中一个变量的值传送到主内存中，以便后续的write使用</li><li><strong>write</strong>（写入）：作用于主内存中的变量，它把store操作从工作内存中得到的变量的值放入主内存的变量中</li></ul><h3 id="Volatile"><a href="#Volatile" class="headerlink" title="Volatile"></a>Volatile</h3><h4 id="特点-2"><a href="#特点-2" class="headerlink" title="特点"></a>特点</h4><ul><li>保证可见性【数据的修改会被线程立即发现】；</li><li><strong>不保证</strong>原子性；</li><li>禁止指令重排；</li></ul><h4 id="指令重排"><a href="#指令重排" class="headerlink" title="指令重排"></a>指令重排</h4><p>在程序执行过程中，为了性能考虑，编译器和CPU可能会对指令重新排序。</p><ul><li>编译器优化；</li><li>指令并行；</li><li>内存系统；</li></ul><h2 id="原子类"><a href="#原子类" class="headerlink" title="原子类"></a>原子类</h2><h2 id="CAS"><a href="#CAS" class="headerlink" title="CAS"></a>CAS</h2><h3 id="简介-1"><a href="#简介-1" class="headerlink" title="简介"></a>简介</h3><p><strong>CAS（Compare And Swap）</strong>是比较并交换。</p><h3 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">    AtomicInteger atomicInteger = <span class="keyword">new</span> AtomicInteger(<span class="number">2020</span>);</span><br><span class="line">    System.out.println(atomicInteger.compareAndSet(<span class="number">2020</span>, <span class="number">2021</span>));</span><br><span class="line">    System.out.println(atomicInteger.get());</span><br><span class="line">    System.out.println(atomicInteger.compareAndSet(<span class="number">2020</span>, <span class="number">2021</span>));</span><br><span class="line">    System.out.println(atomicInteger.get());</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">getAndSetInt</span><span class="params">(Object var1, <span class="keyword">long</span> var2, <span class="keyword">int</span> var4)</span> </span>{</span><br><span class="line">    <span class="keyword">int</span> var5;</span><br><span class="line">    <span class="keyword">do</span> {</span><br><span class="line">        var5 = <span class="keyword">this</span>.getIntVolatile(var1, var2);</span><br><span class="line">    } <span class="keyword">while</span>(!<span class="keyword">this</span>.compareAndSwapInt(var1, var2, var5, var4));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> var5;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h3><ul><li>循环会耗时；</li><li>一次只能保证一个共享变量的原子性；</li><li><strong>ABA</strong>问题【可以使用<strong>AtomicStampedReference</strong>解决】；</li></ul><h2 id="注意事项-3"><a href="#注意事项-3" class="headerlink" title="注意事项"></a>注意事项</h2><h3 id="sleep-和wait"><a href="#sleep-和wait" class="headerlink" title="sleep()和wait()"></a>sleep()和wait()</h3><ul><li><p><strong>相同点</strong>：执行方法，都可以使得当前进程进入<strong>阻塞</strong>状态；</p></li><li><p><strong>不同点</strong>：</p><ul><li>两个方法声明位置不同：<strong>sleep()</strong>声明在<strong>Thread</strong>类中；<strong>wait()</strong>声明在<strong>Object</strong>类中；</li><li>调用要求不同：<strong>sleep()</strong>可以在任何时候调用；<strong>wait()</strong>必须在<strong>同步代码块</strong>或<strong>同步方法</strong>中调用；</li><li>是否释放<strong>同步监视器</strong>：如果两个方法都使用在<strong>同步代码块</strong>或者<strong>同步方法</strong>中，<strong>sleep()</strong>不会释放锁；<strong>wait()</strong>会释放锁；</li></ul></li></ul>]]></content>
    
    
    <summary type="html">Java多线程的使用方法。</summary>
    
    
    
    <category term="Java" scheme="https://1.15.86.100/categories/Java/"/>
    
    
    <category term="多线程" scheme="https://1.15.86.100/tags/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>java.util.ArrayList详解</title>
    <link href="https://1.15.86.100/2021/11/01/java-util-ArrayList%E8%AF%A6%E8%A7%A3/"/>
    <id>https://1.15.86.100/2021/11/01/java-util-ArrayList%E8%AF%A6%E8%A7%A3/</id>
    <published>2021-11-01T07:52:16.000Z</published>
    <updated>2021-11-01T09:00:33.492Z</updated>
    
    <content type="html"><![CDATA[<h1 id="java-util-ArrayList"><a href="#java-util-ArrayList" class="headerlink" title="java.util.ArrayList"></a>java.util.ArrayList</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p><strong>可变长度</strong>的数组<strong>ArrayList</strong>，继承了<strong>AbstractList</strong>类，实现了<strong>List\<e\></e\></strong>，<strong>RandomAccess</strong>，<strong>Cloneable</strong>，j<strong>ava.io.Serializable</strong>等接口。</p><p>其方法<strong>size</strong>，<strong>isEmpty</strong>，<strong>get</strong>，<strong>set</strong>，<strong>iterator</strong>，和<strong>listIterator</strong>需要 <script type="math/tex">O(1)</script> 时间，其方法<strong>add</strong>消耗<strong>摊还常量时间（amortized constant time）</strong>，其他所有操作需要 <script type="math/tex">O(n)</script> 时间。</p><h2 id="详解"><a href="#详解" class="headerlink" title="详解"></a>详解</h2><h3 id="grow"><a href="#grow" class="headerlink" title="grow"></a>grow</h3><p>该函数主要用户扩展<strong>ArrayList</strong>的容量，使其至少能容纳<strong>minCapacity</strong>个数据。其代码如下：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> Object[] grow(<span class="keyword">int</span> minCapacity) {</span><br><span class="line">    <span class="keyword">int</span> oldCapacity = elementData.length;</span><br><span class="line">    <span class="keyword">if</span> (oldCapacity &gt; <span class="number">0</span> || elementData != DEFAULTCAPACITY_EMPTY_ELEMENTDATA)</span><br><span class="line">        <span class="comment">// 如果elementData已初始化且包含数据，则重新创建数据并拷贝原数据。</span></span><br><span class="line">        <span class="keyword">int</span> newCapacity = ArraysSupport.newLength(oldCapacity,</span><br><span class="line">                                                  minCapacity - oldCapacity, <span class="comment">/* minimum growth */</span></span><br><span class="line">                                                  oldCapacity &gt;&gt; <span class="number">1</span>           <span class="comment">/* preferred growth */</span>);</span><br><span class="line">    <span class="comment">// 新的数组长度为 max(minCapacity, oldCapacity + oldCapacity &gt;&gt; 1)</span></span><br><span class="line">    <span class="comment">// 如果新的数组长度超过 ArraysSupport.MAX_ARRAY_LENGTH(Integer.MAX_VALUE - 8)</span></span><br><span class="line">    <span class="comment">// 则直接返回 ArraysSupport.MAX_ARRAY_LENGTH</span></span><br><span class="line">    </span><br><span class="line">        <span class="keyword">return</span> elementData = Arrays.copyOf(elementData, newCapacity);</span><br><span class="line">    <span class="comment">// 先创建长度为 newCapacity 的数组</span></span><br><span class="line">    <span class="comment">// 如果 elementData 中元素为Object，则直接 new Object[newCapacity] 生成新的数组；</span></span><br><span class="line">    <span class="comment">// 否则 调用 Arrays.newArray （该函数实现使用了高效的底层指令）创建数组元素</span></span><br><span class="line">    <span class="comment">// 然后调用 java.lang.System.arraycopy（该函数实现使用了高效的底层指令）将数据从原数字拷贝至新的数据</span></span><br><span class="line">    } <span class="keyword">else</span> {</span><br><span class="line">    <span class="comment">// 如果elementData未初始化或者为空，则直接重新创建数组。</span></span><br><span class="line">        <span class="keyword">return</span> elementData = <span class="keyword">new</span> Object[Math.max(DEFAULT_CAPACITY, minCapacity)];</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="ensureCapacity"><a href="#ensureCapacity" class="headerlink" title="ensureCapacity"></a>ensureCapacity</h3><p>公开方法，具体调用<strong>grow</strong>实现。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ensureCapacity</span><span class="params">(<span class="keyword">int</span> minCapacity)</span> </span>{</span><br><span class="line">    <span class="keyword">if</span> (minCapacity &gt; elementData.length</span><br><span class="line">        &amp;&amp; !(elementData == DEFAULTCAPACITY_EMPTY_ELEMENTDATA</span><br><span class="line">             &amp;&amp; minCapacity &lt;= DEFAULT_CAPACITY)) {</span><br><span class="line">        modCount++;<span class="comment">// 容量修改计数</span></span><br><span class="line">        grow(minCapacity);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="contains"><a href="#contains" class="headerlink" title="contains"></a>contains</h3><p>调用<strong>indexOf</strong>实现，<strong>遍历查找</strong>，代码如下：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">contains</span><span class="params">(Object o)</span> </span>{</span><br><span class="line">    <span class="keyword">return</span> indexOf(o) &gt;= <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="indexOf"><a href="#indexOf" class="headerlink" title="indexOf"></a>indexOf</h3><p>调用<strong>indexOfRange</strong>实现。</p><h3 id="indexOfRange"><a href="#indexOfRange" class="headerlink" title="indexOfRange"></a>indexOfRange</h3><p>从<strong>start</strong>到<strong>end（不包括）</strong>，查找<strong>o</strong>元素，并返回<strong>index</strong>。源代码直接<strong>遍历查找</strong>，代码如下：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">indexOfRange</span><span class="params">(Object o, <span class="keyword">int</span> start, <span class="keyword">int</span> end)</span> </span>{</span><br><span class="line">    Object[] es = elementData;</span><br><span class="line">    <span class="keyword">if</span> (o == <span class="keyword">null</span>) {</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = start; i &lt; end; i++) {</span><br><span class="line">            <span class="keyword">if</span> (es[i] == <span class="keyword">null</span>) {</span><br><span class="line">                <span class="keyword">return</span> i;</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    } <span class="keyword">else</span> {</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = start; i &lt; end; i++) {</span><br><span class="line">            <span class="keyword">if</span> (o.equals(es[i])) {</span><br><span class="line">                <span class="keyword">return</span> i;</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="lastIndexOfRange"><a href="#lastIndexOfRange" class="headerlink" title="lastIndexOfRange"></a>lastIndexOfRange</h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">lastIndexOfRange</span><span class="params">(Object o, <span class="keyword">int</span> start, <span class="keyword">int</span> end)</span> </span>{</span><br><span class="line">    Object[] es = elementData;</span><br><span class="line">    <span class="keyword">if</span> (o == <span class="keyword">null</span>) {</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = end - <span class="number">1</span>; i &gt;= start; i--) {</span><br><span class="line">            <span class="keyword">if</span> (es[i] == <span class="keyword">null</span>) {</span><br><span class="line">                <span class="keyword">return</span> i;</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    } <span class="keyword">else</span> {</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = end - <span class="number">1</span>; i &gt;= start; i--) {</span><br><span class="line">            <span class="keyword">if</span> (o.equals(es[i])) {</span><br><span class="line">                <span class="keyword">return</span> i;</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="lastIndexOf"><a href="#lastIndexOf" class="headerlink" title="lastIndexOf"></a>lastIndexOf</h3><p>调用<strong>lastIndexOfRange</strong>。</p><h3 id="lastIndexOfRange-1"><a href="#lastIndexOfRange-1" class="headerlink" title="lastIndexOfRange"></a>lastIndexOfRange</h3><p>基本同<strong>indexOfRange</strong>，从后往前遍历。</p><h3 id="clone"><a href="#clone" class="headerlink" title="clone"></a>clone</h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">clone</span><span class="params">()</span> </span>{</span><br><span class="line">    <span class="keyword">try</span> {</span><br><span class="line">        ArrayList&lt;?&gt; v = (ArrayList&lt;?&gt;) <span class="keyword">super</span>.clone();</span><br><span class="line">        <span class="comment">// super.clone() （该函数实现使用了高效的底层指令）,克隆类的信息</span></span><br><span class="line">        v.elementData = Arrays.copyOf(elementData, size);</span><br><span class="line">        <span class="comment">// 创建已经存储数据数量的数组，并拷贝数据</span></span><br><span class="line">        v.modCount = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">return</span> v;</span><br><span class="line">    } <span class="keyword">catch</span> (CloneNotSupportedException e) {</span><br><span class="line">        <span class="comment">// this shouldn't happen, since we are Cloneable</span></span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> InternalError(e);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="toArray"><a href="#toArray" class="headerlink" title="toArray"></a>toArray</h3><p>生成并拷贝新的数组（修改不对原数据产生影响）。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> Object[] toArray() {</span><br><span class="line">    <span class="keyword">return</span> Arrays.copyOf(elementData, size);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>]]></content>
    
    
    <summary type="html">java.util.ArrayList类的源码详解。</summary>
    
    
    
    <category term="java" scheme="https://1.15.86.100/categories/java/"/>
    
    
  </entry>
  
  <entry>
    <title>用NumPy搭建简单神经网络</title>
    <link href="https://1.15.86.100/2021/11/01/%E7%94%A8NumPy%E6%90%AD%E5%BB%BA%E7%AE%80%E5%8D%95%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/"/>
    <id>https://1.15.86.100/2021/11/01/%E7%94%A8NumPy%E6%90%AD%E5%BB%BA%E7%AE%80%E5%8D%95%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/</id>
    <published>2021-11-01T04:59:34.000Z</published>
    <updated>2021-11-01T05:44:26.324Z</updated>
    
    <content type="html"><![CDATA[<h1 id="用NumPy搭建简单神经网络"><a href="#用NumPy搭建简单神经网络" class="headerlink" title="用NumPy搭建简单神经网络"></a>用NumPy搭建简单神经网络</h1><h2 id="模型代码"><a href="#模型代码" class="headerlink" title="模型代码"></a>模型代码</h2><h3 id="公共父类"><a href="#公共父类" class="headerlink" title="公共父类"></a>公共父类</h3><p>后面所有类都需要继承该类，并实现其方法。</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> abc <span class="keyword">import</span> abstractmethod</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Module</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>) -&gt; <span class="literal">None</span>:</span></span><br><span class="line">        <span class="built_in">super</span>(Module, self).__init__()</span><br><span class="line">    </span><br><span class="line"><span class="meta">    @abstractmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">forward</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__call__</span>(<span class="params">self, *args, **kwds</span>):</span></span><br><span class="line">        <span class="keyword">return</span> self.forward(*args, **kwds)</span><br></pre></td></tr></tbody></table></figure><h3 id="全链接层"><a href="#全链接层" class="headerlink" title="全链接层"></a>全链接层</h3><h4 id="数学推导："><a href="#数学推导：" class="headerlink" title="数学推导："></a>数学推导：</h4><ul><li><p><strong>前向传播</strong>公式：</p><script type="math/tex; mode=display">Y_{n\times q}=X_{n\times p} \cdot W_{p\times q} + b_{1\times q}</script></li><li><p><strong>反向传播</strong>公式：</p><script type="math/tex; mode=display">\frac{\partial Y}{\partial X_{n\times p}}=Y\cdot W^T</script><script type="math/tex; mode=display">\frac{\partial Y}{\partial W_{p\times q}}=X^T\cdot Y</script><script type="math/tex; mode=display">\frac{\partial Y}{\partial b_{1\times q}}=1_{1\times q}</script></li></ul><h4 id="代码实现："><a href="#代码实现：" class="headerlink" title="代码实现："></a>代码实现：</h4><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Linear</span>(<span class="params">Module</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, in_features, out_features, bias=<span class="literal">False</span></span>) -&gt; <span class="literal">None</span>:</span></span><br><span class="line">        <span class="built_in">super</span>(Linear, self).__init__()</span><br><span class="line">        self.W = np.random.normal(size=(in_features, out_features))</span><br><span class="line">        self.X = <span class="literal">None</span></span><br><span class="line">        self.bias = <span class="literal">None</span></span><br><span class="line">        <span class="keyword">if</span> bias:</span><br><span class="line">            self.bias = np.random.normal(size=(out_features))</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">forward</span>(<span class="params">self, X</span>):</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        X: (batch_size, hidden_size)</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        self.X = X</span><br><span class="line">        Y = np.dot(X, self.W)</span><br><span class="line">        <span class="keyword">if</span> self.bias <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">            Y = Y + self.bias</span><br><span class="line">        <span class="keyword">return</span> Y</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">backward</span>(<span class="params">self, delta_Y, lr</span>):</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        delta_Y: (batch_size, output_size)</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        delta_Y_ = np.dot(delta_Y, self.W.transpose())</span><br><span class="line">        self.W = self.W - np.dot(self.X.transpose(), delta_Y) * lr</span><br><span class="line">        <span class="keyword">if</span> self.bias <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">            self.bias -= np.average(delta_Y, axis=<span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> delta_Y_</span><br></pre></td></tr></tbody></table></figure><h3 id="tanh激活函数层"><a href="#tanh激活函数层" class="headerlink" title="tanh激活函数层"></a>tanh激活函数层</h3><h4 id="数学推导：-1"><a href="#数学推导：-1" class="headerlink" title="数学推导："></a>数学推导：</h4><ul><li><p><strong>前向传播</strong>公式：</p><script type="math/tex; mode=display">Y_{n\times m}=\frac{e^{X_{n\times m}}-e^{-X_{n\times m}}}{e^{X_{n\times m}}+e^{-X_{n\times m}}}</script></li><li><p><strong>反向传播</strong>公式：</p><script type="math/tex; mode=display">\frac{\partial Y}{\partial X_{n\times m}}=1-\mathrm{tanh}(X_{n\times m})^2</script></li></ul><h4 id="代码实现：-1"><a href="#代码实现：-1" class="headerlink" title="代码实现："></a>代码实现：</h4><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Tanh</span>(<span class="params">Module</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>) -&gt; <span class="literal">None</span>:</span></span><br><span class="line">        <span class="built_in">super</span>(Tanh, self).__init__()</span><br><span class="line">        self.Y = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">forward</span>(<span class="params">self, X</span>):</span></span><br><span class="line">        self.Y = np.tanh(X)</span><br><span class="line">        <span class="keyword">return</span> self.Y</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">backward</span>(<span class="params">self, delta_Y</span>):</span></span><br><span class="line">        <span class="keyword">return</span> np.multiply((<span class="number">1</span> - self.Y ** <span class="number">2</span>), delta_Y)</span><br></pre></td></tr></tbody></table></figure><h3 id="Softmax层"><a href="#Softmax层" class="headerlink" title="Softmax层"></a>Softmax层</h3><h4 id="数学推导：-2"><a href="#数学推导：-2" class="headerlink" title="数学推导："></a>数学推导：</h4><ul><li><p><strong>前向传播</strong>公式：</p><script type="math/tex; mode=display">Y_{i,j}=\frac{e^{X_{i,j}}}{\sum_{j=1}^m e^{X_{i,j}}}</script></li><li><p><strong>反向传播</strong>公式：</p><script type="math/tex; mode=display">\frac{\partial Y}{\partial X_{i,j}}=\sum_{k\ne j}-Y_{i,k}\cdot Y_{i,j}+Y_{i,j}\cdot(1-Y_{i,j})</script></li></ul><h4 id="代码实现：-2"><a href="#代码实现：-2" class="headerlink" title="代码实现："></a>代码实现：</h4><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Softmax</span>(<span class="params">Module</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>) -&gt; <span class="literal">None</span>:</span></span><br><span class="line">        <span class="built_in">super</span>(Softmax, self).__init__()</span><br><span class="line">        self.exps = <span class="literal">None</span></span><br><span class="line">        self.exps_sum = <span class="literal">None</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">forward</span>(<span class="params">self, X</span>):</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        X: (batch_size, features)</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        C = np.<span class="built_in">max</span>(X)</span><br><span class="line">        self.exps = np.exp(X - C)</span><br><span class="line">        self.exps_sum = np.<span class="built_in">sum</span>(self.exps, axis=<span class="number">1</span>).reshape((-<span class="number">1</span>, <span class="number">1</span>))</span><br><span class="line">        <span class="keyword">return</span> np.divide(self.exps, self.exps_sum)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">backward</span>(<span class="params">self, delta_Y</span>):</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        delta_Y: (batch_size, features)</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        exps_sum_square = self.exps_sum ** <span class="number">2</span></span><br><span class="line">        ii_matrix = np.multiply(self.exps, self.exps_sum) / exps_sum_square <span class="comment"># (batch_size, features)</span></span><br><span class="line">        ij_matrix = - np.matmul(self.exps[:, :, np.newaxis], self.exps[:, np.newaxis, :]) / exps_sum_square[:, :, np.newaxis] <span class="comment"># (batch_size, features, features)</span></span><br><span class="line">        ij_Y = np.multiply(delta_Y[:, :, np.newaxis], ij_matrix).<span class="built_in">sum</span>(axis=<span class="number">1</span>) <span class="comment"># (batch_size, features)</span></span><br><span class="line">        delta_Y = ij_Y + np.multiply(delta_Y, ii_matrix) <span class="comment"># (batch_size, features)</span></span><br><span class="line">        <span class="keyword">return</span> delta_Y</span><br></pre></td></tr></tbody></table></figure><h3 id="Log对数函数层"><a href="#Log对数函数层" class="headerlink" title="Log对数函数层"></a>Log对数函数层</h3><h4 id="数学推导：-3"><a href="#数学推导：-3" class="headerlink" title="数学推导："></a>数学推导：</h4><ul><li><p><strong>前向传播</strong>公式：</p><script type="math/tex; mode=display">Y_{i,j}=\ln(X_{i,j})</script></li><li><p><strong>反向传播</strong>公式：</p><script type="math/tex; mode=display">\frac{\partial Y}{\partial X_{i,j}}=\frac{1}{X_{i,j}}</script></li></ul><h4 id="代码实现：-3"><a href="#代码实现：-3" class="headerlink" title="代码实现："></a>代码实现：</h4><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Log</span>(<span class="params">Module</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>) -&gt; <span class="literal">None</span>:</span></span><br><span class="line">        <span class="built_in">super</span>(Log, self).__init__()</span><br><span class="line">        self.inf = <span class="number">1e-10</span></span><br><span class="line">        self.X = <span class="literal">None</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">forward</span>(<span class="params">self, X</span>):</span></span><br><span class="line">        self.X = X</span><br><span class="line">        <span class="keyword">return</span> np.log(X + self.inf)</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">backward</span>(<span class="params">self, delta_Y</span>):</span></span><br><span class="line">        <span class="keyword">return</span> np.multiply(<span class="number">1</span> / (self.X + self.inf), delta_Y)</span><br></pre></td></tr></tbody></table></figure><h3 id="损失函数层"><a href="#损失函数层" class="headerlink" title="损失函数层"></a>损失函数层</h3><h4 id="数学推导：-4"><a href="#数学推导：-4" class="headerlink" title="数学推导："></a>数学推导：</h4><ul><li><p><strong>前向传播</strong>公式：</p><script type="math/tex; mode=display">Y=\frac{\sum_{i=1}^n\sum_{j=1}^m-X_{i,j}T_{i,j}}{n}</script><p>  其中：</p><ul><li><script type="math/tex">X_{i,j}</script>：预测的第 <script type="math/tex">i</script> 条数据是标签 <script type="math/tex">j</script> 的概率；</li><li><script type="math/tex">T_{i,j}</script>：实际的第 <script type="math/tex">i</script> 条数据是标签 <script type="math/tex">j</script> 的概率【0，1】；</li></ul></li><li><p><strong>反向传播</strong>公式：</p><script type="math/tex; mode=display">\frac{\partial Y}{\partial X_{i,j}}=-\frac{T_{i,j}}{n}</script></li></ul><h4 id="代码实现：-4"><a href="#代码实现：-4" class="headerlink" title="代码实现："></a>代码实现：</h4><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">NLLloss</span>(<span class="params">Module</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>) -&gt; <span class="literal">None</span>:</span></span><br><span class="line">        <span class="built_in">super</span>(NLLloss, self).__init__()</span><br><span class="line">        self.target = <span class="literal">None</span></span><br><span class="line">        self.loss = <span class="literal">None</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">forward</span>(<span class="params">self, Y, target</span>):</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        Y: (batch_size, features)</span></span><br><span class="line"><span class="string">        target: (batch_size)</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        self.target = np.ones(shape=Y.shape) * <span class="number">1e-6</span></span><br><span class="line">        <span class="keyword">for</span> i, j <span class="keyword">in</span> <span class="built_in">enumerate</span>(target):</span><br><span class="line">            self.target[i, j] = <span class="number">1</span></span><br><span class="line">        self.loss = -np.<span class="built_in">sum</span>(np.multiply(Y, self.target)) / <span class="built_in">len</span>(target)</span><br><span class="line">        <span class="keyword">return</span> self.loss</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">backward</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> - self.target * self.loss</span><br></pre></td></tr></tbody></table></figure><h2 id="神经网络结构"><a href="#神经网络结构" class="headerlink" title="神经网络结构"></a>神经网络结构</h2><h3 id="模型结构"><a href="#模型结构" class="headerlink" title="模型结构"></a>模型结构</h3><p><img src="/2021/11/01/%E7%94%A8NumPy%E6%90%AD%E5%BB%BA%E7%AE%80%E5%8D%95%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/image-20211101133801955.png" alt="image-20211101133801955"></p><h3 id="模型代码："><a href="#模型代码：" class="headerlink" title="模型代码："></a>模型代码：</h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 模型</span></span><br><span class="line">linear1 = Linear(in_features=<span class="number">28</span> * <span class="number">28</span>, out_features=<span class="number">1024</span>, bias=<span class="literal">True</span>)</span><br><span class="line">tanh1 = Tanh()</span><br><span class="line">linear2 = Linear(in_features=<span class="number">1024</span>, out_features=<span class="number">10</span>, bias=<span class="literal">True</span>)</span><br><span class="line">softmax = Softmax()</span><br><span class="line">log = Log()</span><br><span class="line">nllloss = NLLloss()</span><br></pre></td></tr></tbody></table></figure><h2 id="模型实验"><a href="#模型实验" class="headerlink" title="模型实验"></a>模型实验</h2><h3 id="实验代码"><a href="#实验代码" class="headerlink" title="实验代码"></a>实验代码</h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 训练参数</span></span><br><span class="line">epochs = <span class="number">30</span></span><br><span class="line">batch_size_train = <span class="number">64</span></span><br><span class="line">batch_size_test = <span class="number">1000</span></span><br><span class="line">lr = <span class="number">0.0003</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 模型</span></span><br><span class="line">linear1 = Linear(in_features=<span class="number">28</span> * <span class="number">28</span>, out_features=<span class="number">1024</span>, bias=<span class="literal">True</span>)</span><br><span class="line">tanh1 = Tanh()</span><br><span class="line">linear2 = Linear(in_features=<span class="number">1024</span>, out_features=<span class="number">10</span>, bias=<span class="literal">True</span>)</span><br><span class="line">softmax = Softmax()</span><br><span class="line">log = Log()</span><br><span class="line">nllloss = NLLloss()</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> epoch <span class="keyword">in</span> <span class="built_in">range</span>(epochs):</span><br><span class="line">    <span class="string">""" train """</span></span><br><span class="line">    process_bar = tqdm(<span class="built_in">range</span>(<span class="built_in">len</span>(X_train) // batch_size_train), ncols=<span class="number">150</span>)</span><br><span class="line">    <span class="keyword">for</span> itor <span class="keyword">in</span> process_bar:</span><br><span class="line">        X = X_train[itor * batch_size_train: itor * batch_size_train + batch_size_train]</span><br><span class="line">        y = y_train[itor * batch_size_train: itor * batch_size_train + batch_size_train]</span><br><span class="line">        <span class="string">""" 前向传播 """</span></span><br><span class="line">        tmp = X.reshape((batch_size_train, -<span class="number">1</span>))</span><br><span class="line">        tmp = linear1(tmp)</span><br><span class="line">        tmp = tanh1(tmp)</span><br><span class="line">        tmp = linear2(tmp)</span><br><span class="line">        tmp = softmax(tmp)</span><br><span class="line">        pre = np.argmax(tmp, axis=<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">        train_acc = np.<span class="built_in">sum</span>(y == pre)</span><br><span class="line">        train_total = <span class="built_in">len</span>(y)</span><br><span class="line">        </span><br><span class="line">        tmp = log(tmp)</span><br><span class="line">        loss = nllloss(tmp, y)</span><br><span class="line">        <span class="string">""" 反向传播 """</span></span><br><span class="line">        Y = nllloss.backward()</span><br><span class="line">        Y = log.backward(Y)</span><br><span class="line">        Y = softmax.backward(Y)</span><br><span class="line">        Y = linear2.backward(Y, lr)</span><br><span class="line">        Y = tanh1.backward(Y)</span><br><span class="line">        Y = linear1.backward(Y, lr)</span><br><span class="line"></span><br><span class="line">        process_bar.set_description(<span class="string">'Train epoch:{} '</span>.<span class="built_in">format</span>(epoch + <span class="number">1</span>))</span><br><span class="line">        process_bar.set_postfix_str(<span class="string">'loss: {:.4f}  Acc:{:.2f}%'</span>.<span class="built_in">format</span>(</span><br><span class="line">                                    loss, <span class="number">100.</span> * train_acc / train_total))</span><br><span class="line">    </span><br><span class="line">    <span class="string">""" test """</span></span><br><span class="line">    test_total = <span class="number">0</span></span><br><span class="line">    test_acc = <span class="number">0</span></span><br><span class="line">    test_process_bar = tqdm(<span class="built_in">range</span>(<span class="built_in">len</span>(X_test) // batch_size_test), ncols=<span class="number">150</span>)</span><br><span class="line">    <span class="keyword">for</span> itor <span class="keyword">in</span> test_process_bar:</span><br><span class="line">        X = X_test[itor * batch_size_test: itor * batch_size_test + batch_size_test]</span><br><span class="line">        y = y_test[itor * batch_size_test: itor * batch_size_test + batch_size_test]</span><br><span class="line"></span><br><span class="line">        tmp = X.reshape((batch_size_test, -<span class="number">1</span>))</span><br><span class="line">        tmp = linear1(tmp)</span><br><span class="line">        tmp = tanh1(tmp)</span><br><span class="line">        tmp = linear2(tmp)</span><br><span class="line">        Y = softmax(tmp)</span><br><span class="line">        Y = np.argmax(Y, axis=<span class="number">1</span>)</span><br><span class="line">        test_total += <span class="built_in">len</span>(y)</span><br><span class="line">        test_acc += np.<span class="built_in">sum</span>(y == Y)</span><br><span class="line">        test_process_bar.set_description(<span class="string">'Test epoch:{} '</span>.<span class="built_in">format</span>(epoch + <span class="number">1</span>))</span><br><span class="line">        test_process_bar.set_postfix_str(<span class="string">'Acc [{}/{} ({:.2f}%)]'</span>.<span class="built_in">format</span>(</span><br><span class="line">                                        test_acc, test_total, <span class="number">100.</span> * test_acc/test_total))</span><br></pre></td></tr></tbody></table></figure><h3 id="实验结果"><a href="#实验结果" class="headerlink" title="实验结果"></a>实验结果</h3><p><img src="/2021/11/01/%E7%94%A8NumPy%E6%90%AD%E5%BB%BA%E7%AE%80%E5%8D%95%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/image-20211101134409662.png" alt="image-20211101134409662"></p>]]></content>
    
    
    <summary type="html">用NumPy搭建两层神经网络（包括全连接层和Softmax以及tanh激活函数），实现反向传播，并处理MNIST数据集。</summary>
    
    
    
    <category term="深度学习" scheme="https://1.15.86.100/categories/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="numpy" scheme="https://1.15.86.100/tags/numpy/"/>
    
  </entry>
  
  <entry>
    <title>K-NNMC</title>
    <link href="https://1.15.86.100/2021/10/31/K-NNMC/"/>
    <id>https://1.15.86.100/2021/10/31/K-NNMC/</id>
    <published>2021-10-31T03:20:20.000Z</published>
    <updated>2021-10-31T04:00:27.557Z</updated>
    
    <content type="html"><![CDATA[<h1 id="K-NNMC-1"><a href="#K-NNMC-1" class="headerlink" title="K-NNMC[1]"></a>K-NNMC<a href="#refer-anchor-1"><sup>[1]</sup></a></h1><h2 id="K-NNMC简介"><a href="#K-NNMC简介" class="headerlink" title="K-NNMC简介"></a>K-NNMC简介</h2><p><strong>K-NNMC模型</strong>（k-Nearest Neighbor Mean Classifier）是<em>P. Viswanath</em>和<em>T. Hitendra Sarma</em>于2011年提出的对<strong>KNN</strong>（详见<a href="http://1.15.86.100/2021/05/15/KNN/">KNN | BaoWJ’s Blog</a>）的一种改进方法。</p><p>该方法的主要思路是对KNN中<strong>“选择K个最近邻”</strong>进行了改进。该方法针对<strong>每个类别的数据</strong>都选择<strong>K个最近邻</strong>，然后计算<strong>每个类别的K个最近邻的距离平均值</strong>，并选择<strong>距离平均值最小的类别为预测类别</strong>。</p><h2 id="K-NNMC代码"><a href="#K-NNMC代码" class="headerlink" title="K-NNMC代码"></a>K-NNMC代码</h2><p>因为<strong>sklearn</strong>没有提供<strong>K-NNMC</strong>模型的库函数，所以这里我基于<strong>sklearn</strong>的<strong>KNeighborsClassifier</strong>类构造<strong>WK_NNR</strong>模型。</p><p>因为<strong>K-NNMC</strong>模型需要分别计算每个类别数据对于待预测数据的K个最近邻，所以我用<strong>n</strong>（n表示数据类别总数）个<strong>KNeighborsClassifier</strong>分别处理每类数据，构造了<strong>KNeighborsMeanClassifier</strong>类，代码如下：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">KNeighborsMeanClassifier</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, n_neighbors=<span class="number">5</span></span>) -&gt; <span class="literal">None</span>:</span></span><br><span class="line">        self.labels = <span class="literal">None</span></span><br><span class="line">        self.classifiers = <span class="built_in">dict</span>()</span><br><span class="line">        self.n_neighbors = n_neighbors</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">fit</span>(<span class="params">self, X, y</span>):</span></span><br><span class="line">        self.labels = np.array(<span class="built_in">list</span>(<span class="built_in">set</span>(y)))</span><br><span class="line">        <span class="keyword">for</span> label <span class="keyword">in</span> self.labels:</span><br><span class="line">            model = KNeighborsClassifier()</span><br><span class="line">            model.fit(X[y == label], y[y == label])</span><br><span class="line">            self.classifiers[label] = model</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">predict</span>(<span class="params">self, X</span>):</span></span><br><span class="line">        tmp = []</span><br><span class="line">        <span class="keyword">for</span> label <span class="keyword">in</span> self.labels:</span><br><span class="line">            classifier = self.classifiers[label]</span><br><span class="line">            mean_dis = classifier.kneighbors(X, n_neighbors=self.n_neighbors)[<span class="number">0</span>]</span><br><span class="line">            mean_dis = np.mean(mean_dis, axis=<span class="number">1</span>)</span><br><span class="line">            tmp.append(mean_dis)</span><br><span class="line">        tmp = np.stack(tmp)</span><br><span class="line">        <span class="built_in">print</span>(tmp.shape)</span><br><span class="line">        index = self.labels[np.argmin(tmp, axis=<span class="number">0</span>)]</span><br><span class="line">        <span class="built_in">print</span>(index.shape)</span><br><span class="line">        <span class="keyword">return</span> index</span><br></pre></td></tr></tbody></table></figure><h2 id="K-NNMC实验"><a href="#K-NNMC实验" class="headerlink" title="K-NNMC实验"></a>K-NNMC实验</h2><p><strong>实验数据</strong>和<strong>实验代码</strong>基本同<strong>WK_NNC实验</strong>（<a href="http://1.15.86.100/2021/10/31/WK-NNC/">WK-NNC| BaoWJ’s Blog</a>）</p><h4 id="实验结果"><a href="#实验结果" class="headerlink" title="实验结果"></a>实验结果</h4><p><img src="/2021/10/31/K-NNMC/image-20211031115424008.png" alt="image-20211031115424008"></p><p>结果发现<strong>效果一般</strong>，同时我实现的代码<strong>速度较慢</strong>。</p><h2 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h2><ul><li><a href="http://1.15.86.100/2021/05/15/KNN/">KNN | BaoWJ’s Blog</a></li><li><a href="http://1.15.86.100/2021/10/31/WK-NNC/">WK-NNC| BaoWJ’s Blog</a></li></ul><h2 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h2><p></p><div id="refer-anchor-1"></div> [1] P. Viswanath and T. Hitendra Sarma, “An improvement to k-nearest neighbor classifier,” 2011 IEEE Recent Advances in Intelligent Computational Systems, 2011, pp. 227-231, doi: 10.1109/RAICS.2011.6069307.<p></p>]]></content>
    
    
    <summary type="html">介绍K-NNMC，以及利用sklearn实现模型代码。</summary>
    
    
    
    <category term="Machine Learning" scheme="https://1.15.86.100/categories/Machine-Learning/"/>
    
    
    <category term="KNN" scheme="https://1.15.86.100/tags/KNN/"/>
    
    <category term="sklearn" scheme="https://1.15.86.100/tags/sklearn/"/>
    
  </entry>
  
  <entry>
    <title>WK_NNC</title>
    <link href="https://1.15.86.100/2021/10/31/WK-NNC/"/>
    <id>https://1.15.86.100/2021/10/31/WK-NNC/</id>
    <published>2021-10-31T03:19:51.000Z</published>
    <updated>2021-10-31T03:59:20.783Z</updated>
    
    <content type="html"><![CDATA[<h1 id="WK-NNC-1"><a href="#WK-NNC-1" class="headerlink" title="WK_NNC[1]"></a>WK_NNC<a href="#refer-anchor-1"><sup>[1]</sup></a></h1><h2 id="WK-NNC简介"><a href="#WK-NNC简介" class="headerlink" title="WK_NNC简介"></a>WK_NNC简介</h2><p><strong>WK_NNR模型</strong>（Distance-Weighted k-Nearest-Neighbor Rule）是<em>Sahibsingh A. Dudani</em>于1976年提出的对<strong>KNN</strong>（详见<a href="http://1.15.86.100/2021/05/15/KNN/">KNN | BaoWJ’s Blog</a>）的一种改进方法。</p><p>该方法的主要思路是对<strong>KNN</strong>中的距离进行<strong>加权</strong>。</p><p>基础<strong>KNN</strong>是：直接取距离<strong>待预测数据点</strong> <script type="math/tex">\alpha</script> 最近的<strong>K</strong>个点，并预测该数据类别为这K个数据中<strong>占比最大</strong>的数据的类别。<strong>KNN</strong>可以看成<strong>WK__NNC</strong>的一个特例，这相当于对K个数据点中，设置权重都为<strong>1</strong>。</p><p><strong>WK_NNR</strong>的思路是根据这K个点距离 <script type="math/tex">\alpha</script> 的距离不同赋予不同的<strong>权重</strong>，最后依据<strong>权重之和</strong>最大的类别来预测。</p><p>对于<strong>待预测数据点</strong> <script type="math/tex">\alpha</script> 的<strong>K个“最近邻”</strong>  <script type="math/tex">\alpha_i,1\le i \le K</script>，其中 <script type="math/tex">\alpha_i</script> 距离 <script type="math/tex">\alpha</script> 点的距离为 <script type="math/tex">d_i</script>，且 <script type="math/tex">d_1\le d_2 \le \cdots \le d_K</script>。则，其每个点的<strong>权重</strong>定义如下：</p><script type="math/tex; mode=display">w_i=\left\{\begin{aligned} \frac{d_k-d_i}{d_k-d_1}\quad & d_k \ne d_1\\ 1\quad &d_k=d_1\end{aligned}\right.</script><p>最终 <script type="math/tex">\alpha</script> 的<strong>预测类别</strong>为<strong>权重加和值最大</strong>的数据的类别。</p><h2 id="WK-NNC代码"><a href="#WK-NNC代码" class="headerlink" title="WK_NNC代码"></a>WK_NNC代码</h2><p>因为<strong>sklearn</strong>没有提供<strong>WK_NNR</strong>模型的库函数，所以这里我基于<strong>sklearn</strong>的<strong>KNeighborsClassifier</strong>类构造<strong>WK_NNR</strong>模型。</p><p><strong>KNeighborsClassifier</strong>提供了一个<strong>weights</strong>参数接口，用户可以通过自定义函数来自定义距离权重，所以我写了一个基于<strong>WK_NNR</strong>权重的自定义函数<strong>kw_nnc</strong>，代码如下：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">kw_nnc</span>(<span class="params">distances</span>):</span></span><br><span class="line">    <span class="keyword">return</span> ((distances[:, -<span class="number">1</span>][:, np.newaxis] - distances) + <span class="number">1e-6</span>) / ((distances[:, -<span class="number">1</span>] - distances[:, <span class="number">0</span>])[:, np.newaxis] + <span class="number">1e-6</span>) <span class="comment"># 1e-6为了防止除0发生</span></span><br><span class="line"></span><br><span class="line">wk_nnc_model = KNeighborsClassifier(weights=kw_nnc)</span><br></pre></td></tr></tbody></table></figure><h2 id="WK-NNC实验"><a href="#WK-NNC实验" class="headerlink" title="WK_NNC实验"></a>WK_NNC实验</h2><h3 id="实验数据"><a href="#实验数据" class="headerlink" title="实验数据"></a>实验数据</h3><ul><li><p>数据来源：<a href="http://www.cad.zju.edu.cn/home/dengcai/Data/TDT2/TDT2.mat">http://www.cad.zju.edu.cn/home/dengcai/Data/TDT2/TDT2.mat</a></p></li><li><p>数据简介：该数据是新闻文本数据，数据的作者从新闻文本中提取出的<strong>词频</strong>数据。。</p></li><li><p>数据维度：36771；</p></li><li><p>类别数：30；</p></li><li><p>数据条数：9394；</p></li></ul><h3 id="实验代码"><a href="#实验代码" class="headerlink" title="实验代码"></a>实验代码</h3><h4 id="导入依赖包"><a href="#导入依赖包" class="headerlink" title="导入依赖包"></a>导入依赖包</h4><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> scipy.io <span class="keyword">as</span> scio</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">from</span> sklearn.neighbors <span class="keyword">import</span> KNeighborsClassifier</span><br><span class="line"><span class="keyword">from</span> sklearn.model_selection  <span class="keyword">import</span> cross_val_score</span><br><span class="line"><span class="keyword">from</span> sklearn.metrics <span class="keyword">import</span> confusion_matrix, accuracy_score</span><br><span class="line"><span class="keyword">from</span> sklearn.model_selection <span class="keyword">import</span> train_test_split</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h4 id="加载数据"><a href="#加载数据" class="headerlink" title="加载数据"></a>加载数据</h4><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">dataFile = <span class="string">'./TDT2.mat'</span></span><br><span class="line">data = scio.loadmat(dataFile)</span><br><span class="line">Y = data[<span class="string">'gnd'</span>].ravel()</span><br><span class="line">X = data[<span class="string">'fea'</span>].A</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">'X shape:'</span>, X.shape)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">'Y shape:'</span>, Y.shape)</span><br></pre></td></tr></tbody></table></figure><h4 id="TF-IDF"><a href="#TF-IDF" class="headerlink" title="TF-IDF"></a>TF-IDF</h4><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.feature_extraction.text <span class="keyword">import</span> TfidfTransformer</span><br><span class="line"></span><br><span class="line">tfidf = TfidfTransformer()</span><br><span class="line">X = tfidf.fit_transform(X).A</span><br></pre></td></tr></tbody></table></figure><h4 id="寻找最优K值"><a href="#寻找最优K值" class="headerlink" title="寻找最优K值"></a>寻找最优K值</h4><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_best_k_acc</span>(<span class="params">X_train, Y_train, X_test, Y_test</span>):</span></span><br><span class="line">    acc_list = []</span><br><span class="line">    k_list = []</span><br><span class="line">    model = KNeighborsClassifier(weights=kw_nnc)</span><br><span class="line">    <span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>, <span class="number">16</span>, <span class="number">1</span>):</span><br><span class="line">        model.n_neighbors = k</span><br><span class="line">        model.fit(X_train, Y_train)</span><br><span class="line">        Y_pred = model.predict(X_test)</span><br><span class="line">        acc = accuracy_score(Y_test, Y_pred)</span><br><span class="line">        k_list.append(k)</span><br><span class="line">        acc_list.append(acc)</span><br><span class="line"></span><br><span class="line">    plt.plot(k_list, acc_list)</span><br><span class="line">    plt.ylabel(<span class="string">'Accuracy'</span>)</span><br><span class="line">    plt.title(<span class="string">'Accuracy with K'</span>)</span><br><span class="line">    plt.xlabel(<span class="string">'K'</span>)</span><br><span class="line">    plt.show()</span><br><span class="line">    <span class="comment"># 计算最优K</span></span><br><span class="line">    best_acc = np.<span class="built_in">max</span>(acc_list)</span><br><span class="line">    best_k = k_list[np.argmax(acc_list)]</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">'最优k值为: {}, value为: {}'</span>.<span class="built_in">format</span>(best_k, best_acc))</span><br><span class="line">    <span class="keyword">return</span> (best_k, best_acc)</span><br></pre></td></tr></tbody></table></figure><h4 id="寻找最优降维维度"><a href="#寻找最优降维维度" class="headerlink" title="寻找最优降维维度"></a>寻找最优降维维度</h4><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.decomposition <span class="keyword">import</span> PCA</span><br><span class="line">acc_list = []</span><br><span class="line">k_list = []</span><br><span class="line">n_list = []</span><br><span class="line">pca_model = PCA()</span><br><span class="line"><span class="keyword">for</span> n <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">11</span>, <span class="number">1</span>):</span><br><span class="line">    <span class="comment"># 降维</span></span><br><span class="line">    n = n * <span class="number">10</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">'-'</span> * <span class="number">15</span> + <span class="string">'维度为'</span> + <span class="built_in">str</span>(n) + <span class="string">'-'</span> * <span class="number">15</span>)</span><br><span class="line">    pca_model.n_components = n</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">'-'</span> * <span class="number">15</span> + <span class="string">'开始降维'</span> + <span class="string">'-'</span> * <span class="number">15</span>)</span><br><span class="line">    pca_X = pca_model.fit_transform(X)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">'降维后形状:'</span>, pca_X.shape)</span><br><span class="line">    <span class="comment"># 划分数据集</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">'-'</span> * <span class="number">15</span> + <span class="string">'开始切分数据'</span> + <span class="string">'-'</span> * <span class="number">15</span>)</span><br><span class="line">    X_train, X_test, Y_train, Y_test = train_test_split(pca_X, Y, test_size=<span class="number">0.25</span>, random_state=<span class="number">21</span>, shuffle=<span class="literal">True</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">'训练数据:'</span>, X_train.shape)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">'训练label:'</span>, Y_train.shape)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">'测试数据:'</span>, X_test.shape)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">'测试label'</span>, Y_test.shape)</span><br><span class="line">    k, acc = get_best_k_acc(X_train, Y_train, X_test, Y_test)</span><br><span class="line">    k_list.append(k)</span><br><span class="line">    acc_list.append(acc)</span><br><span class="line">    n_list.append(n)</span><br></pre></td></tr></tbody></table></figure><h4 id="绘图"><a href="#绘图" class="headerlink" title="绘图"></a>绘图</h4><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line">plt.title(<span class="string">'K-NNMC'</span>)</span><br><span class="line">plt.subplot(<span class="number">2</span>, <span class="number">1</span>, <span class="number">1</span>)</span><br><span class="line">plt.xlim(<span class="number">0</span>, <span class="number">105</span>)</span><br><span class="line">plt.ylim(<span class="number">0.96</span>, <span class="number">0.98</span>)</span><br><span class="line">plt.scatter(n_list, acc_list)</span><br><span class="line">plt.plot(n_list, acc_list)</span><br><span class="line"><span class="keyword">for</span> x, y <span class="keyword">in</span> <span class="built_in">zip</span>(n_list, acc_list):</span><br><span class="line">    plt.text(x, y + <span class="number">0.001</span>, <span class="string">"%.3f"</span>%y)</span><br><span class="line">plt.ylabel(<span class="string">'Accuracy'</span>)</span><br><span class="line">plt.grid()</span><br><span class="line">plt.title(<span class="string">'Best_Accuracy with Dim'</span>)</span><br><span class="line">plt.xlabel(<span class="string">'Dim'</span>)</span><br><span class="line"></span><br><span class="line">plt.subplot(<span class="number">2</span>, <span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line">plt.scatter(n_list, k_list)</span><br><span class="line">plt.plot(n_list, k_list)</span><br><span class="line"><span class="keyword">for</span> x, y <span class="keyword">in</span> <span class="built_in">zip</span>(n_list, k_list):</span><br><span class="line">    plt.text(x, y + <span class="number">0.1</span>, <span class="string">"%d"</span>%y)</span><br><span class="line">plt.ylabel(<span class="string">'K'</span>)</span><br><span class="line">plt.grid()</span><br><span class="line">plt.title(<span class="string">'Best_K with Dim'</span>)</span><br><span class="line">plt.xlabel(<span class="string">'Dim'</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></tbody></table></figure><h4 id="实验结果"><a href="#实验结果" class="headerlink" title="实验结果"></a>实验结果</h4><p><img src="/2021/10/31/WK-NNC/image-20211031114639261.png" alt="image-20211031114639261"></p><p>结果发现，<strong>WK_NNC</strong>模型取的最优值的地方<strong>K</strong>值都比较大（在10附近），说明<strong>WK_NNC</strong>模型<strong>泛化性</strong>比较好。</p><h2 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h2><ul><li><a href="http://1.15.86.100/2021/05/15/KNN/">KNN | BaoWJ’s Blog</a></li><li><a href="http://1.15.86.100/2021/10/31/K-NNMC/">K-NNMC | BaoWJ’s Blog</a></li></ul><h2 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h2><p></p><div id="refer-anchor-1"></div> [1] S. A. Dudani, “The Distance-Weighted k-Nearest-Neighbor Rule,” in IEEE Transactions on Systems, Man, and Cybernetics, vol. SMC-6, no. 4, pp. 325-327, April 1976, doi: 10.1109/TSMC.1976.5408784.<p></p>]]></content>
    
    
    <summary type="html">介绍WK_NNC，以及利用sklearn实现模型代码。</summary>
    
    
    
    <category term="Machine Learning" scheme="https://1.15.86.100/categories/Machine-Learning/"/>
    
    
    <category term="KNN" scheme="https://1.15.86.100/tags/KNN/"/>
    
    <category term="sklearn" scheme="https://1.15.86.100/tags/sklearn/"/>
    
  </entry>
  
  <entry>
    <title>Linux设置虚拟内存</title>
    <link href="https://1.15.86.100/2021/10/31/Linux%E8%AE%BE%E7%BD%AE%E8%99%9A%E6%8B%9F%E5%86%85%E5%AD%98/"/>
    <id>https://1.15.86.100/2021/10/31/Linux%E8%AE%BE%E7%BD%AE%E8%99%9A%E6%8B%9F%E5%86%85%E5%AD%98/</id>
    <published>2021-10-31T01:56:30.000Z</published>
    <updated>2021-10-31T02:16:19.702Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Linux设置虚拟内存"><a href="#Linux设置虚拟内存" class="headerlink" title="Linux设置虚拟内存"></a>Linux设置虚拟内存</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p><strong>虚拟内存</strong>是指将部分<strong>硬盘存储</strong>通过<strong>虚拟化</strong>转变成<strong>内存</strong>，以缓解内存不足的问题。</p><h2 id="设置方法"><a href="#设置方法" class="headerlink" title="设置方法"></a>设置方法</h2><h3 id="查看本地虚拟内存情况"><a href="#查看本地虚拟内存情况" class="headerlink" title="查看本地虚拟内存情况"></a>查看本地虚拟内存情况</h3><p>命令：<code>free -m</code></p><p><img src="/2021/10/31/Linux%E8%AE%BE%E7%BD%AE%E8%99%9A%E6%8B%9F%E5%86%85%E5%AD%98/image-20211031100002940.png" alt="image-20211031100002940"></p><h3 id="创建swapfile文件"><a href="#创建swapfile文件" class="headerlink" title="创建swapfile文件"></a>创建swapfile文件</h3><ul><li>进入<code>/usr</code>目录；</li><li>创建<code>swap</code>文件夹，并进入该文件夹；</li><li>创建<code>swapfile</code>文件：<code>dd if=/dev/zero of=/usr/swap/swapfile bs=1M count=4096</code></li></ul><p><img src="/2021/10/31/Linux%E8%AE%BE%E7%BD%AE%E8%99%9A%E6%8B%9F%E5%86%85%E5%AD%98/image-20211031100237307.png" alt="image-20211031100237307"></p><h3 id="将swapfile设置为swap分区文件"><a href="#将swapfile设置为swap分区文件" class="headerlink" title="将swapfile设置为swap分区文件"></a>将swapfile设置为swap分区文件</h3><p>命令：<code>mkswap /usr/swap/swapfile</code></p><p><img src="/2021/10/31/Linux%E8%AE%BE%E7%BD%AE%E8%99%9A%E6%8B%9F%E5%86%85%E5%AD%98/image-20211031100411392.png" alt="image-20211031100411392"></p><h3 id="激活swap分区"><a href="#激活swap分区" class="headerlink" title="激活swap分区"></a>激活swap分区</h3><p>命令：<code>swapon /usr/swap/swapfile</code></p><p><img src="/2021/10/31/Linux%E8%AE%BE%E7%BD%AE%E8%99%9A%E6%8B%9F%E5%86%85%E5%AD%98/image-20211031100524446.png" alt="image-20211031100524446"></p><h3 id="查看结果"><a href="#查看结果" class="headerlink" title="查看结果"></a>查看结果</h3><p>命令：<code>free -m</code></p><p><img src="/2021/10/31/Linux%E8%AE%BE%E7%BD%AE%E8%99%9A%E6%8B%9F%E5%86%85%E5%AD%98/image-20211031100613907.png" alt="image-20211031100613907"></p><h3 id="设置开机自启动虚拟内存"><a href="#设置开机自启动虚拟内存" class="headerlink" title="设置开机自启动虚拟内存"></a>设置开机自启动虚拟内存</h3><ul><li><p>打开<code>/etc/fstab</code>文件；</p></li><li><p>添加下面内容：</p>  <figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/swap/swapfile swap swap defaults 0 0</span><br></pre></td></tr></tbody></table></figure></li></ul><h3 id="关闭虚拟内存"><a href="#关闭虚拟内存" class="headerlink" title="关闭虚拟内存"></a>关闭虚拟内存</h3><p>如果不需要了，可以通过下面命令关闭虚拟内存：</p><p><code>swapoff -v [path]</code></p>]]></content>
    
    
    <summary type="html">给Linux系统设置虚拟内存。</summary>
    
    
    
    <category term="Linux" scheme="https://1.15.86.100/categories/Linux/"/>
    
    
    <category term="虚拟内存" scheme="https://1.15.86.100/tags/%E8%99%9A%E6%8B%9F%E5%86%85%E5%AD%98/"/>
    
  </entry>
  
  <entry>
    <title>OpenGL</title>
    <link href="https://1.15.86.100/2021/10/26/OpenGL/"/>
    <id>https://1.15.86.100/2021/10/26/OpenGL/</id>
    <published>2021-10-26T06:28:40.000Z</published>
    <updated>2021-10-26T07:14:46.754Z</updated>
    
    <content type="html"><![CDATA[<h1 id="OpenGL"><a href="#OpenGL" class="headerlink" title="OpenGL"></a>OpenGL</h1><h2 id="视图（View）和窗口（Window）"><a href="#视图（View）和窗口（Window）" class="headerlink" title="视图（View）和窗口（Window）"></a>视图（View）和窗口（Window）</h2><h3 id="视图（View）"><a href="#视图（View）" class="headerlink" title="视图（View）"></a>视图（View）</h3><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">glViewport</span>(<span class="number">0</span>, <span class="number">0</span>, screen_width, screen_height);</span><br></pre></td></tr></tbody></table></figure><p>是<strong>逻辑</strong>上图像画面投影的窗口；</p><h3 id="窗口（Window）"><a href="#窗口（Window）" class="headerlink" title="窗口（Window）"></a>窗口（Window）</h3><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">glfwCreateWindow</span>(screen_width, screen_height, <span class="string">"Quad"</span>, <span class="literal">nullptr</span>, <span class="literal">nullptr</span>);</span><br></pre></td></tr></tbody></table></figure><p>是<strong>真实</strong>呈现在显示屏上的窗口；</p><h3 id="二者关系"><a href="#二者关系" class="headerlink" title="二者关系"></a>二者关系</h3><p>在<strong>视图</strong>向<strong>窗口</strong>转换时，是直接在<strong>视图</strong>上截取<strong>窗口</strong>大小的图像（不投影）。</p><h2 id="基本函数"><a href="#基本函数" class="headerlink" title="基本函数"></a>基本函数</h2><h3 id="glVertexAttribPointer"><a href="#glVertexAttribPointer" class="headerlink" title="glVertexAttribPointer"></a>glVertexAttribPointer</h3><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">glVertexAttribPointer</span>(<span class="number">0</span>, <span class="number">3</span>, GL_FLOAT, GL_FALSE, <span class="number">3</span> * <span class="built_in"><span class="keyword">sizeof</span></span>(<span class="keyword">float</span>), (<span class="keyword">void</span>*)<span class="number">0</span>);</span><br></pre></td></tr></tbody></table></figure><ul><li>第一个参数：顶点属性的<strong>索引</strong>，方便后面调用该数据；</li><li>第二个参数：一个顶点属性的大小（包含的数据数量）；</li><li>第三个参数：指定数据类型；</li><li>第四个参数：是否希望数据被标准化（投影到【-1，1】区间）；</li><li>第五个参数：步长（属性组之间的间隔）；</li></ul><h3 id="glDrawElements"><a href="#glDrawElements" class="headerlink" title="glDrawElements"></a>glDrawElements</h3><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">glDrawElements</span><span class="params">(GLenum  mode,</span></span></span><br><span class="line"><span class="function"><span class="params">                 GLsizei  count,</span></span></span><br><span class="line"><span class="function"><span class="params"> GLenum  type,</span></span></span><br><span class="line"><span class="function"><span class="params"> <span class="keyword">const</span> GLvoid *  indices)</span></span>;</span><br><span class="line"><span class="built_in">glDrawElements</span>(GL_TRIANGLES, <span class="number">6</span>, GL_UNSIGNED_INT, <span class="number">0</span>);</span><br></pre></td></tr></tbody></table></figure><p>利用顶点数据和索引数据渲染形状。</p><ul><li><strong>mode</strong>：指定渲染的模式；</li><li><strong>count</strong>：指定渲染的元素个数；</li><li><strong>type</strong>：指定渲染的<strong>索引</strong>的数据类型；</li><li><strong>indices</strong>：索引存储位置的指针；</li></ul><h2 id="渲染模式"><a href="#渲染模式" class="headerlink" title="渲染模式"></a>渲染模式</h2><h3 id="GL-TRIANGLES"><a href="#GL-TRIANGLES" class="headerlink" title="GL_TRIANGLES"></a>GL_TRIANGLES</h3><p>每三个顶点绘制一个三角形，如果顶点数量不是3的倍数，则忽略最后一个或两个顶点。</p><p>例如：<strong>1，2，3，4，5，6，7</strong>，使用该模式绘制图形，则生成两个三角形<strong>1，2，3</strong>和<strong>4，5，6</strong>。</p><h3 id="GL-TRIANGLE-STRIP"><a href="#GL-TRIANGLE-STRIP" class="headerlink" title="GL_TRIANGLE_STRIP"></a>GL_TRIANGLE_STRIP</h3><ul><li>当前顶点序号n是<strong>偶数</strong>时，三角形三个顶点的顺序是(n - 2, n - 1, n )；</li><li>当前顶点序号n是<strong>奇数</strong>时，三角形三个顶点的顺序是(n - 1, n - 2, n)；</li></ul><h3 id="GL-TRIANGLE-FAN"><a href="#GL-TRIANGLE-FAN" class="headerlink" title="GL_TRIANGLE_FAN"></a>GL_TRIANGLE_FAN</h3><p>以<strong>第一个点为中心点</strong>，其他顶点为<strong>边缘点</strong>，绘制一系列组成扇形的相邻三角形。</p><p>例如：<strong>1，2，3，4，5</strong>，使用该模式绘制图形，则生成三个三角形<strong>1，2，3</strong>和<strong>1，3，4</strong>和<strong>1，4，5</strong>。</p>]]></content>
    
    
    <summary type="html">计算机图形学</summary>
    
    
    
    <category term="计算机图形学" scheme="https://1.15.86.100/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9B%BE%E5%BD%A2%E5%AD%A6/"/>
    
    
    <category term="OpenGL" scheme="https://1.15.86.100/tags/OpenGL/"/>
    
  </entry>
  
  <entry>
    <title>Linux-C语言</title>
    <link href="https://1.15.86.100/2021/09/06/Linux-C%E8%AF%AD%E8%A8%80/"/>
    <id>https://1.15.86.100/2021/09/06/Linux-C%E8%AF%AD%E8%A8%80/</id>
    <published>2021-09-06T08:57:21.000Z</published>
    <updated>2021-09-07T12:01:15.362Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Linux-C语言"><a href="#Linux-C语言" class="headerlink" title="Linux C语言"></a>Linux C语言</h1><h2 id="GCC"><a href="#GCC" class="headerlink" title="GCC"></a>GCC</h2><h3 id="gcc处理过程"><a href="#gcc处理过程" class="headerlink" title="gcc处理过程"></a>gcc处理过程</h3><ul><li><strong>预处理</strong>：<code>gcc -E</code>，将<code>.c</code>文件<strong>头文件展开，宏替换</strong>生成<code>.i</code>文件；</li><li><strong>编译</strong>：<code>gcc -S</code>，将<code>.i</code>文件编译成<strong>汇编文件</strong>生成<code>.s</code>文件；</li><li><strong>汇编</strong>：<code>gcc -c</code>，将<code>.s</code>文件进行<strong>汇编</strong>生成二进制<code>.o</code>文件；</li><li><strong>链接</strong>：<code>gcc</code>，将<code>.o</code>文件和函数库的文件组合生成目标<strong>可执行文件</strong><code>.out</code>；</li></ul><h3 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h3><h4 id="o"><a href="#o" class="headerlink" title="-o"></a>-o</h4><p>制定目标名称</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gcc -o hello.exe hello.c</span><br></pre></td></tr></tbody></table></figure><h4 id="g"><a href="#g" class="headerlink" title="-g"></a>-g</h4><p>在编译的时候，产生调试信息。</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gcc -o hello.exe hello.c -g</span><br></pre></td></tr></tbody></table></figure><h4 id="I"><a href="#I" class="headerlink" title="-I"></a>-I</h4><p>指定头文件目录</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gcc -o hello.exe hello.c -I /home/c</span><br></pre></td></tr></tbody></table></figure><h2 id="静态库"><a href="#静态库" class="headerlink" title="静态库"></a>静态库</h2><h3 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h3><p>避免源代码泄露</p><h4 id="命名规则"><a href="#命名规则" class="headerlink" title="命名规则"></a>命名规则</h4><p><code>lib + 库名字 + .a</code></p><h3 id="制作过程"><a href="#制作过程" class="headerlink" title="制作过程"></a>制作过程</h3><h4 id="编写源代码"><a href="#编写源代码" class="headerlink" title="编写源代码"></a>编写源代码</h4><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">//tmp/src/add.c</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"head.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="keyword">return</span> a + b;</span><br><span class="line">}</span><br><span class="line"><span class="comment">//tmp/src/sub.c</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"head.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sub</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="keyword">return</span> a - b;</span><br><span class="line">}</span><br><span class="line"><span class="comment">//tmp/src/mul.c</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"head.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">mul</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="keyword">return</span> a * b;</span><br><span class="line">}</span><br><span class="line"><span class="comment">//tmp/src/div.c</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"head.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">div</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="keyword">return</span> a/b;</span><br><span class="line">}</span><br><span class="line"><span class="comment">//tmp/include/head.h</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> _HEAD_H_</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _HEAD_H_</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sub</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">mul</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">div</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 文件结构 */</span></span><br><span class="line">root@VM<span class="number">-0</span><span class="number">-2</span>-ubuntu:~<span class="meta"># tree tmp</span></span><br><span class="line">tmp</span><br><span class="line">├── include</span><br><span class="line">│&nbsp;&nbsp; └── head.h</span><br><span class="line">├── lib</span><br><span class="line">├── main.c</span><br><span class="line">└── src</span><br><span class="line">    ├── add.c</span><br><span class="line">    ├── div.c</span><br><span class="line">    ├── mul.c</span><br><span class="line">    └── sub.c</span><br></pre></td></tr></tbody></table></figure><h4 id="生成-o-文件"><a href="#生成-o-文件" class="headerlink" title="生成.o 文件"></a>生成<code>.o</code> 文件</h4><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">root@VM-0-2-ubuntu:~/tmp/src# gcc -c *.c -I ../include/</span><br><span class="line"></span><br><span class="line">root@VM-0-2-ubuntu:~# tree tmp</span><br><span class="line">tmp</span><br><span class="line">├── include</span><br><span class="line">│&nbsp;&nbsp; └── head.h</span><br><span class="line">├── lib</span><br><span class="line">├── main.c</span><br><span class="line">└── src</span><br><span class="line">    ├── add.c</span><br><span class="line">    ├── add.o</span><br><span class="line">    ├── div.c</span><br><span class="line">    ├── div.o</span><br><span class="line">    ├── mul.c</span><br><span class="line">    ├── mul.o</span><br><span class="line">    ├── sub.c</span><br><span class="line">    └── sub.o</span><br></pre></td></tr></tbody></table></figure><h4 id="打包-o文件"><a href="#打包-o文件" class="headerlink" title="打包.o文件"></a>打包<code>.o</code>文件</h4><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ar rcs [静态库名字] [.o文件]</span><br></pre></td></tr></tbody></table></figure><p><img src="/2021/09/06/Linux-C%E8%AF%AD%E8%A8%80/image-20210906193744531.png" alt="image-20210906193744531"></p><h4 id="发布静态库和头文件"><a href="#发布静态库和头文件" class="headerlink" title="发布静态库和头文件"></a>发布静态库和头文件</h4><p>将<strong>静态库文件<code>.a</code></strong>拷贝到<code>lib</code>目录，头文件存放于<code>include</code>目录即可。</p><p><img src="/2021/09/06/Linux-C%E8%AF%AD%E8%A8%80/image-20210906193949386.png" alt="image-20210906193949386"></p><h4 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h4><p><strong>main.c</strong>文件：</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"head.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="keyword">int</span> a = <span class="number">23</span>, b = <span class="number">7</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"add:%d\n"</span>, add(a, b));</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"sub:%d\n"</span>, sub(a, b));</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"mul:%d\n"</span>, mul(a, b));</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"div:%d\n"</span>, div(a, b));</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><strong>编译</strong>：</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">root@VM-0-2-ubuntu:~/tmp# gcc main.c -o main.out lib/libF.a -I include/</span><br></pre></td></tr></tbody></table></figure><p><strong>运行</strong>：</p><p><img src="/2021/09/06/Linux-C%E8%AF%AD%E8%A8%80/image-20210906194836658.png" alt="image-20210906194836658"></p><h2 id="动态库"><a href="#动态库" class="headerlink" title="动态库"></a>动态库</h2><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><h4 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h4><ul><li>执行程序体积小；</li><li>动态库更新不需要重新编译程序；</li></ul><h4 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h4><ul><li>加载速度吗；</li><li>比较麻烦；</li></ul><h4 id="命名规则-1"><a href="#命名规则-1" class="headerlink" title="命名规则"></a>命名规则</h4><p><code>lib + 库名字 + .so</code></p><h3 id="生成-o文件"><a href="#生成-o文件" class="headerlink" title="生成.o文件"></a>生成<code>.o</code>文件</h3><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">root@VM-0-2-ubuntu:~/tmp/src# gcc -fPIC -c *.c -I ../include/</span><br></pre></td></tr></tbody></table></figure><h3 id="打包-o文件-1"><a href="#打包-o文件-1" class="headerlink" title="打包.o文件"></a>打包<code>.o</code>文件</h3><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">root@VM-0-2-ubuntu:~/tmp/src# gcc -shared -o libMyShared.so *.o -I ../include/</span><br></pre></td></tr></tbody></table></figure><h3 id="使用-1"><a href="#使用-1" class="headerlink" title="使用"></a>使用</h3><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">root@VM-0-2-ubuntu:~/tmp# gcc main.c -o main.out lib/libMyShared.so -I include/</span><br></pre></td></tr></tbody></table></figure><h2 id="makefile"><a href="#makefile" class="headerlink" title="makefile"></a>makefile</h2><h3 id="makefile规则"><a href="#makefile规则" class="headerlink" title="makefile规则"></a>makefile规则</h3><ul><li>生成最终文件的规则必须写在最上面；</li></ul><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">目标:依赖</span><br><span class="line">生成命令</span><br><span class="line"></span><br><span class="line">app:../main.c add.c sub.c mul.c div.c</span><br><span class="line">gcc ../main.c add.c sub.c mul.c div.c -o app -I ../include</span><br></pre></td></tr></tbody></table></figure><h3 id="编译"><a href="#编译" class="headerlink" title="编译"></a>编译</h3><p>使用命令<code>make</code></p>]]></content>
    
    
    <summary type="html">Linux下C语言编译。</summary>
    
    
    
    <category term="Linux" scheme="https://1.15.86.100/categories/Linux/"/>
    
    <category term="C" scheme="https://1.15.86.100/categories/Linux/C/"/>
    
    
    <category term="gcc" scheme="https://1.15.86.100/tags/gcc/"/>
    
    <category term="Makefile" scheme="https://1.15.86.100/tags/Makefile/"/>
    
  </entry>
  
  <entry>
    <title>Linux-服务器搭建</title>
    <link href="https://1.15.86.100/2021/09/06/Linux-%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%90%AD%E5%BB%BA/"/>
    <id>https://1.15.86.100/2021/09/06/Linux-%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%90%AD%E5%BB%BA/</id>
    <published>2021-09-06T07:31:55.000Z</published>
    <updated>2021-09-06T12:38:00.304Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Linux-服务器搭建"><a href="#Linux-服务器搭建" class="headerlink" title="Linux 服务器搭建"></a>Linux 服务器搭建</h1><h2 id="ftp服务器"><a href="#ftp服务器" class="headerlink" title="ftp服务器"></a>ftp服务器</h2><h3 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h3><p>文件的上传和下载。</p><h3 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h3><h4 id="安装-vsftpd"><a href="#安装-vsftpd" class="headerlink" title="安装 vsftpd"></a>安装 <code>vsftpd</code></h4><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt install vsftpd</span><br></pre></td></tr></tbody></table></figure><p><img src="/2021/09/06/Linux-%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%90%AD%E5%BB%BA/image-20210906153652906.png" alt="image-20210906153652906"></p><h4 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h4><p><strong>位置</strong>：<code>/etc/vsftpd.conf</code></p><p><img src="/2021/09/06/Linux-%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%90%AD%E5%BB%BA/image-20210906153912108.png" alt="image-20210906153912108"></p><p><img src="/2021/09/06/Linux-%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%90%AD%E5%BB%BA/image-20210906154127175.png" alt="image-20210906154127175"></p><h4 id="重启服务"><a href="#重启服务" class="headerlink" title="重启服务"></a>重启服务</h4><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">service vsftpd restart</span><br></pre></td></tr></tbody></table></figure><h3 id="ftp使用"><a href="#ftp使用" class="headerlink" title="ftp使用"></a>ftp使用</h3><h4 id="上传文件"><a href="#上传文件" class="headerlink" title="上传文件"></a>上传文件</h4><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">put [本地路径] [远程路径]</span><br></pre></td></tr></tbody></table></figure><h4 id="下载文件"><a href="#下载文件" class="headerlink" title="下载文件"></a>下载文件</h4><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">get [远程路径] [本地路径]</span><br></pre></td></tr></tbody></table></figure><h2 id="nfs服务器"><a href="#nfs服务器" class="headerlink" title="nfs服务器"></a>nfs服务器</h2><h3 id="功能-1"><a href="#功能-1" class="headerlink" title="功能"></a>功能</h3><p><strong>网络文件系统（net file system）</strong>，它可以允许网络中的计算机共享资源。</p><h3 id="步骤-1"><a href="#步骤-1" class="headerlink" title="步骤"></a>步骤</h3><h4 id="安装-nfs-kernel-server"><a href="#安装-nfs-kernel-server" class="headerlink" title="安装 nfs-kernel server"></a>安装 <code>nfs-kernel server</code></h4><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt install nfs-kernel-server</span><br></pre></td></tr></tbody></table></figure><h4 id="配置文件-1"><a href="#配置文件-1" class="headerlink" title="配置文件"></a>配置文件</h4><p><strong>位置</strong>：<code>/etc/exports</code></p><p><img src="/2021/09/06/Linux-%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%90%AD%E5%BB%BA/image-20210906162812642.png" alt="image-20210906162812642"></p><h4 id="重启服务-1"><a href="#重启服务-1" class="headerlink" title="重启服务"></a>重启服务</h4><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">service nfs-kernel-server restart</span><br></pre></td></tr></tbody></table></figure><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><h4 id="本地挂载"><a href="#本地挂载" class="headerlink" title="本地挂载"></a>本地挂载</h4><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mount [服务器ip:共享目录] [本地位置]</span><br></pre></td></tr></tbody></table></figure>]]></content>
    
    
    <summary type="html">ftp文件服务器，ssh服务器，nfs服务器搭建方法。</summary>
    
    
    
    <category term="Linux" scheme="https://1.15.86.100/categories/Linux/"/>
    
    
    <category term="ftp" scheme="https://1.15.86.100/tags/ftp/"/>
    
    <category term="ssh" scheme="https://1.15.86.100/tags/ssh/"/>
    
    <category term="nfs" scheme="https://1.15.86.100/tags/nfs/"/>
    
  </entry>
  
</feed>
